[{"/home/dbws/db/health-kangaroo-backend/client/Customer/src/index.js":"1","/home/dbws/db/health-kangaroo-backend/client/Customer/src/polyfill.js":"2","/home/dbws/db/health-kangaroo-backend/client/Customer/src/App.js":"3","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/setHeaders.js":"4","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/setAuthToken.js":"5","/home/dbws/db/health-kangaroo-backend/client/Customer/src/store.js":"6","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/auth.js":"7","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/Routes.js":"8","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/PrivateRoute.js":"9","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/PublicRoute.js":"10","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/errors.js":"11","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/alert.js":"12","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/types.js":"13","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/index.js":"14","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/UnderConstruction.js":"15","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/NotFound.js":"16","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/VerifySubscription.js":"17","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/VerifyEmail.js":"18","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/ForgotPassword/ForgotPassword.js":"19","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/ForgotPassword/ResetPassword.js":"20","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/certificateCategories.js":"21","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/alert.js":"22","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/auth.js":"23","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/errors.js":"24","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/testCategories.js":"25","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/verification.js":"26","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/city_search.js":"27","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/lab_search.js":"28","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/subscription.js":"29","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/misc.js":"30","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/common.js":"31","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/page.js":"32","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/profile.js":"33","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/footer.js":"34","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/habits.js":"35","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/lab-tests.js":"36","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/category.js":"37","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/packages.js":"38","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/tests.js":"39","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/lt_categories.js":"40","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/address.js":"41","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/lab.js":"42","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/coupon.js":"43","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/family.js":"44","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/prescription.js":"45","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/order.js":"46","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/locality.js":"47","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/health_record.js":"48","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/article.js":"49","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/articleCategories.js":"50","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/wallet.js":"51","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/collectionCenters.js":"52","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/notification.js":"53","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/sampleCollection/sampleCollection.js":"54","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/cart/cart.js":"55","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/order/order.js":"56","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/index.js":"57","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Spinner.js":"58","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/DefaultContent.js":"59","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/DefaultFooter.js":"60","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/DefaultHeader.js":"61","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/subscription.js":"62","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/verification.js":"63","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Notifications/Alert.js":"64","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Notifications/Errors.js":"65","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/common.js":"66","/home/dbws/db/health-kangaroo-backend/client/Customer/src/constants/index.js":"67","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/CustomerRoutes.js":"68","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/notifications.js":"69","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/Notification.js":"70","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/cart/cart.js":"71","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/BreadCrumb/BreadCrumbRouter.js":"72","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/footer.js":"73","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Searches/LabTestSearch.js":"74","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Searches/CitySearch.js":"75","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/BreadCrumb/Item.js":"76","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/BreadCrumb/ItemContainer.js":"77","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/SuccessPage.js":"78","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/Reviews.js":"79","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/SavedCards.js":"80","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Billing/ChangeLabList.js":"81","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/index.js":"82","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/index.js":"83","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/index.js":"84","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/HealthRecord/index.js":"85","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/index.js":"86","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/city_search.js":"87","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/lab_search.js":"88","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/lt_categories.js":"89","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/validation.js":"90","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Cart.js":"91","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/SampleCollection/SampleCollection.js":"92","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/Register.js":"93","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/Login.js":"94","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/TransactionHistory.js":"95","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/Balance.js":"96","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/AddMoney.js":"97","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/Failed.js":"98","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Rating.js":"99","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/Prescription.js":"100","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/Success.js":"101","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/Payment.js":"102","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/profile.js":"103","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/LabsList.js":"104","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/labs.js":"105","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/wallet.js":"106","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/index.js":"107","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/Upload.js":"108","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/HealthRecord/Details.js":"109","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/locality.js":"110","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/index.js":"111","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/index.js":"112","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LT_Categories/index.js":"113","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/index.js":"114","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Tests/index.js":"115","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Packages/index.js":"116","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/index.js":"117","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Category/index.js":"118","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Profile/index.js":"119","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Pages/index.js":"120","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LabTests/index.js":"121","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/VerifyOTP.js":"122","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/ApplyCoupon.js":"123","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/UpdateEmail.js":"124","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/TestPackageList.js":"125","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/List.js":"126","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/Edit.js":"127","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LT_Categories/Categories.js":"128","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/Add.js":"129","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/List.js":"130","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/Details.js":"131","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Packages/List.js":"132","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Tests/Details.js":"133","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/firebase.js":"134","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Packages/Details.js":"135","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/misc.js":"136","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Category/List.js":"137","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/Edit.js":"138","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/CartRegister.js":"139","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Profile/PageView.js":"140","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/sampleCollection/sampleCollection.js":"141","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/CartLogin.js":"142","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/order/order.js":"143","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/collectionCenters.js":"144","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/prescription.js":"145","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Billing/BillingDetails.js":"146","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LabTests/PageView.js":"147","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/CollectionCenter/CollectionCenters.js":"148","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/List.js":"149","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/Details.js":"150","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/List.js":"151","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/health_record.js":"152","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderCard.js":"153","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/Add.js":"154","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderReview.js":"155","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/List.js":"156","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/Details.js":"157","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/AddressCard.js":"158","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/ViewMap.js":"159","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LT_Categories/LoadCategory.js":"160","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/HabitCardComponent.js":"161","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/HtmlParser.js":"162","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/page.js":"163","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/index.js":"164","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/index.js":"165","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/index.js":"166","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/CollectionCenter/CollectionCenterCard.js":"167","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/FamilyCard.js":"168","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/Filters.js":"169","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderDetails.js":"170","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/LabCardComponent.js":"171","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/address.js":"172","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/packages.js":"173","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/LabList.js":"174","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/tests.js":"175","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/habits.js":"176","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/category.js":"177","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/family.js":"178","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/List.js":"179","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/CropImg.js":"180","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/Edit.js":"181","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/Add.js":"182","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/lab-tests.js":"183","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/order.js":"184","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/Rating.js":"185","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/Price.js":"186","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/Locality.js":"187","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/List.js":"188","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/Edit.js":"189","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/Add.js":"190","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/FamilyCard.js":"191","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/SearchBox.js":"192","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/AddressCard.js":"193","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/ViewMap.js":"194","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/ServingLabs.js":"195","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/GMaps.js":"196","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/Details.js":"197","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/List.js":"198","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/HealthRecord/List.js":"199","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/AdsCard.js":"200","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/CategoriesCard.js":"201","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/ArticleCard.js":"202","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/articleCategories.js":"203","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/article.js":"204","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderTrack.js":"205","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/offers.js":"206","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Offers/index.js":"207","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/offers.js":"208","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/plugins/validateUtility.js":"209"},{"size":671,"mtime":1613649116885,"results":"210","hashOfConfig":"211"},{"size":1398,"mtime":1613649116885,"results":"212","hashOfConfig":"211"},{"size":876,"mtime":1613649116849,"results":"213","hashOfConfig":"211"},{"size":210,"mtime":1613649116889,"results":"214","hashOfConfig":"211"},{"size":240,"mtime":1613649116889,"results":"215","hashOfConfig":"211"},{"size":696,"mtime":1613649116889,"results":"216","hashOfConfig":"211"},{"size":13954,"mtime":1613649116849,"results":"217","hashOfConfig":"211"},{"size":2055,"mtime":1613649116897,"results":"218","hashOfConfig":"211"},{"size":960,"mtime":1616479312141,"results":"219","hashOfConfig":"211"},{"size":1066,"mtime":1616479666752,"results":"220","hashOfConfig":"211"},{"size":216,"mtime":1613649116849,"results":"221","hashOfConfig":"211"},{"size":520,"mtime":1616061773952,"results":"222","hashOfConfig":"211"},{"size":16917,"mtime":1616137982760,"results":"223","hashOfConfig":"211"},{"size":2230,"mtime":1616137982768,"results":"224","hashOfConfig":"211"},{"size":1128,"mtime":1613649116893,"results":"225","hashOfConfig":"211"},{"size":334,"mtime":1613649116897,"results":"226","hashOfConfig":"211"},{"size":3144,"mtime":1613649116889,"results":"227","hashOfConfig":"211"},{"size":4329,"mtime":1613649116889,"results":"228","hashOfConfig":"211"},{"size":3482,"mtime":1613649116889,"results":"229","hashOfConfig":"211"},{"size":6831,"mtime":1613649116889,"results":"230","hashOfConfig":"211"},{"size":797,"mtime":1613649116885,"results":"231","hashOfConfig":"211"},{"size":327,"mtime":1616059491389,"results":"232","hashOfConfig":"211"},{"size":3019,"mtime":1613649116885,"results":"233","hashOfConfig":"211"},{"size":378,"mtime":1613649116885,"results":"234","hashOfConfig":"211"},{"size":741,"mtime":1613649116885,"results":"235","hashOfConfig":"211"},{"size":725,"mtime":1613649116885,"results":"236","hashOfConfig":"211"},{"size":1756,"mtime":1613649116885,"results":"237","hashOfConfig":"211"},{"size":1224,"mtime":1613649116885,"results":"238","hashOfConfig":"211"},{"size":1333,"mtime":1613649116885,"results":"239","hashOfConfig":"211"},{"size":859,"mtime":1613649116885,"results":"240","hashOfConfig":"211"},{"size":330,"mtime":1613649116885,"results":"241","hashOfConfig":"211"},{"size":879,"mtime":1613649116885,"results":"242","hashOfConfig":"211"},{"size":1513,"mtime":1613649116885,"results":"243","hashOfConfig":"211"},{"size":942,"mtime":1613649116885,"results":"244","hashOfConfig":"211"},{"size":2037,"mtime":1613649116885,"results":"245","hashOfConfig":"211"},{"size":984,"mtime":1613649116885,"results":"246","hashOfConfig":"211"},{"size":1749,"mtime":1613649116885,"results":"247","hashOfConfig":"211"},{"size":1955,"mtime":1613649116885,"results":"248","hashOfConfig":"211"},{"size":1784,"mtime":1613649116885,"results":"249","hashOfConfig":"211"},{"size":1776,"mtime":1613649116885,"results":"250","hashOfConfig":"211"},{"size":3259,"mtime":1613649116885,"results":"251","hashOfConfig":"211"},{"size":3861,"mtime":1616137982768,"results":"252","hashOfConfig":"211"},{"size":1580,"mtime":1613649116885,"results":"253","hashOfConfig":"211"},{"size":3215,"mtime":1613649116885,"results":"254","hashOfConfig":"211"},{"size":3461,"mtime":1613649116885,"results":"255","hashOfConfig":"211"},{"size":2157,"mtime":1614756748132,"results":"256","hashOfConfig":"211"},{"size":1430,"mtime":1613649116885,"results":"257","hashOfConfig":"211"},{"size":2086,"mtime":1613649116885,"results":"258","hashOfConfig":"211"},{"size":1917,"mtime":1613649116885,"results":"259","hashOfConfig":"211"},{"size":1573,"mtime":1613649116885,"results":"260","hashOfConfig":"211"},{"size":3282,"mtime":1613649116885,"results":"261","hashOfConfig":"211"},{"size":1933,"mtime":1613649116885,"results":"262","hashOfConfig":"211"},{"size":2336,"mtime":1613649116885,"results":"263","hashOfConfig":"211"},{"size":857,"mtime":1613649116885,"results":"264","hashOfConfig":"211"},{"size":2377,"mtime":1613649116885,"results":"265","hashOfConfig":"211"},{"size":1326,"mtime":1614754917885,"results":"266","hashOfConfig":"211"},{"size":5738,"mtime":1616051387831,"results":"267","hashOfConfig":"211"},{"size":284,"mtime":1613649116897,"results":"268","hashOfConfig":"211"},{"size":1542,"mtime":1613649116893,"results":"269","hashOfConfig":"211"},{"size":5282,"mtime":1613649116893,"results":"270","hashOfConfig":"211"},{"size":20064,"mtime":1616749356177,"results":"271","hashOfConfig":"211"},{"size":2909,"mtime":1613649116849,"results":"272","hashOfConfig":"211"},{"size":1656,"mtime":1613649116849,"results":"273","hashOfConfig":"211"},{"size":526,"mtime":1613649116897,"results":"274","hashOfConfig":"211"},{"size":660,"mtime":1613649116897,"results":"275","hashOfConfig":"211"},{"size":3099,"mtime":1613649116849,"results":"276","hashOfConfig":"211"},{"size":1104,"mtime":1614593498925,"results":"277","hashOfConfig":"211"},{"size":6480,"mtime":1616479330000,"results":"278","hashOfConfig":"211"},{"size":2769,"mtime":1613649116849,"results":"279","hashOfConfig":"211"},{"size":6510,"mtime":1616137982768,"results":"280","hashOfConfig":"211"},{"size":18386,"mtime":1614060003330,"results":"281","hashOfConfig":"211"},{"size":2260,"mtime":1613649116893,"results":"282","hashOfConfig":"211"},{"size":1409,"mtime":1613649116849,"results":"283","hashOfConfig":"211"},{"size":8962,"mtime":1616137982772,"results":"284","hashOfConfig":"211"},{"size":8564,"mtime":1613649116893,"results":"285","hashOfConfig":"211"},{"size":694,"mtime":1613649116893,"results":"286","hashOfConfig":"211"},{"size":595,"mtime":1613649116893,"results":"287","hashOfConfig":"211"},{"size":1713,"mtime":1613649116893,"results":"288","hashOfConfig":"211"},{"size":7142,"mtime":1614081144880,"results":"289","hashOfConfig":"211"},{"size":9095,"mtime":1613649116893,"results":"290","hashOfConfig":"211"},{"size":16354,"mtime":1617346708961,"results":"291","hashOfConfig":"211"},{"size":135,"mtime":1613649116893,"results":"292","hashOfConfig":"211"},{"size":758,"mtime":1613649116897,"results":"293","hashOfConfig":"211"},{"size":180,"mtime":1613649116893,"results":"294","hashOfConfig":"211"},{"size":137,"mtime":1613649116893,"results":"295","hashOfConfig":"211"},{"size":119,"mtime":1613649116889,"results":"296","hashOfConfig":"211"},{"size":2244,"mtime":1613649116849,"results":"297","hashOfConfig":"211"},{"size":1626,"mtime":1613649116849,"results":"298","hashOfConfig":"211"},{"size":2609,"mtime":1613649116849,"results":"299","hashOfConfig":"211"},{"size":2689,"mtime":1613649116889,"results":"300","hashOfConfig":"211"},{"size":20115,"mtime":1615200564908,"results":"301","hashOfConfig":"211"},{"size":19897,"mtime":1616137982772,"results":"302","hashOfConfig":"211"},{"size":10328,"mtime":1617259629139,"results":"303","hashOfConfig":"211"},{"size":8880,"mtime":1616137982768,"results":"304","hashOfConfig":"211"},{"size":5391,"mtime":1617346708965,"results":"305","hashOfConfig":"211"},{"size":1263,"mtime":1613649116893,"results":"306","hashOfConfig":"211"},{"size":3397,"mtime":1617343902484,"results":"307","hashOfConfig":"211"},{"size":2001,"mtime":1613649116893,"results":"308","hashOfConfig":"211"},{"size":1362,"mtime":1613649116889,"results":"309","hashOfConfig":"211"},{"size":8236,"mtime":1617189338128,"results":"310","hashOfConfig":"211"},{"size":4682,"mtime":1613649116893,"results":"311","hashOfConfig":"211"},{"size":4554,"mtime":1616137982768,"results":"312","hashOfConfig":"211"},{"size":5558,"mtime":1613649116849,"results":"313","hashOfConfig":"211"},{"size":15822,"mtime":1617346708961,"results":"314","hashOfConfig":"211"},{"size":6966,"mtime":1613649116849,"results":"315","hashOfConfig":"211"},{"size":7529,"mtime":1613649116849,"results":"316","hashOfConfig":"211"},{"size":162,"mtime":1613649116893,"results":"317","hashOfConfig":"211"},{"size":16802,"mtime":1614248848167,"results":"318","hashOfConfig":"211"},{"size":7809,"mtime":1617346708961,"results":"319","hashOfConfig":"211"},{"size":2068,"mtime":1613649116849,"results":"320","hashOfConfig":"211"},{"size":159,"mtime":1613649116893,"results":"321","hashOfConfig":"211"},{"size":148,"mtime":1613649116893,"results":"322","hashOfConfig":"211"},{"size":66,"mtime":1613649116893,"results":"323","hashOfConfig":"211"},{"size":154,"mtime":1613649116889,"results":"324","hashOfConfig":"211"},{"size":65,"mtime":1613649116893,"results":"325","hashOfConfig":"211"},{"size":108,"mtime":1613649116893,"results":"326","hashOfConfig":"211"},{"size":112,"mtime":1613649116893,"results":"327","hashOfConfig":"211"},{"size":48,"mtime":1613649116889,"results":"328","hashOfConfig":"211"},{"size":57,"mtime":1613649116893,"results":"329","hashOfConfig":"211"},{"size":5154,"mtime":1613649116893,"results":"330","hashOfConfig":"211"},{"size":60,"mtime":1613649116893,"results":"331","hashOfConfig":"211"},{"size":3363,"mtime":1616137982768,"results":"332","hashOfConfig":"211"},{"size":5749,"mtime":1615885234990,"results":"333","hashOfConfig":"211"},{"size":1972,"mtime":1613649116889,"results":"334","hashOfConfig":"211"},{"size":7900,"mtime":1614345475397,"results":"335","hashOfConfig":"211"},{"size":6209,"mtime":1614080891856,"results":"336","hashOfConfig":"211"},{"size":15184,"mtime":1614060003334,"results":"337","hashOfConfig":"211"},{"size":2713,"mtime":1613649116893,"results":"338","hashOfConfig":"211"},{"size":13138,"mtime":1614060003334,"results":"339","hashOfConfig":"211"},{"size":3494,"mtime":1614081074764,"results":"340","hashOfConfig":"211"},{"size":13758,"mtime":1614582969440,"results":"341","hashOfConfig":"211"},{"size":11983,"mtime":1614235708114,"results":"342","hashOfConfig":"211"},{"size":16276,"mtime":1616137982772,"results":"343","hashOfConfig":"211"},{"size":720,"mtime":1613649116889,"results":"344","hashOfConfig":"211"},{"size":19032,"mtime":1616137982768,"results":"345","hashOfConfig":"211"},{"size":1534,"mtime":1613649116849,"results":"346","hashOfConfig":"211"},{"size":10597,"mtime":1614321445263,"results":"347","hashOfConfig":"211"},{"size":10535,"mtime":1616749356177,"results":"348","hashOfConfig":"211"},{"size":7445,"mtime":1614060003334,"results":"349","hashOfConfig":"211"},{"size":19621,"mtime":1617104820205,"results":"350","hashOfConfig":"211"},{"size":2739,"mtime":1613649116849,"results":"351","hashOfConfig":"211"},{"size":6614,"mtime":1614060003334,"results":"352","hashOfConfig":"211"},{"size":6162,"mtime":1613649116849,"results":"353","hashOfConfig":"211"},{"size":4346,"mtime":1613649116849,"results":"354","hashOfConfig":"211"},{"size":7287,"mtime":1613649116849,"results":"355","hashOfConfig":"211"},{"size":14125,"mtime":1616137982768,"results":"356","hashOfConfig":"211"},{"size":29939,"mtime":1614582941456,"results":"357","hashOfConfig":"211"},{"size":5949,"mtime":1614080976644,"results":"358","hashOfConfig":"211"},{"size":5636,"mtime":1614081023908,"results":"359","hashOfConfig":"211"},{"size":8167,"mtime":1616142427771,"results":"360","hashOfConfig":"211"},{"size":7918,"mtime":1617346708961,"results":"361","hashOfConfig":"211"},{"size":5328,"mtime":1613649116849,"results":"362","hashOfConfig":"211"},{"size":3401,"mtime":1616585593269,"results":"363","hashOfConfig":"211"},{"size":8805,"mtime":1616749356177,"results":"364","hashOfConfig":"211"},{"size":7055,"mtime":1613649116893,"results":"365","hashOfConfig":"211"},{"size":3019,"mtime":1614345611494,"results":"366","hashOfConfig":"211"},{"size":28924,"mtime":1614582961928,"results":"367","hashOfConfig":"211"},{"size":3340,"mtime":1613649116889,"results":"368","hashOfConfig":"211"},{"size":4738,"mtime":1613649116889,"results":"369","hashOfConfig":"211"},{"size":2919,"mtime":1613649116893,"results":"370","hashOfConfig":"211"},{"size":1851,"mtime":1614245873370,"results":"371","hashOfConfig":"211"},{"size":340,"mtime":1613649116889,"results":"372","hashOfConfig":"211"},{"size":2221,"mtime":1613649116849,"results":"373","hashOfConfig":"211"},{"size":154,"mtime":1613649116889,"results":"374","hashOfConfig":"211"},{"size":148,"mtime":1613649116889,"results":"375","hashOfConfig":"211"},{"size":173,"mtime":1613649116889,"results":"376","hashOfConfig":"211"},{"size":3213,"mtime":1614060003334,"results":"377","hashOfConfig":"211"},{"size":2454,"mtime":1613649116893,"results":"378","hashOfConfig":"211"},{"size":7062,"mtime":1617253152561,"results":"379","hashOfConfig":"211"},{"size":12437,"mtime":1617613334925,"results":"380","hashOfConfig":"211"},{"size":6105,"mtime":1613649116893,"results":"381","hashOfConfig":"211"},{"size":10254,"mtime":1613649116849,"results":"382","hashOfConfig":"211"},{"size":2802,"mtime":1613649116849,"results":"383","hashOfConfig":"211"},{"size":7576,"mtime":1616137982768,"results":"384","hashOfConfig":"211"},{"size":2706,"mtime":1613649116849,"results":"385","hashOfConfig":"211"},{"size":2592,"mtime":1613649116849,"results":"386","hashOfConfig":"211"},{"size":1839,"mtime":1613649116849,"results":"387","hashOfConfig":"211"},{"size":10203,"mtime":1613649116849,"results":"388","hashOfConfig":"211"},{"size":6366,"mtime":1616137982768,"results":"389","hashOfConfig":"211"},{"size":2388,"mtime":1613649116889,"results":"390","hashOfConfig":"211"},{"size":10438,"mtime":1616137982768,"results":"391","hashOfConfig":"211"},{"size":9136,"mtime":1614070136045,"results":"392","hashOfConfig":"211"},{"size":1567,"mtime":1613649116849,"results":"393","hashOfConfig":"211"},{"size":3995,"mtime":1616137982760,"results":"394","hashOfConfig":"211"},{"size":2628,"mtime":1613649116889,"results":"395","hashOfConfig":"211"},{"size":2792,"mtime":1613649116889,"results":"396","hashOfConfig":"211"},{"size":7285,"mtime":1613649116889,"results":"397","hashOfConfig":"211"},{"size":7490,"mtime":1614080952588,"results":"398","hashOfConfig":"211"},{"size":17182,"mtime":1614060003334,"results":"399","hashOfConfig":"211"},{"size":14939,"mtime":1614070195522,"results":"400","hashOfConfig":"211"},{"size":4214,"mtime":1616137982768,"results":"401","hashOfConfig":"211"},{"size":5053,"mtime":1613649116889,"results":"402","hashOfConfig":"211"},{"size":3840,"mtime":1614060003334,"results":"403","hashOfConfig":"211"},{"size":4738,"mtime":1613649116889,"results":"404","hashOfConfig":"211"},{"size":15006,"mtime":1617346708961,"results":"405","hashOfConfig":"211"},{"size":6041,"mtime":1613649116889,"results":"406","hashOfConfig":"211"},{"size":5373,"mtime":1613649116889,"results":"407","hashOfConfig":"211"},{"size":2981,"mtime":1613649116889,"results":"408","hashOfConfig":"211"},{"size":6153,"mtime":1617614578280,"results":"409","hashOfConfig":"211"},{"size":736,"mtime":1613649116889,"results":"410","hashOfConfig":"211"},{"size":5628,"mtime":1613649116889,"results":"411","hashOfConfig":"211"},{"size":1942,"mtime":1613649116889,"results":"412","hashOfConfig":"211"},{"size":2438,"mtime":1613649116849,"results":"413","hashOfConfig":"211"},{"size":3515,"mtime":1613649116849,"results":"414","hashOfConfig":"211"},{"size":2069,"mtime":1614757832785,"results":"415","hashOfConfig":"211"},{"size":1244,"mtime":1616137982768,"results":"416","hashOfConfig":"211"},{"size":4742,"mtime":1616749430111,"results":"417","hashOfConfig":"211"},{"size":1563,"mtime":1616137982760,"results":"418","hashOfConfig":"211"},{"size":8872,"mtime":1616749356193,"results":"419","hashOfConfig":"211"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},"oxnt0n",{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"422"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"422"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"422"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"422"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"422"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"422"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"422"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"422"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"422"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"422"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"422"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"422"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"422"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"422"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"422"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"422"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"422"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"422"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"422"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"422"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"422"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"422"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"422"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"422"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"422"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"422"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"422"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"422"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"422"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"422"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"422"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"422"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"422"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"422"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"422"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"422"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"422"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"422"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"422"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"422"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"422"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"422"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"422"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"422"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"422"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"422"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"422"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"422"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"422"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"422"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"422"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"620","usedDeprecatedRules":"422"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"623","usedDeprecatedRules":"422"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"422"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"422"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"422"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"422"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"422"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663","usedDeprecatedRules":"422"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"422"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"422"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672","usedDeprecatedRules":"422"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675","usedDeprecatedRules":"422"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"422"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"422"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"422"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"422"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"422"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"422"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"422"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"422"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"422"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"737","usedDeprecatedRules":"422"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740","usedDeprecatedRules":"422"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"422"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"422"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"422"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"422"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757","usedDeprecatedRules":"422"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760","usedDeprecatedRules":"422"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"763","usedDeprecatedRules":"422"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"422"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"769","usedDeprecatedRules":"422"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"774","usedDeprecatedRules":"422"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779","usedDeprecatedRules":"422"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"782","usedDeprecatedRules":"422"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"422"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"422"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"791"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794","usedDeprecatedRules":"422"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"422"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"422"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"422"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"422"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"422"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"422"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"823","usedDeprecatedRules":"422"},{"filePath":"824","messages":"825","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"826","usedDeprecatedRules":"422"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"829","usedDeprecatedRules":"422"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"422"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"835","usedDeprecatedRules":"422"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840","usedDeprecatedRules":"422"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"843","usedDeprecatedRules":"422"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"846","usedDeprecatedRules":"422"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"859","usedDeprecatedRules":"422"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"866","usedDeprecatedRules":"422"},{"filePath":"867","messages":"868","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"869","usedDeprecatedRules":"422"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"872","usedDeprecatedRules":"422"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875","usedDeprecatedRules":"422"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878","usedDeprecatedRules":"422"},{"filePath":"879","messages":"880","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"887","usedDeprecatedRules":"422"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"890","usedDeprecatedRules":"422"},{"filePath":"891","messages":"892","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"893","usedDeprecatedRules":"422"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"896","usedDeprecatedRules":"422"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"899","usedDeprecatedRules":"422"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"906","usedDeprecatedRules":"422"},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"911","usedDeprecatedRules":"422"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"914","usedDeprecatedRules":"422"},{"filePath":"915","messages":"916","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"917","usedDeprecatedRules":"422"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"920","usedDeprecatedRules":"422"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"923","usedDeprecatedRules":"422"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"926","usedDeprecatedRules":"422"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929","usedDeprecatedRules":"422"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"932","usedDeprecatedRules":"422"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935","usedDeprecatedRules":"422"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"938","usedDeprecatedRules":"422"},{"filePath":"939","messages":"940","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"941","usedDeprecatedRules":"422"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"944","usedDeprecatedRules":"422"},{"filePath":"945","messages":"946","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"947","usedDeprecatedRules":"422"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"950","usedDeprecatedRules":"422"},{"filePath":"951","messages":"952","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"953","usedDeprecatedRules":"422"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"422"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"965","usedDeprecatedRules":"422"},{"filePath":"966","messages":"967","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968","usedDeprecatedRules":"422"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"973","usedDeprecatedRules":"422"},"/home/dbws/db/health-kangaroo-backend/client/Customer/src/index.js",[],["974","975"],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/polyfill.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/App.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/setHeaders.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/setAuthToken.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/store.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/auth.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/Routes.js",["976"],"import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\n// import HomePage from \"views/Front\";\nimport ForgotPassword from \"views/Auth/ForgotPassword/ForgotPassword\";\nimport ResetPassword from \"views/Auth/ForgotPassword/ResetPassword\";\nimport VerifyEmail from \"views/Auth/VerifyEmail\";\nimport VerifySubscription from \"views/Auth/VerifySubscription\";\nimport NotFoundPage from \"views/NotFound\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport PublicRoute from \"./PublicRoute\";\nimport UnderConstruction from \"views/Customer/UnderConstruction\";\n\nconst CustomerPanel = React.lazy(() => import('views/Customer/Layout'));\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\nconst Routes = () => {\n  return (\n    <React.Suspense fallback={loading}>\n      <Switch>\n        <PublicRoute\n          exact\n          path=\"/forgotPassword\"\n          restricted={true}\n          component={ForgotPassword}\n        />\n        <PublicRoute\n          exact\n          path=\"/under-construction\"\n          component={UnderConstruction}\n        />\n        <PublicRoute\n          exact\n          path=\"/resetPassword/:token\"\n          restricted={true}\n          component={ResetPassword}\n        />\n        <PublicRoute\n          exact\n          path=\"/verify/email/:token\"\n          restricted={true}\n          component={VerifyEmail}\n        />\n        <PublicRoute\n          exact\n          path=\"/subscription/:token\"\n          restricted={true}\n          component={VerifySubscription}\n        />\n        <PublicRoute\n          exact\n          path=\"/page*\"\n          component={CustomerPanel}\n        />\n        <PublicRoute\n          exact\n          path=\"/*\"\n          component={CustomerPanel}\n          underConstruction ={ [\"/lab-reports\", \"/payments\", \"/reminders\"] }\n        />\n        {/* <PrivateRoute path=\"/customer*\" component={CustomerPanel} /> */}\n        <Route component={NotFoundPage} />\n      </Switch>\n    </React.Suspense>\n  );\n};\n\nexport default Routes;\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/PrivateRoute.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/PublicRoute.js",["977"],"import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"views/Spinner\";\nimport UnderConstruction from \"views/Customer/UnderConstruction\";\n\nconst PublicRoute = ({\n  component: Component,\n  auth: { isAuthenticated, loading, user },\n  restricted,\n  underConstruction = [],\n  ...rest\n}) => {\n  return (\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    \n    <Route\n      {...rest}\n      render={props => {\n        const pathname = props.location.pathname;\n        if(pathname == \"/\") return <Redirect to =\"/lab-tests\" />;\n        const notDeveloped = underConstruction.includes(pathname);\n        return !loading ? ( notDeveloped ? <UnderConstruction />: <Component {...props} />): <Spinner />;\n      }}\n    />\n  );\n};\n\nPublicRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/errors.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/alert.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/types.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/UnderConstruction.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/NotFound.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/VerifySubscription.js",["978"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAlert } from \"actions/alert\";\nimport {\n  verifySubscription,\n} from \"actions/subscription\";\nimport Spinner from \"views/Spinner\";\n\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Row,\n  CardText\n} from \"reactstrap\";\n\nconst VerifySubscription = ({\n  verifySubscription,\n  match,\n  loading,\n}) => {\n  const [successful, setSuccessful] = useState(false);\n  const [invalidToken, setInvalidToken] = useState(false);\n\n  // useMemo(() => {\n  //   verifySubscription(match.params.token).then(data => {\n  //     if(!data || !data.status) return setInvalidToken(true);\n  //     return setSuccessful(true);\n  //   });\n  // }, [verifySubscription, match.params.token]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && match.params.token)\n          verifySubscription(match.params.token).then(data => {\n            if(!data || !data.status) return setInvalidToken(true);\n            return setSuccessful(true);\n          });\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [verifySubscription, match.params.token]);\n\n  return (\n    <div className=\"app flex-row align-items-center\">\n      <Container>\n      {\n          loading?<Spinner/>:(\n          <Row className=\"justify-content-center\">\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\n              <Card className=\"mx-4\" color={successful?\"success\":invalidToken?\"danger\":\"white\"}>\n                <CardBody className=\"p-4\">\n                  {\n                    successful?(\n                      <CardText>\n                        <span>Email has been verified successfully. Click here to </span>\n                        <Link to=\"/\" title=\"home\" className=\"text-dark text-underline\">\n                          Home\n                        </Link>\n                      </CardText>\n                    ):(\n                      invalidToken ?(\n                        <CardText>\n                          <span>Activation link has been expired/ invalidated. Go back to </span>\n                          <Link to=\"/\" title=\"home\" className=\"text-dark text-underline\">\n                            Home\n                          </Link>\n                        </CardText>\n                      ):(<CardText></CardText>)\n                    )\n                  }\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        )      \n      }\n      </Container>\n    </div>\n  );\n};\n\nVerifySubscription.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  verifySubscription: PropTypes.func.isRequired,\n  errorList: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  errorList: state.errors,\n  loading: state.subscription.loadingEmailVerification,\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  verifySubscription,\n})(withRouter(VerifySubscription));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/VerifyEmail.js",["979","980","981","982","983"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { Link, withRouter, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAlert } from \"actions/alert\";\nimport {\n  verifyEmail,\n  loginRedirect\n} from \"actions/verification\";\nimport Spinner from \"views/Spinner\";\nimport { FaTimesCircle, FaCheckCircle } from \"react-icons/fa\";\n\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Row,\n  CardText\n} from \"reactstrap\";\nimport { Img } from \"react-image\";\n\nconst VerifyEmail = ({\n  verifyEmail,\n  loginRedirect,\n  authentication,\n  history,\n  match,\n  loading,\n}) => {\n  const [successful, setSuccessful] = useState(false);\n  const [invalidToken, setInvalidToken] = useState(false);\n  const [redirectTo, setRedirectTo] = useState(null);\n\n  // useMemo(() => {\n  //   if(authentication) return loginRedirect();\n  //   verifyEmail(match.params.token).then(data => {\n  //     if(!data || !data.status) return setInvalidToken(true);\n  //     setSuccessful(true);\n  //   });\n  // }, [verifyEmail, match.params.token, history, authentication]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && authentication) {\n          return loginRedirect();\n        }\n        if (subscribe && match.params.token)\n         verifyEmail(match.params.token).then(data => {\n           if(!data || !data.status) return setInvalidToken(true);\n           setSuccessful(true);\n           setRedirectTo(data.response.redirectTo);\n         });\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [verifyEmail, match.params.token, history, authentication]);\n\n  return (\n    <div className=\"app flex-row align-items-center\">\n      <Container>\n      {\n          loading?<Spinner/>:(\n          <Row className=\"justify-content-center pt-4\">\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\n              <Card className=\"mx-4\">\n                <CardBody className=\"p-4 text-center\">\n                  {\n                    successful?(\n                      <>\n                        <div className=\"mt-5 mb-5 ml-auto mr-auto\">\n                          <FaCheckCircle size={48} color=\"#1cad1c\"/>\n                        </div>\n                        <CardText className=\"text-success fs-16\">\n                          <span>Email has been verified successfully. Click here to </span>\n                          <a \n                            href={redirectTo} \n                            title=\"login\" \n                            target=\"_blank\"\n                            className=\"text-dark text-underline\" \n                            style={{ \"textDecoration\": \"underline\" }}\n                          >Login</a>\n                        </CardText>\n                      </>\n                    ):(\n                      invalidToken ?(\n                        <>\n                          <div className=\"mt-5 mb-5 ml-auto mr-auto\">\n                            <FaTimesCircle size={48} color=\"#df4131\"/>\n                          </div>\n                          <CardText className=\"text-danger fs-16\">\n                            <span>Activation link has been expired/ invalidated. Go back to </span>\n                            <Link to=\"/\" title=\"home\" className=\"text-dark text-underline\" style={{ \"textDecoration\": \"underline\" }}>\n                              Home\n                            </Link>\n                          </CardText>\n                        </>\n                      ):(<CardText></CardText>)\n                    )\n                  }\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        )      \n      }\n      </Container>\n    </div>\n  );\n};\n\nVerifyEmail.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  verifyEmail: PropTypes.func.isRequired,\n  loginRedirect: PropTypes.func.isRequired,\n  errorList: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  errorList: state.errors,\n  loading: state.verification.loadingEmailVerification,\n  authentication: state.auth.authentication\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  verifyEmail,\n  loginRedirect\n})(withRouter(VerifyEmail));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/ForgotPassword/ForgotPassword.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/ForgotPassword/ResetPassword.js",["984"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAlert } from \"actions/alert\";\nimport {\n  resetPassword,\n  setPasswordError,\n  getResetTokenStatus,\n  tokenInvalid,\n  loginRedirect\n} from \"actions/auth\";\nimport Errors from \"views/Notifications/Errors\";\nimport Alert from \"views/Notifications/Alert\";\nimport Spinner from \"views/Spinner\";\n\nimport PropTypes from \"prop-types\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Container,\n  Form,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Row,\n  CardText\n} from \"reactstrap\";\n\nconst ResetPassword = ({\n  setAlert,\n  setPasswordError,\n  resetPassword,\n  getResetTokenStatus,\n  tokenInvalid,\n  history,\n  errorList,\n  match,\n  loading,\n  loginRedirect\n}) => {\n  const [formData, setFormData] = useState({\n    password: \"\",\n    confirm_password: \"\",\n  });\n  const [successful, setSuccessful] = useState(false);\n\n  // useMemo(() => {\n  //   getResetTokenStatus(match.params.token).then(data => {\n  //     !data && tokenInvalid(history);\n  //   });\n  // }, [getResetTokenStatus, match.params.token, history, tokenInvalid]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && match.params.token)\n        getResetTokenStatus(match.params.token).then(data => {\n          !data && tokenInvalid(history);\n        });\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [getResetTokenStatus, match.params.token, history, tokenInvalid]);\n\n  const { password, confirm_password } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (password !== confirm_password) {\n      setPasswordError(\"Passwords do not match\", \"confirm_password\");\n      setAlert(\n        \"Errors! Please correct the following errors and submit again.\",\n        \"danger\"\n      );\n    } else {\n      resetPassword(password, match.params.token).then((res) => {\n        if (res && res.status === true) {\n          setSuccessful(true);\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"app flex-row align-items-center\">\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col md=\"9\" lg=\"7\" xl=\"6\">\n            <Card className=\"mx-4\">\n              <CardBody className=\"p-4\">\n                {\n                  successful ? (\n                    <CardText>\n                      <span>Password has been reset successfully. Click here to </span>\n                      <Link to=\"/login\" title=\"login\">\n                        Login\n                      </Link>\n                    </CardText>\n                  ) : (\n                      <Form onSubmit={e => onSubmit(e)}>\n                        <h1>Reset Password</h1>\n                        <Alert />\n                        <InputGroup className=\"mb-3\">\n                          <InputGroupAddon addonType=\"prepend\">\n                            <InputGroupText>\n                              <i className=\"icon-lock\"></i>\n                            </InputGroupText>\n                          </InputGroupAddon>\n                          <Input\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            autoComplete=\"password\"\n                            name=\"password\"\n                            minLength=\"8\"\n                            value={password}\n                            onChange={e => onChange(e)}\n                            invalid={errorList.password ? true : false}\n                          />\n                          <Errors current_key=\"password\" key=\"password\" />\n                        </InputGroup>\n                        <InputGroup className=\"mb-4\">\n                          <InputGroupAddon addonType=\"prepend\">\n                            <InputGroupText>\n                              <i className=\"icon-lock\"></i>\n                            </InputGroupText>\n                          </InputGroupAddon>\n                          <Input\n                            type=\"password\"\n                            placeholder=\"Confirm password\"\n                            autoComplete=\"confirm_password\"\n                            name=\"confirm_password\"\n                            minLength=\"8\"\n                            value={confirm_password}\n                            onChange={e => onChange(e)}\n                            invalid={errorList.confirm_password ? true : false}\n                          />\n                          <Errors\n                            current_key=\"confirm_password\"\n                            key=\"confirm_password\"\n                          />\n                        </InputGroup>\n                        <Row>\n                          {\n                            loading ? (<Spinner />) : (\n                              <>\n                                <Col xs=\"6\">\n                                  <Button color=\"primary\" className=\"px-6\">\n                                    Reset Password\n                          </Button>\n                                </Col>\n                                <Col xs=\"6\" className=\"text-right\">\n                                  <Button\n                                    color=\"link\"\n                                    className=\"px-0\"\n                                    onClick={e => loginRedirect(history)}\n                                  >\n                                    Have an account? Login\n                            </Button>\n                                </Col>\n                              </>\n                            )\n                          }\n                        </Row>\n                      </Form>\n                    )\n                }\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nResetPassword.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  setPasswordError: PropTypes.func.isRequired,\n  resetPassword: PropTypes.func.isRequired,\n  getResetTokenStatus: PropTypes.func.isRequired,\n  tokenInvalid: PropTypes.func.isRequired,\n  loginRedirect: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  errorList: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  errorList: state.errors,\n  loading: state.auth.loadingPasswordReset,\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  setPasswordError,\n  resetPassword,\n  getResetTokenStatus,\n  tokenInvalid,\n  loginRedirect\n})(withRouter(ResetPassword));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/certificateCategories.js",["985"],"import {\n  CERTIFICATE_CATEGORIES_ERROR,\n  CERTIFICATE_CATEGORIES_LIST_UPDATED,\n  LOADING_CERTIFICATE_CATEGORIES,\n} from \"actions/types\";\n\n\n\nconst initialState = {\n  certificateCategoriesList: [],\n  loadingCategoriesList: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case CERTIFICATE_CATEGORIES_LIST_UPDATED:\n      return {\n        ...state,\n        certificateCategoriesList: payload,\n        loadingCategoriesList: false,\n      }\n    case CERTIFICATE_CATEGORIES_ERROR:\n      return {\n        ...state,\n        loadingCategoriesList: false\n      }\n    case LOADING_CERTIFICATE_CATEGORIES:\n      return {\n        ...state,\n        loadingCategoriesList: true\n      }\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/alert.js",["986"],"import { SET_ALERT, REMOVE_ALERT } from 'actions/types';\n\nconst initialState = [];\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_ALERT:\n      return [payload];\n    case REMOVE_ALERT:\n      return (state = []);\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/auth.js",["987"],"import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  RESET_LINK_SUCCESS,\n  RESET_LINK_FAIL,\n  USER_LOADED,\n  AUTH_TOKEN_REFRESH,\n  AUTH_ERROR,\n  LOGOUT,\n  LOGIN_SUCCESS,\n  LOADING_ON_LOGIN_SUBMIT,\n  LOADING_ON_PASSWORD_RESET,\n  LOADING_ON_USER_LOADING,\n  LOGIN_FAIL,\n  LOAD_AUTH_PAGE,\n  CHECK_USER_COMPLETE,\n  LOADING_ON_CHECK_USER,\n  CHECK_FAIL,\n  // PENDING_ACTION_LOADED,\n} from \"actions/types\";\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  exists: false,\n  loading: true,\n  loadingCheckUser: false,\n  loadingPasswordReset: false,\n  user: null,\n  error: {},\n  actionPending: {}\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case LOAD_AUTH_PAGE:\n      return {\n        ...state,\n        loading: false\n      };\n    case CHECK_USER_COMPLETE:\n      return {\n        ...state,\n        ...payload,\n      };\n    case AUTH_TOKEN_REFRESH:\n      localStorage.setItem(\"token\", payload.token);\n      return {\n        ...state,\n        ...payload,\n      }\n    case USER_LOADED:\n      return {\n        ...state,\n        isAuthenticated: true,\n        loading: false,\n        user: payload\n      };\n    case RESET_LINK_SUCCESS:\n      return {\n        ...state,\n        loadingPasswordReset: false,\n      };\n    case REGISTER_SUCCESS:\n      localStorage.setItem(\"token\", payload.token);\n      return {\n        ...state,\n        token: payload.token,\n        ...payload.customer,\n        isAuthenticated: true,\n        loading: false\n      };\n    case LOGIN_SUCCESS:\n      localStorage.setItem(\"token\", payload.token);\n      return {\n        ...state,\n        ...payload,\n        isAuthenticated: true,\n        loading: false\n      };\n    case CHECK_FAIL:\n      return {\n        ...state,\n        error: payload,\n        loadingCheckUser: false,\n      };\n    case REGISTER_FAIL:\n    case RESET_LINK_FAIL:\n      return {\n        ...state,\n        error: payload,\n        loadingPasswordReset: false,\n      };\n    case AUTH_ERROR:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        error: payload,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        user: null\n      };\n    case LOGOUT:\n    case LOGIN_FAIL:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        user: null\n      };\n    case LOADING_ON_PASSWORD_RESET:\n      return {\n        ...state,\n        loadingPasswordReset: true,\n      }\n    case LOADING_ON_LOGIN_SUBMIT:\n      return {\n        ...state,\n        loading: true\n      }\n    case LOADING_ON_CHECK_USER:\n      return {\n        ...state,\n        loadingCheckUser: true,\n      }\n    case LOADING_ON_USER_LOADING:\n      return {\n        ...state,\n        loading: true,\n      }\n    // case PENDING_ACTION_LOADED:\n    //   return {\n    //     ...state,\n    //     actionPending: payload\n    //   }\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/errors.js",["988"],"import { SET_ERRORS_LIST, REMOVE_ERRORS } from 'actions/types';\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_ERRORS_LIST:\n      return {\n        ...state,\n        ...payload\n      };\n    case REMOVE_ERRORS:\n      return (state = {});\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/testCategories.js",["989"],"import {\n  TEST_CATEGORIES_ERROR,\n  TEST_CATEGORIES_LIST_UPDATED,\n  LOADING_TEST_CATEGORIES,\n} from \"actions/types\";\n\n\n\nconst initialState = {\n  testCategoriesList: [],\n  loadingCategoriesList: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case TEST_CATEGORIES_LIST_UPDATED:\n      return {\n        ...state,\n        testCategoriesList: payload,\n        loadingCategoriesList: false,\n      }\n    case TEST_CATEGORIES_ERROR:\n      return {\n        ...state,\n        loadingCategoriesList: false\n      }\n    case LOADING_TEST_CATEGORIES:\n      return {\n        ...state,\n        loadingCategoriesList: true\n      }\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/verification.js",["990"],"import {\n  VERIFICATION_LINK_SUCCESS,\n  VERIFICATION_LINK_FAIL,\n  LOADING_ON_EMAIL_VERIFICATION\n} from \"actions/types\";\n\nconst initialState = {\n  loadingEmailVerification: true,\n  error: {}\n};\n\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case VERIFICATION_LINK_SUCCESS:\n      return {\n        ...state,\n        loadingEmailVerification: false,\n      };\n    case VERIFICATION_LINK_FAIL:\n      return {\n        ...state,\n        error: payload,\n        loadingEmailVerification: false,\n      };\n    case LOADING_ON_EMAIL_VERIFICATION:\n      return {\n        ...state,\n        loadingEmailVerification: true,\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/city_search.js",["991"],"import {\n  CITY_ERROR,\n  CITY_UPDATED,\n  CITY_SEARCH_PARAMATERS_UPDATE,\n  CITY_LIST_UPDATED,\n  LOADING_ON_CITY_SUBMIT,\n  LOADING_ON_CITY_UPDATE,\n  LOADING_CITY_LIST_DATA,\n  RESET_CITY,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  cityList: {\n    data: [],\n    page: \"1\",\n    count: 0,\n  },\n  loadingListData: true,\n  currentCity: JSON.parse(localStorage.getItem(\"user_city\")),\n  loadingCity: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_CITY:\n      return {\n        ...initialState,\n        loadingListData: state.loadingListData,\n        loadingCity: state.loadingCity,\n      }\n    case CITY_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingListData: false,\n        loadingCity: false,\n      };\n    case CITY_UPDATED:\n      localStorage.setItem(\"user_city\", JSON.stringify(payload));\n      return {\n        ...state,\n        currentCity: payload,\n        loadingCity: false,\n      }\n    case CITY_LIST_UPDATED:\n      return {\n        ...state,\n        cityList: payload,\n        loadingListData: false,\n      };\n    case CITY_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_CITY_LIST_DATA:\n    case LOADING_ON_CITY_SUBMIT: \n      return {\n        ...state,\n        loadingListData: true\n      };  \n    case LOADING_ON_CITY_UPDATE: \n      return {\n        ...state,\n        loadingCity: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/lab_search.js",["992"],"import {\n  TEST_SEARCH_ERROR,\n  TEST_SEARCH_PARAMATERS_UPDATE,\n  TEST_SEARCH_LIST_UPDATED,\n  LOADING_ON_TEST_SEARCH_SUBMIT,\n  RESET_TEST_SEARCH,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  testList: [],\n  loadingListData: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_TEST_SEARCH:\n      return {\n        ...initialState,\n        loadingListData: state.loadingListData,\n      }\n    case TEST_SEARCH_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingListData: false,\n      };\n    case TEST_SEARCH_LIST_UPDATED:\n      return {\n        ...state,\n        testList: payload,\n        loadingListData: false,\n      };\n    case TEST_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_TEST_SEARCH_SUBMIT: \n      return {\n        ...state,\n        loadingListData: true\n      };  \n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/subscription.js",["993"],"import {\n    SUBSCRIPTION_LINK_SUCCESS,\n    SUBSCRIPTION_LINK_FAIL,\n    LOADING_ON_EMAIL_SUBSCRIPTION,\n    SUBSCRIPTION_CALL_SUCCESS,\n    SUBSCRIPTION_CALL_FAIL,\n    LOADING_ON_CALL_SUBSCRIPTION,\n  } from \"actions/types\";\n  \n  const initialState = {\n    loadingEmailVerification: true,\n    loadingCallSubscription: true,\n    error: {}\n  };\n  \n  \n  export default function(state = initialState, action) {\n    const { type, payload } = action;\n    switch (type) {\n      case SUBSCRIPTION_LINK_SUCCESS:\n        return {\n          ...state,\n          loadingEmailVerification: false,\n        };\n      case SUBSCRIPTION_LINK_FAIL:\n        return {\n          ...state,\n          error: payload,\n          loadingEmailVerification: false,\n        };\n      case LOADING_ON_EMAIL_SUBSCRIPTION:\n        return {\n          ...state,\n          loadingEmailVerification: true,\n        };\n      case SUBSCRIPTION_CALL_SUCCESS:\n        return {\n          ...state,\n          loadingCallSubscription: false,\n        };\n      case SUBSCRIPTION_CALL_FAIL:\n        return {\n          ...state,\n          error: payload,\n          loadingCallSubscription: false,\n        };\n      case LOADING_ON_CALL_SUBSCRIPTION:\n        return {\n          ...state,\n          loadingCallSubscription: true,\n        };\n      default:\n        return state;\n    }\n  }\n  ","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/misc.js",["994"],"import {\n  GET_TIME_SLOTS,\n  RESET_TIME_SLOTS,\n  TIME_SLOTS_ERROR,\n  LOADING_ON_TIME_SLOTS_SUBMIT,\n} from \"actions/types\";\n\nconst initialState = {\n  timeSlots: null,\n  loadingTimeSlots: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_TIME_SLOTS:\n      return {\n        ...initialState,\n        loadingTimeSlots: state.loadingTimeSlots,\n      };\n    case TIME_SLOTS_ERROR:\n      return {\n        ...initialState,\n        error: payload,\n        loadingTimeSlots: false,\n      };\n    case GET_TIME_SLOTS:\n      return {\n        ...state,\n        timeSlots: payload,\n        loadingTimeSlots: false,\n      };\n    case LOADING_ON_TIME_SLOTS_SUBMIT: \n      return {\n        ...state,\n        loadingTimeSlots: true\n      };  \n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/common.js",["995"],"import {\n  GET_BANNERS,\n} from \"actions/types\";\n\nconst initialState = {\n  banners: [],\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_BANNERS:\n      return {\n        ...state,\n        banners: payload,\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/page.js",["996"],"import {\n  CMS_ERROR,\n  GET_CMS_BY_SLUG,\n  LOADING_ON_CMS_SUBMIT,\n  LOAD_PAGE,\n  RESET_PAGE,\n} from \"actions/types\";\n\nconst initialState = {\n  currentCMS: null,\n  loadingCMS: true,\n  error: {},\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_PAGE:\n      return {\n        ...initialState,\n        loadingCMS: state.loadingCMS,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingCMS: false\n      };\n    case CMS_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingCMS: false,\n      };\n    case GET_CMS_BY_SLUG:\n      return {\n        ...state,\n        currentCMS: payload,\n        loadingCMS: false\n      };\n    case LOADING_ON_CMS_SUBMIT: \n      return {\n        ...state,\n        loadingCMS: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/profile.js",["997"],"import {\n  MOBILE_ERROR,\n  PROFILE_ERROR,\n  UPDATE_PROFILE,\n  UPDATE_MOBILE,\n  GET_PROFILE,\n  RESET_PROFILE,\n  LOAD_PAGE,\n  LOADING_ON_MOBILE_SUBMIT,\n  LOADING_ON_PROFILE_SUBMIT,\n} from \"actions/types\";\n\nconst initialState = {\n  currentProfile: null,\n  loadingProfile: true,\n  loadingMobile: true,\n  error: {},\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_PROFILE:\n      return {\n        ...initialState,\n        loadingProfile: state.loadingProfile,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingProfile: false,\n        loadingMobile: false,\n      };\n    case MOBILE_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingMobile: false,\n      };\n    case PROFILE_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingProfile: false,\n      };\n    case GET_PROFILE:\n      return {\n        ...state,\n        currentProfile: payload,\n        loadingProfile: false\n      };\n    case UPDATE_MOBILE:\n      return {\n        ...state,\n        loadingMobile: false,\n      };\n    case UPDATE_PROFILE:\n      return {\n        ...state,\n        loadingProfile: false,\n        currentProfile: payload,\n      }\n    case LOADING_ON_MOBILE_SUBMIT:\n      return {\n        ...state,\n        loadingMobile: true,\n      };\n    case LOADING_ON_PROFILE_SUBMIT: \n      return {\n        ...state,\n        loadingProfile: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/footer.js",["998"],"import {\n  FOOTER_ERROR,\n  GET_FOOTER_LIST,\n  LOADING_ON_FOOTER_SUBMIT,\n  LOAD_PAGE,\n  RESET_FOOTER,\n} from \"actions/types\";\n\nconst initialState = {\n  footerList: [],\n  loadingFooterList: true,\n  error: {},\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_FOOTER:\n      return {\n        ...initialState,\n        loadingFooterList: state.loadingFooterList,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingFooterList: false\n      };\n    case FOOTER_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingFooterList: false,\n      };\n    case GET_FOOTER_LIST:\n      return {\n        ...state,\n        footerList: payload,\n        loadingFooterList: false\n      };\n    case LOADING_ON_FOOTER_SUBMIT: \n      return {\n        ...state,\n        loadingFooterList: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/habits.js",["999"],"import {\n  HABIT_TEST_ERROR,\n  GET_HABIT_TEST_LIST,\n  HABIT_TEST_LIST_UPDATED,\n  HABIT_TEST_PARAMATERS_UPDATE,\n  LOADING_ON_HABIT_TEST_SUBMIT,\n  HABIT_DESCRIPTION_UPDATED,\n  RESET_HABIT_TEST,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  habitData: {},\n  testList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  loadingTests: true,\n  loadingTestsList: true,\n  loadingHabitData: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_HABIT_TEST:\n      return {\n        ...initialState,\n        loadingTestsList: state.loadingTestsList,\n        loadingHabitData: state.loadingHabitData\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingTests: false,\n      };\n    case HABIT_TEST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingTests: false,\n        loadingTestsList: false,\n        loadingHabitData: false\n      };\n    case GET_HABIT_TEST_LIST:\n      return {\n        ...state,// TODO\n        loadingTestsList: false\n      };\n    case HABIT_TEST_LIST_UPDATED:\n      return {\n        ...state,\n        testList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingTests: false,\n        loadingTestsList: false,\n      };\n    case HABIT_DESCRIPTION_UPDATED:\n      return {\n        ...state,\n        habitData: payload,\n        loadingHabitData: false,\n      };\n    case HABIT_TEST_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_HABIT_TEST_SUBMIT: \n      return {\n        ...state,\n        loadingTestsList: true,\n        loadingHabitData: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/lab-tests.js",["1000"],"import {\n  LAB_TESTS_ERROR,\n  GET_LAB_TESTS_LIST,\n  LOADING_ON_LAB_TESTS_SUBMIT,\n  LOAD_PAGE,\n  RESET_LAB_TESTS,\n} from \"actions/types\";\n\nconst initialState = {\n  labTestsList: [],\n  loadingLabTestsList: true,\n  error: {},\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_LAB_TESTS:\n      return {\n        ...initialState,\n        loadingLabTestsList: state.loadingLabTestsList,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingLabTestsList: false\n      };\n    case LAB_TESTS_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingLabTestsList: false,\n      };\n    case GET_LAB_TESTS_LIST:\n      return {\n        ...state,\n        labTestsList: payload,\n        loadingLabTestsList: false\n      };\n    case LOADING_ON_LAB_TESTS_SUBMIT: \n      return {\n        ...state,\n        loadingLabTestsList: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/category.js",["1001"],"import {\n  CATEGORY_TEST_ERROR,\n  GET_CATEGORY_TEST_LIST,\n  CATEGORY_TEST_LIST_UPDATED,\n  CATEGORY_TEST_PARAMATERS_UPDATE,\n  LOADING_ON_CATEGORY_TEST_SUBMIT,\n  RESET_CATEGORY_TEST,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  testList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  loadingTests: true,\n  loadingTestsList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_CATEGORY_TEST:\n      return {\n        ...initialState,\n        loadingTestsList: state.loadingTestsList,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingTests: false,\n      };\n    case CATEGORY_TEST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingTests: false,\n        loadingTestsList: false,\n      };\n    case GET_CATEGORY_TEST_LIST:\n      return {\n        ...state,// TODO\n        loadingTestsList: false\n      };\n    case CATEGORY_TEST_LIST_UPDATED:\n      return {\n        ...state,\n        testList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingTests: false,\n        loadingTestsList: false,\n      };\n    case CATEGORY_TEST_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_CATEGORY_TEST_SUBMIT: \n      return {\n        ...state,\n        loadingTestsList: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/packages.js",["1002"],"import {\n  PACKAGE_ERROR,\n  GET_PACKAGE_LIST,\n  GET_PACKAGE_BY_ID,\n  PACKAGE_LIST_UPDATED,\n  PACKAGE_PARAMATERS_UPDATE,\n  LOADING_ON_PACKAGE_SUBMIT,\n  RESET_PACKAGE,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  testList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentTest: null,\n  loadingTests: true,\n  loadingTestsList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_PACKAGE:\n      return {\n        ...initialState,\n        loadingTestsList: state.loadingTestsList,\n        loadingTests: state.loadingTests,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingTests: false,\n      };\n    case PACKAGE_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingTests: false,\n        loadingTestsList: false,\n      };\n    case GET_PACKAGE_LIST:\n      return {\n        ...state,// TODO\n        loadingTestsList: false\n      };\n    case GET_PACKAGE_BY_ID:\n      return {\n        ...state,// TODO\n        loadingTests: false,\n        currentTest: { ...payload.test, ...payload.startingPrice, city: payload.city },\n      };\n    case PACKAGE_LIST_UPDATED:\n      return {\n        ...state,\n        testList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingTests: false,\n        loadingTestsList: false,\n      };\n    case PACKAGE_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_PACKAGE_SUBMIT: \n      return {\n        ...state,\n        loadingTestsList: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/tests.js",["1003"],"import {\n  TEST_ERROR,\n  GET_TEST_BY_ID,\n  TEST_LIST_UPDATED,\n  TEST_PARAMATERS_UPDATE,\n  LOADING_ON_TEST_SUBMIT,\n  RESET_TEST,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  testList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentTest: null,\n  loadingTests: true,\n  loadingTestsList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_TEST:\n      return {\n        ...initialState,\n        loadingTestsList: state.loadingTestsList,\n        loadingTests: state.loadingTests,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingTests: false,\n      };\n    case TEST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingTests: false,\n        loadingTestsList: false,\n      };\n    case GET_TEST_BY_ID:\n      return {\n        ...state,\n        loadingTests: false,\n        currentTest: { ...payload.test, ...payload.startingPrice, city: payload.city },\n      };\n    case TEST_LIST_UPDATED:\n      return {\n        ...state,\n        testList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingTests: false,\n        loadingTestsList: false,\n      };\n    case TEST_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_TEST_SUBMIT: \n      return {\n        ...state,\n        loadingTestsList: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/lt_categories.js",["1004"],"import {\n  LT_CATEGORY_ERROR,\n  LT_CATEGORY_LIST_UPDATED,\n  LT_CATEGORY_PARAMATERS_UPDATE,\n  LOADING_ON_LT_CATEGORY_SUBMIT,\n  LOADING_ON_MORE_LT_CATEGORY_SUBMIT,\n  RESET_LT_CATEGORY,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  categoryList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  testCategories: [],\n  loadingCategoryList: true,\n  loadMoreCategory: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"name\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_LT_CATEGORY:\n      return {\n        ...initialState,\n        loadingCategoryList: state.loadingCategoryList,\n        loadMoreCategory: state.loadMoreCategory,\n      }\n    case LT_CATEGORY_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingCategoryList: false,\n        loadMoreCategory: false,\n      };\n    case LT_CATEGORY_LIST_UPDATED:\n      return {\n        ...state,\n        categoryList: {\n          data: payload.habits[0].data,\n          page: payload.habits[0].metadata[0].current_page,\n          count: payload.habits[0].metadata[0].totalRecord\n        },\n        loadingCategoryList: false,\n        loadMoreCategory: false,\n      };\n    case LT_CATEGORY_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_LT_CATEGORY_SUBMIT: \n      return {\n        ...state,\n        loadingCategoryList: true\n      };\n    case LOADING_ON_MORE_LT_CATEGORY_SUBMIT: \n      return {\n        ...state,\n        loadMoreCategory: true,\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/address.js",["1005"],"import {\n  ADDRESS_CREATED,\n  ADDRESS_UPDATED,\n  ADDRESS_DELETED,\n  UPDATE_CART_ADDRESS,\n  GET_SELECTED_ADDRESS,\n  GET_ADDRESS_BY_ID,\n  ADDRESS_ERROR,\n  ADDRESS_LIST_UPDATED,\n  ADDRESS_SEARCH_PARAMATERS_UPDATE,\n  LOADING_ON_ADDRESS_SUBMIT,\n  LOADING_ON_ADDRESS_LIST,\n  RESET_ADDRESS,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  addressList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentAddress: null,\n  selectedAddress: null,\n  loadingAddress: true,\n  loadingAddressList: true,\n  performDelete: false,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_ADDRESS:\n      return {\n        ...initialState,\n        loadingAddressList: state.loadingAddressList,\n        loadingAddress: state.loadingAddress\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingAddress: false,\n        loadingAddressList: false\n      };\n    case GET_SELECTED_ADDRESS:\n      return {\n        ...state,\n        selectedAddress: payload? payload.address?._id: null,\n      };\n    case GET_ADDRESS_BY_ID:\n      return {\n        ...state,\n        loadingAddress: false,\n        currentAddress: payload,\n      }\n    case ADDRESS_CREATED:\n      return {\n        ...state,\n        loadingAddress: false\n      };\n    case ADDRESS_UPDATED:\n      return {\n        ...state,\n        loadingAddress: false,\n      };\n    case UPDATE_CART_ADDRESS:\n      return {\n        ...state\n      }\n    case ADDRESS_DELETED:\n      const currentCount = state.addressList.count;\n      const currentLimit = state.sortingParams.limit;\n      const currentPage = parseInt(state.addressList.page);\n      let remainingPages = Math.ceil((currentCount - 1)/currentLimit);\n      remainingPages = remainingPages?remainingPages:1;\n      return {\n        ...state,\n        addressList: {\n          data: state.addressList.data.filter(staff => \n            staff._id !== payload\n          ),\n          count: currentCount - 1,\n          page: currentPage <= remainingPages?currentPage.toString(): remainingPages.toString(),\n        },\n        loadingAddressList: false,\n        performDelete: true,\n      };\n    case ADDRESS_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingAddress: false,\n        loadingAddressList: false,\n        performDelete: false,\n      };\n    case ADDRESS_LIST_UPDATED:\n      return {\n        ...state,\n        addressList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingAddressList: false,\n        performDelete: false,\n      };\n    case ADDRESS_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload },\n      };\n    case LOADING_ON_ADDRESS_LIST:\n      return {\n        ...state,\n        loadingAddressList: true,\n      };\n    case LOADING_ON_ADDRESS_SUBMIT: \n      return {\n        ...state,\n        loadingAddress: true\n      }; \n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/lab.js",["1006"],"import {\n  LAB_ERROR,\n  GET_LAB_BY_ID,\n  LAB_LIST_UPDATED,\n  LAB_LIST_UPDATED_ON_LOAD,\n  LAB_PARAMATERS_UPDATE,\n  LOADING_ON_LAB_LIST_SUBMIT,\n  LOADING_ON_LAB_SUBMIT,\n  LAB_PACKAGE_LIST_UPDATED,\n  LAB_PACKAGE_PARAMATERS_UPDATE,\n  LOADING_ON_LAB_PACKAGE_SUBMIT,\n  RESET_LAB,\n  LOAD_PAGE,\n  REVIEW_LIST_UPDATED,\n  REVIEW_PARAMATERS_UPDATE,\n  LOADING_ON_REVIEW_LIST_SUBMIT\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  labList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  reviewList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  testList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentLab: null,\n  currentCity: null,\n  loadingLabs: true,\n  loadingLabsList: true,\n  loadingReviewsList: true,\n  loadingTestsList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_LAB:\n      return {\n        ...initialState,\n        loadingLabsList: state.loadingLabsList,\n        loadingLabs: state.loadingLabs,\n        loadingReviewsList: state.loadingReviewsList,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingLabs: false,\n      };\n    case LAB_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingLabs: false,\n        loadingLabsList: false,\n        loadingReviewsList: false,\n      };\n    case LAB_LIST_UPDATED:\n      return {\n        ...state,\n        labList: {\n          data: payload.labs[0].data,\n          page: payload.labs[0].metadata[0].current_page,\n          count: payload.labs[0].metadata[0].totalRecord\n        },\n        currentCity: payload.city,\n        loadingLabs: false,\n        loadingLabsList: false,\n      };\n    case REVIEW_LIST_UPDATED:\n      return {\n        ...state,\n        reviewList: {\n          data: payload.data[0],\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        currentCity: payload.city,\n        loadingLabs: false,\n        loadingReviewsList: false,\n      };\n    case LAB_LIST_UPDATED_ON_LOAD:\n      return {\n        ...state,\n        labList: {\n          data: payload.labs[0].data,\n          page: payload.labs[0].metadata[0].current_page,\n          count: payload.labs[0].metadata[0].totalRecord\n        },\n        loadingLabs: false,\n        loadingLabsList: false,\n      };\n    case GET_LAB_BY_ID:\n      return {\n        ...state,\n        currentLab: payload,\n        loadingLabs: false,\n      }\n    case LAB_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_LAB_LIST_SUBMIT: \n      return {\n        ...state,\n        loadingLabsList: true\n      };\n    case REVIEW_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_REVIEW_LIST_SUBMIT: \n      return {\n        ...state,\n        loadingReviewsList: true\n      };\n    case LOADING_ON_LAB_SUBMIT: \n      return {\n        ...state,\n        loadingLabs: true\n      };\n    case LAB_PACKAGE_LIST_UPDATED:\n      return {\n        ...state,\n        testList: {\n          data: [...state.testList.data , ...payload.data],\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecords\n        },\n        loadingLabs: false,\n        loadingLabsList: false,\n        loadingTestsList: false,\n      };\n    case LAB_PACKAGE_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_LAB_PACKAGE_SUBMIT: \n      return {\n        ...state,\n        loadingTestsList: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/coupon.js",["1007"],"import {\n  COUPON_ERROR,\n  COUPON_APPLIED,\n  COUPON_LIST,\n  COUPON_PARAMATERS_UPDATE,\n  LOADING_ON_COUPON_LIST,\n  LOADING_ON_COUPON_SUBMIT,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  loadingCoupon: true,\n  loadingCouponList: true,\n  error: {},\n  couponDetails: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case LOADING_ON_COUPON_LIST:\n      return {\n        ...state,\n        loadingCouponList: true,\n      };\n    case LOADING_ON_COUPON_SUBMIT:\n      return {\n        ...state,\n        loadingCoupon: true,\n      };\n    case COUPON_APPLIED:\n      return {\n        ...state,\n        // couponDetails: payload,\n        loadingCoupon: false,\n      };\n    case COUPON_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingCouponList: false,\n        loadingCoupon: false,\n      };\n    case COUPON_LIST:\n      return {\n        ...state,\n        couponDetails: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord,\n        },\n        loadingCoupon: false,\n        loadingCouponList: false,\n      };\n    case COUPON_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/family.js",["1008"],"import {\n  FAMILY_CREATED,\n  FAMILY_UPDATED,\n  FAMILY_DELETED,\n  UPDATE_CART_PATIENT,\n  GET_FAMILY_BY_ID,\n  GET_SELECTED_PATIENT,\n  FAMILY_ERROR,\n  FAMILY_LIST_UPDATED,\n  FAMILY_SEARCH_PARAMATERS_UPDATE,\n  LOADING_ON_FAMILY_SUBMIT,\n  LOADING_ON_FAMILY_LIST,\n  RESET_FAMILY,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  familyList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentFamily: null,\n  selectedPatient: null,\n  loadingFamily: true,\n  loadingFamilyList: true,\n  performDelete: false,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_FAMILY:\n      return {\n        ...initialState,\n        loadingFamilyList: state.loadingFamilyList,\n        loadingFamily: state.loadingFamily,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingFamily: false,\n        loadingFamilyList: false,\n      };\n    case GET_SELECTED_PATIENT:\n      return {\n        ...state,\n        selectedPatient: payload? payload.patient?._id: null,\n      };\n    case GET_FAMILY_BY_ID:\n      return {\n        ...state,\n        loadingFamily: false,\n        currentFamily: payload,\n      }\n    case FAMILY_CREATED:\n      return {\n        ...state,\n        loadingFamily: false\n      };\n    case FAMILY_UPDATED:\n      return {\n        ...state,\n        loadingFamily: false,\n      }\n    case UPDATE_CART_PATIENT:\n      return {\n        ...state\n      }\n    case FAMILY_DELETED:\n      const currentCount = state.familyList.count;\n      const currentLimit = state.sortingParams.limit;\n      const currentPage = parseInt(state.familyList.page);\n      let remainingPages = Math.ceil((currentCount - 1)/currentLimit);\n      remainingPages = remainingPages?remainingPages:1;\n      return {\n        ...state,\n        familyList: {\n          data: state.familyList.data.filter(staff => \n            staff._id !== payload\n          ),\n          count: currentCount - 1,\n          page: currentPage <= remainingPages?currentPage.toString(): remainingPages.toString(),\n        },\n        loadingFamilyList: false,\n        performDelete: true,\n      };\n    case FAMILY_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingFamily: false,\n        loadingFamilyList: false,\n        performDelete: false,\n      };\n    case FAMILY_LIST_UPDATED:\n      return {\n        ...state,\n        familyList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingFamilyList: false,\n        performDelete: false,\n      };\n    case FAMILY_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload },\n      };\n    case LOADING_ON_FAMILY_LIST:\n      return {\n        ...state,\n        loadingFamilyList: true,\n      };\n    case LOADING_ON_FAMILY_SUBMIT: \n      return {\n        ...state,\n        loadingFamily: true\n      }; \n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/prescription.js",["1009"],"import {\n    PRESCRIPTION_UPLOADED,\n    PRESCRIPTION_ERROR,\n    LOADING_ON_PRESCRIPTION_SUBMIT,\n    LOADING_ON_PRESCRIPTION_LIST,\n    PRESCRIPTION_LIST_UPDATED,\n    LABS_PARAMATERS_UPDATE,\n    PRESCRIPTION_DELETE,\n    LOADING_ON_LABS_LIST,\n    LABS_LIST_UPDATED,\n    RESET_LAB_LIST,\n    LOADING_ON_UPLOADED_PRESCRIPTION_SUBMIT,\n    UPLOADED_PRESCRIPTION_SUBMIT\n} from \"actions/types\";\n\nconst initialState = {\n  prescriptionList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  labsList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  loadingPrescription: true,\n  loadingUploadedPrescription: true,\n  loadingPrescriptionList: true,\n  loadingLabsList: true,\n  performDelete: false,\n  error: {},\n  labsSortingParams: {\n    limit: 2,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: {},\n    filters: []\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_LAB_LIST:\n      return {\n        ...initialState,\n        loadingLabsList: state.loadingLabsList\n      }\n    case PRESCRIPTION_UPLOADED:\n      return {\n        ...state,\n        loadingPrescription: false\n      };\n    case UPLOADED_PRESCRIPTION_SUBMIT:\n      return {\n        ...state,\n        loadingUploadedPrescription: false\n      };\n    case PRESCRIPTION_DELETE:\n      const currentCount = state.prescriptionList.count;\n      const currentLimit = state.labsSortingParams.limit;\n      const currentPage = parseInt(state.prescriptionList.page);\n      let remainingPages = Math.ceil((currentCount - 1)/currentLimit);\n      remainingPages = remainingPages?remainingPages:1;\n      return {\n        ...state,\n        prescriptionList: {\n          data: state.prescriptionList.data.filter(prescription => prescription._id !== payload),\n          count: currentCount - 1,\n          page: currentPage <= remainingPages?currentPage.toString(): remainingPages.toString(),\n        },\n        loadingPrescriptionList: false,\n        performDelete: true,\n      };\n    case PRESCRIPTION_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingPrescription: false,\n        loadingPrescriptionList: false,\n        loadingLabsList: false,\n      };\n    case PRESCRIPTION_LIST_UPDATED:\n      return {\n        ...state,\n        prescriptionList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingPrescriptionList: false,\n        performDelete: false,\n      };\n    case LABS_LIST_UPDATED:\n      return {\n        ...state,\n        labsList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingLabsList: false,\n        performDelete: false,\n      };\n    case LABS_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        labsSortingParams: { ...payload }\n      };\n    case LOADING_ON_PRESCRIPTION_LIST:\n      return {\n        ...state,\n        loadingPrescriptionList: true,\n      };\n    case LOADING_ON_PRESCRIPTION_SUBMIT: \n      return {\n        ...state,\n        loadingPrescription: true\n      }; \n    case LOADING_ON_UPLOADED_PRESCRIPTION_SUBMIT: \n      return {\n        ...state,\n        loadingUploadedPrescription: true\n      }; \n    case LOADING_ON_LABS_LIST:\n      return {\n        ...state,\n        loadingLabsList: true,\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/order.js",["1010"],"import {\n  ORDER_ERROR,\n  GET_ORDER_BY_ID,\n  ORDER_LIST_UPDATED,\n  ORDER_SEARCH_PARAMATERS_UPDATE,\n  LOADING_ON_ORDER_LIST_SUBMIT,\n  LOADING_ON_ORDER_SUBMIT,\n  CANCEL_ORDER_BY_ID,\n  CANCEL_ORDER_ERROR,\n  LOAD_PAGE,\n  RESET_ORDER,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  ordersList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentOrder: null,\n  loadingOrder: true,\n  loadingOrdersList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_ORDER:\n      return {\n        ...initialState,\n        loadingOrdersList: state.loadingOrdersList,\n        loadingOrder: state.loadingOrder,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingOrder: false,\n      };\n    case CANCEL_ORDER_ERROR:\n    case ORDER_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingOrder: false,\n        loadingOrdersList: false,\n      };\n    case CANCEL_ORDER_BY_ID:\n      return {\n        ...state,\n        currentOrder: {...state.currentOrder , status : payload.status},\n        loadingOrder: false\n      }\n    case ORDER_LIST_UPDATED:\n      return {\n        ...state,\n        ordersList: {\n          data: payload[0].data,\n          page: payload[0].metadata[0].current_page,\n          count: payload[0].metadata[0].totalRecord\n        },\n        loadingOrder: false,\n        loadingOrdersList: false,\n      };\n    case GET_ORDER_BY_ID:\n      return {\n        ...state,\n        currentOrder: payload,\n        loadingOrder: false,\n      }\n    case ORDER_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_ORDER_LIST_SUBMIT: \n      return {\n        ...state,\n        loadingOrdersList: true\n      };\n    case LOADING_ON_ORDER_SUBMIT: \n      return {\n        ...state,\n        loadingOrder: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/locality.js",["1011"],"import {\n  LOCALITY_ERROR,\n  LOCALITY_LIST_UPDATED,\n  LOCALITY_SEARCH_PARAMATERS_UPDATE,\n  LOADING_LOCALITY_LIST_DATA,\n  RESET_LOCALITY,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\n// console.log(RESET_LOCALITY);\n\nconst initialState = {\n  localitiesList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  loadingListData: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_LOCALITY:\n      return {\n        ...initialState,\n        loadingListData: state.loadingListData,\n      };\n    case LOCALITY_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingListData: false,\n      };\n    case LOCALITY_LIST_UPDATED:\n      return {\n        ...state,\n        localitiesList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord,\n        },\n        loadingListData: false,\n      };\n    case LOCALITY_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_LOCALITY_LIST_DATA: \n      return {\n        ...state,\n        loadingListData: true\n      };\n    default:\n      return state;\n    }\n}","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/health_record.js",["1012"],"import {\n  HEALTH_RECORD_ERROR,\n  GET_HEALTH_RECORD_BY_SLUG,\n  HEALTH_RECORD_LIST_UPDATED,\n  HEALTH_RECORD_SEARCH_PARAMATERS_UPDATE,\n  LOADING_ON_HEALTH_RECORD_SUBMIT,\n  LOADING_ON_HEALTH_RECORD_LIST,\n  RESET_HEALTH_RECORD,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  healthRecordList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentHealthRecord: null,\n  loadingHealthRecord: true,\n  loadingHealthRecordsList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"name\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_HEALTH_RECORD:\n      return {\n        ...initialState,\n        loadingHealthRecord: state.loadingHealthRecord,\n        loadingHealthRecordsList: state.loadingHealthRecordsList,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingHealthRecord: false\n      };\n    case HEALTH_RECORD_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingHealthRecord: false,\n        loadingHealthRecordsList: false,\n      };\n    case HEALTH_RECORD_LIST_UPDATED:\n      return {\n        ...state,\n        healthRecordList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingHealthRecordsList: false,\n      };\n    case HEALTH_RECORD_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case GET_HEALTH_RECORD_BY_SLUG:\n      return {\n        ...state,\n        currentHealthRecord: payload,\n        loadingHealthRecord: false\n      };\n    case LOADING_ON_HEALTH_RECORD_LIST:\n      return {\n        ...state,\n        loadingHealthRecordsList: true,\n      }\n    case LOADING_ON_HEALTH_RECORD_SUBMIT: \n      return {\n        ...state,\n        loadingHealthRecord: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/article.js",["1013"],"import {\n  ARTICLE_ERROR,\n  GET_ARTICLE_BY_SLUG,\n  ARTICLE_LIST_UPDATED,\n  ARTICLE_SEARCH_PARAMATERS_UPDATE,\n  LOADING_ON_ARTICLE_SUBMIT,\n  LOADING_ON_ARTICLE_LIST,\n  RESET_ARTICLE,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  articleList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentArticle: null,\n  loadingArticle: true,\n  loadingArticlesList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"name\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_ARTICLE:\n      return {\n        ...initialState,\n        loadingArticle: state.loadingArticle,\n        loadingArticlesList: state.loadingArticlesList,\n      }\n    case LOAD_PAGE: \n      return {\n        ...state,\n        loadingArticle: false\n      };\n    case ARTICLE_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingArticle: false,\n        loadingArticlesList: false,\n      };\n    case ARTICLE_LIST_UPDATED:\n      return {\n        ...state,\n        articleList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingArticlesList: false,\n      };\n    case ARTICLE_SEARCH_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case GET_ARTICLE_BY_SLUG:\n      return {\n        ...state,\n        currentArticle: payload,\n        loadingArticle: false\n      };\n    case LOADING_ON_ARTICLE_LIST:\n      return {\n        ...state,\n        loadingArticlesList: true,\n      }\n    case LOADING_ON_ARTICLE_SUBMIT: \n      return {\n        ...state,\n        loadingArticle: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/articleCategories.js",["1014"],"import {\n  ARTICLE_CATEGORY_ERROR,\n  ARTICLE_CATEGORY_LIST_UPDATED,\n  ARTICLE_CATEGORY_SEARCH_PARAMETERS_UPDATE,\n  LOADING_ON_ARTICLE_CATEGORY_LIST,\n  RESET_ARTICLE_CATEGORY,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  articleCategoryList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  currentArticleCategory: null,\n  loadingArticleCategoryList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"name\",\n    ascending: \"desc\",\n    query: \"\",\n    filters:[],\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_ARTICLE_CATEGORY:\n      return {\n        ...initialState,\n        loadingArticleCategoryList: state.loadingArticleCategoryList,\n      };\n    case ARTICLE_CATEGORY_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingArticleCategoryList: false,\n      };\n    case ARTICLE_CATEGORY_LIST_UPDATED:\n      return {\n        ...state,\n        articleCategoryList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n        loadingArticleCategoryList: false,\n      };\n    case ARTICLE_CATEGORY_SEARCH_PARAMETERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_ARTICLE_CATEGORY_LIST:\n      return {\n        ...state,\n        loadingArticleCategoryList: true,\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/wallet.js",["1015","1016"],"import {\n  GET_WALLET_BALANCE,\n  WALLET_ERROR,\n  GET_WALLET_TRANSACTIONS,\n  GET_SAVED_CARDS,\n  ADD_MONEY,\n  MONEY_DEDUCT,\n  CARD_DELETED,\n  LOADING_TRANSACTIONS,\n  LOADING_ON_ADD_MONEY,\n  LOADING_ON_MONEY_DEDUCT,\n  LOADING_ON_WALLET_BALANCE,\n  LOADING_ON_SAVED_CARDS,\n  UPDATE_WALLET_TRANSACTIONS_PARAMS,\n  RESET_WALLET,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\nconst initialState = {\n  transactionsList: {\n    page: 1,\n    data: [],\n    count: 0\n  },\n  savedCards: [],\n  walletBalance: 0,\n  currency: \"INR\",\n  loadingTransactions: true,\n  loadingWalletBalance: true,\n  loadingMoney: false,\n  loadingSavedCards: true,\n  loadingMoneyDeduct: false,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1,\n    orderBy: \"created_at\",\n    ascending: \"desc\"\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_WALLET:\n      return {\n        ...initialState,\n        loadingTransactions: state.loadingTransactions,\n        loadingMoney: state.loadingMoney,\n        loadingWalletBalance: state.loadingWalletBalance,\n        loadingSavedCards: state.loadingSavedCards,\n      };\n    case WALLET_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingTransactions: false,\n        loadingMoney: false,\n        loadingWalletBalance: false,\n        loadingSavedCards: false,\n        loadingMoneyDeduct: false,\n      };\n    case GET_WALLET_TRANSACTIONS:\n      return {\n        ...state,\n        loadingTransactions: false,\n        transactionsList: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord\n        },\n      };\n    case UPDATE_WALLET_TRANSACTIONS_PARAMS:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case GET_WALLET_BALANCE:\n      return {\n        ...state,\n        loadingWalletBalance: false,\n        walletBalance: payload.outstandingAmount,\n        currency: payload.currency || \"INR\"\n      };\n    case GET_SAVED_CARDS:\n      return {\n        ...state,\n        loadingSavedCards: false,\n        savedCards: payload,\n      };\n    case CARD_DELETED:\n      return {\n        ...state,\n        loadingSavedCards: false,\n        savedCards: state.savedCards.filter((card) => {\n          return card.token !== payload.token\n        })\n      }\n    case ADD_MONEY:\n      return {\n        ...state,\n        loadingMoney: false,\n      };\n    case MONEY_DEDUCT:\n      return {\n        ...state,\n        loadingMoneyDeduct: false,\n      };\n    case WALLET_ERROR:\n      return {\n        ...state,\n        error: payload.errors,\n      };\n    case LOADING_TRANSACTIONS: \n      return {\n        ...state,\n        loadingTransactions: true\n      };\n    case LOADING_ON_ADD_MONEY: \n      return {\n        ...state,\n        loadingMoney: true\n      };\n    case LOADING_ON_SAVED_CARDS: \n      return {\n        ...state,\n        loadingSavedCards: true\n      };\n    case LOADING_ON_WALLET_BALANCE: \n      return {\n        ...state,\n        loadingWalletBalance: true\n      };\n    case LOADING_ON_MONEY_DEDUCT:\n      return {\n        ...state,\n        loadingMoneyDeduct: true\n      };\n    default:\n      return state;\n  }\n}","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/collectionCenters.js",["1017"],"import {\n    COLLECTION_CENTER_ERROR,\n    COLLECTION_CENTER_LIST_UPDATED,\n    LOADING_ON_COLLECTION_CENTER_LIST,\n    GET_SELECTED_COLLECTION_CENTER,\n    LOADING_ON_COLLECTION_CENTER_SUBMIT,\n    UPDATE_CART_COLLECTION_CENTER\n  } from \"actions/types\";\n  import * as Constants from \"constants/index\";\n  \n  const initialState = {\n    collectionCenterList: {\n      page: 1,\n      data: [],\n      count: 0\n    },\n    sortingParams: {\n      limit: Constants.DEFAULT_PAGE_SIZE,\n      page: 1,\n      orderBy: \"created_at\",\n      ascending: \"desc\",\n      query: \"\",\n      filters:[],\n    },\n    loadingCollectionCenterList: true,\n    error: {},\n    selectedCollectionCenter: null,\n    loadingCollectionCenter: true,\n  };\n  \n  export default function(state = initialState, action) {\n    const { type, payload } = action;\n    switch (type) {\n      case COLLECTION_CENTER_ERROR:\n        return {\n          ...state,\n          error: payload,\n          loadingCollectionCenterList: false,\n          loadingCollectionCenter: false,\n        };\n      case COLLECTION_CENTER_LIST_UPDATED:\n        return {\n          ...state,\n          collectionCenterList: {\n            data: payload.data,\n            page: payload.metadata[0].current_page,\n            count: payload.metadata[0].totalRecord\n          },\n          loadingCollectionCenterList: false,\n        };\n      case LOADING_ON_COLLECTION_CENTER_LIST:\n        return {\n          ...state,\n          loadingCollectionCenterList: true,\n        };\n      case GET_SELECTED_COLLECTION_CENTER:\n        return {\n          ...state,\n          selectedCollectionCenter: payload? payload.collectionCenter?._id: null,\n        };\n      case LOADING_ON_COLLECTION_CENTER_SUBMIT: \n        return {\n          ...state,\n          loadingCollectionCenter: true\n        };\n      case UPDATE_CART_COLLECTION_CENTER:\n        return {\n          ...state\n        }\n      default:\n        return state;\n    }\n  }\n  ","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/notification.js",["1018","1019"],"import {\n  NOTIFICATION_ERROR,\n  NOTIFICATION_PARAMATERS_UPDATE,\n  NOTIFICATION_LIST_UPDATED,\n  NOTIFICATION_VIEWED,\n  NOTIFICATION_LIST_LOAD_MORE,\n  LOADING_ON_NOTIFICATION_LIST,\n  ADD_NOTIFICATION,\n  RESET_NOTIFICATION,\n} from \"actions/types\";\nimport * as Constants from \"constants/index\";\n\n\nconst initialState = {\n  notifications: {\n    page: 1,\n    data: [],\n    count: 0,\n    unopened_notification: 0,\n  },\n  loadingNotificationList: true,\n  error: {},\n  sortingParams: {\n    limit: Constants.DEFAULT_PAGE_SIZE,\n    page: 1\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_NOTIFICATION:\n      return {\n        ...initialState,\n        loadingNotificationList: state.loadingNotificationList,\n      };\n    case ADD_NOTIFICATION:\n      const items = state.notifications.data;\n\n      items.unshift(payload);\n      return {\n        ...state,\n        notifications: {\n          data: items,\n          count: state.notifications.count + 1,\n          unopened_notification: state.notifications.unopened_notification + 1,\n          page: state.notifications.page,\n        }\n      };\n    case NOTIFICATION_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingNotificationList: false,\n      };\n    case NOTIFICATION_LIST_UPDATED:\n      return {\n        ...state,\n        notifications: {\n          data: payload.data,\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord,\n          unopened_notification: payload.metadata[0].unopened_notifications,\n        },\n        loadingNotificationList: false,\n      };\n    case NOTIFICATION_LIST_LOAD_MORE:\n      return {\n        ...state,\n        notifications: {\n          data: [...state.notifications.data, ...payload.data],\n          page: payload.metadata[0].current_page,\n          count: payload.metadata[0].totalRecord,\n          unopened_notification: payload.metadata[0].unopened_notifications,\n        },\n        loadingNotificationList: false,\n      };\n    case NOTIFICATION_PARAMATERS_UPDATE:\n      return {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case LOADING_ON_NOTIFICATION_LIST: \n      return {\n        ...state,\n        loadingNotificationList: true\n      };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/sampleCollection/sampleCollection.js",["1020"],"import {\n    LOADIN_ON_COLLECTION_DETAILS,\n    SAMPLE_COLLECTION_DETAILS_UPDATED,\n    SAMPLE_COLLECTION_ERROR,\n  } from \"actions/types\";\n\n  const initialState = {\n    loadingSampleDetails: true,\n    sampleDetails: {}\n  };\n  \n  export default function(state = initialState, action) {\n    const { type, payload } = action;\n    switch (type) {\n      case LOADIN_ON_COLLECTION_DETAILS: \n        return {\n          ...state,\n          loadingSampleDetails: state.loadingSampleDetails,\n        };\n      case SAMPLE_COLLECTION_DETAILS_UPDATED:\n        return {\n          ...state,\n          loadingSampleDetails: false,\n          sampleDetails: payload,\n        };\n      case SAMPLE_COLLECTION_ERROR:\n        return {\n          ...state,\n          loadingSampleDetails: false,\n          sampleDetails: {}\n        }\n      default:\n        return state;\n    }\n  }\n  ","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/cart/cart.js",["1021"],"import {\n  LOADING_ON_CART_DETAILS,\n  CART_DETAILS_UPDATED,\n  CART_PRODUCT_REMOVED,\n  CART_PRODUCT_REMOVED_SUCCESS,\n  APPLY_WALLET_BALANCE_TO_CART,\n  PRODUCT_ADDED_TO_CART,\n  ADD_TO_CART_ERROR,\n  EMPTY_CART,\n  MARK_CART_ERROR,\n  MARK_CART,\n  CART_COUNT,\n  CART_UNLOAD,\n} from \"actions/types\";\n\nconst initialState = {\n  loadingCartDetails: true,\n  loadingCoupon: true,\n  cartDetails: {},\n  count: 0,\n  error: {},\n  addedProduct: [],\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case CART_COUNT:\n      return {\n        ...state,\n        count: payload.count,\n      }\n    case LOADING_ON_CART_DETAILS:\n      return {\n        ...state,\n        loadingCartDetails: true,\n      };\n    case CART_UNLOAD:\n      return {\n        ...state,\n        loadingCartDetails: false,\n      };\n    case APPLY_WALLET_BALANCE_TO_CART:\n      return {\n        ...state,\n        cartDetails: {\n          ...state.cartDetails,\n          ...payload,\n        }\n      };\n    case CART_DETAILS_UPDATED:\n      return {\n        ...state,\n        loadingCartDetails: false,\n        cartDetails: payload,\n      };\n    case CART_PRODUCT_REMOVED:\n      return {\n        ...state,\n        loadingCartDetails: true,\n      };\n    case CART_PRODUCT_REMOVED_SUCCESS:\n      const keys = Object.keys(payload);\n      const products = state.cartDetails.products;\n      const remaining = products ? products.filter(item => item._id === payload.item) : [];\n      const cart = keys.length === 0 ? {}: { ...state.cartDetails, products: remaining };\n      return {\n        ...state,\n        cartDetails: cart,\n        loadingCartDetails: false,\n      };\n    case PRODUCT_ADDED_TO_CART:\n      return {\n        ...state,\n        addedProduct: payload,\n        loadingCartDetails: false,\n      };\n    case ADD_TO_CART_ERROR:\n      return {\n        ...state,\n        error: payload,\n      };\n    case EMPTY_CART:\n      return {\n        loadingCartDetails: false,\n        cartDetails: [],\n        error: {},\n        addedProduct: [],\n      };\n      case MARK_CART_ERROR:\n        return {\n          ...state,\n          error: payload,\n        };\n      case MARK_CART:\n        return {\n          ...state,\n          markCartDetails: {\n            cart: payload.cart,\n            for: payload.for,\n          },\n        };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/order/order.js",["1022"],"import { \n  LOADING_ON_ORDER_REVIEW, \n  ORDER_REVIEW_ERROR, \n  ORDER_DETAILS, \n  ORDER_PLACED,\n  RESET_PLACED_ORDER\n  // PAYMENT_METHOD_UPDATED,\n  // PAYMENT_VERIFY\n } from \"actions/types\";\n\nconst initialState = {\n  loadingOrderDetails: true,\n  orderDetails: [],\n  placedOrderDetails: null,\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case LOADING_ON_ORDER_REVIEW:\n      return {\n        ...state,\n        loadingOrderDetails: state.loadingOrderDetails,\n      };\n    case RESET_PLACED_ORDER:\n      return {\n        ...state,\n        placedOrderDetails: initialState.placedOrderDetails\n      };\n    case ORDER_DETAILS:\n      return {\n        ...state,\n        orderDetails: payload,\n        loadingOrderDetails: false,\n      };\n    case ORDER_REVIEW_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loadingOrderDetails: false,\n      };\n    case ORDER_PLACED:\n      return {\n        ...state,\n        placedOrderDetails: payload,\n      };\n    // case PAYMENT_METHOD_UPDATED:\n    //   return {\n    //     ...state,\n    //     // placedOrderDetails: payload,\n    //   };\n    // case PAYMENT_VERIFY:\n    //   return {\n    //     ...state,\n    //     // placedOrderDetails: payload,\n    //   };\n    default:\n      return state;\n  }\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Spinner.js",["1023"],"import React, { Fragment } from 'react';\nimport spinner from '../assets/images/loader.svg';\n\nexport default () => (\n  <Fragment>\n    <div id=\"global-loader\">\n      <img\n        src={spinner}\n        alt='Loading...'\n        className='loader-img'\n      />\n    </div>\n  </Fragment>\n);\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/DefaultContent.js",["1024"],"import React, { Suspense } from 'react'\nimport {\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\n\n// routes config\nimport CustomerRoutes from \"../../Routing/CustomerRoutes\";\n// import PrivateRoute from \"views/Routing/PrivateRoute\";\n  \nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\nconst DefaultContent = ({ user }) => {\n  return (\n    <Suspense fallback={loading}>\n      <Switch>\n        {\n          CustomerRoutes.map((route, idx) => {\n            try {\n              return route.component && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => {\n                    if(route.restricted) {\n                      if(route.loginEnabled) {\n                        if(user) return <route.component { ...props } />\n                        return <Redirect to=\"/login#content\" />\n                      }\n                      else {\n                        if(user) return <Redirect to=\"/\" />\n                        return <route.component { ...props } />\n                      }\n                    }\n                    return <route.component {...props} />\n                  }}\n                />\n              );\n            }\n            catch(err){ \n              console.log(\"err\", err);\n            }\n          })\n        }\n      </Switch>\n    </Suspense>\n  )\n}\n\nexport default React.memo(DefaultContent)\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/DefaultFooter.js",["1025","1026"],"import React, { useState, useMemo, useEffect} from 'react';\nimport { getFooter } from \"actions/customer/footer\";\nimport {\n  Row,\n  Col,\n  Container,\n  InputGroup,\n  FormControl,\n  Button,\n} from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment'\nimport uuid from 'uuid';\nimport { \n  FaEnvelope,\n  FaMapMarker,\n  FaPhone,\n  FaPrint,\n} from \"react-icons/fa\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Errors from \"views/Notifications/Errors\";\nimport {\n  callSubscription,\n} from \"actions/subscription\";\nconst mapIcons = {\n  \"envelope\": <FaEnvelope />,\n  \"map-marker\": <FaMapMarker />,\n  \"phone\": <FaPhone />,\n  \"print\": <FaPrint />,\n};\n\nconst DefaultFooter = ({callSubscription,errorList}) => {\n\n  const dispatch = useDispatch();\n  const Footer = useSelector(state => state.footer.footerList);\n  const [onlyOnce, setOnce] = useState(true);\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     dispatch(getFooter());\n  //     setOnce(false);\n  //   }\n  // }, [])\n\n  useEffect(() => {\n    if(onlyOnce) {\n      dispatch(getFooter());\n      setOnce(false);\n    }\n  }, [])\n\n const [formData,setFormData] = useState({email:\"\"})\n const onChange = (e) =>{\n  setFormData({...formData, [e.target.name]: e.target.value})\n }\n const {email} = formData\n const onSubscribe = () => {\n  callSubscription(formData).then((res)=>console.log(res));\n }\n  return (\n    <footer className=\"text-white footer-bg\">\n      <div className=\"footer-main\">\n        <Container>\n          <Row>\n            {\n              Footer.map((tab) => {\n                if(tab.label === \"Contact\") {\n                  return (\n                    <Col md={12} lg={3} key={uuid.v4()}>\n                      <h6>{tab.label}</h6>\n                      <hr className=\"deep-purple accent-2 text-primary mb-4 mt-0 d-inline-block mx-auto\"/>\n                      <ul className=\"list-unstyled mb-0  contact-footer\">\n                        {\n                          tab.contacts.map((row) => {\n                            return (\n                              <li key={uuid.v4()}>\n                              { mapIcons[row.icon.class] }\n                              {' '}\n                              { row.label }\n                              </li>\n                            )\n                          })\n                        }\n                      </ul>\n                    </Col>\n                  )\n                }\n                return (\n                  <Col md={12} lg={2} key={uuid.v4()}>\n                    <h6>{tab.label}</h6>\n                    <hr className=\"deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto mt-0\"/>\n                    <ul className=\"list-unstyled mb-0\">\n                      {\n                        tab.links.map((link) => (\n                          <li key={uuid.v4()}>\n                            <Link to={{\n                              pathname:`/page/${link.to}`,\n                            }}>{link.label}</Link>\n                          </li>\n                        ))\n                      }\n                    </ul>\n                  </Col>\n                )\n              })\n            }\n            <Col md={12} lg={3}>\n              <h6>Subscribe</h6>\n              <hr className=\"deep-purple text-primary accent-2 mb-4 mt-0 d-inline-block mx-auto\"/>\n              <div className=\"clearfix\"></div>\n              <InputGroup className=\"w-100\">\n                <FormControl \n                  className=\"br-tl-3 br-bl-3\"\n                  placeholder=\"Email\"\n                  type=\"text\"\n                  id=\"email\"\n                  name=\"email\"\n                  required\n                  isInvalid={errorList.email ? true : false}\n                  value={email}\n                  onChange={(e)=>onChange(e)}\n                />\n                  <InputGroup.Append>\n                    <Button \n                      variant=\"primary\"\n                      className=\"br-tr-3 br-br-3\"\n                      type=\"button\"\n                      onClick={()=>onSubscribe()}\n                      >\n                      Subscribe\n                    </Button>\n                  </InputGroup.Append>\n              </InputGroup>\n                <Errors current_key=\"email\" key=\"email\" />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div className=\"text-white p-0\">\n        <Container>\n          <Row className=\"d-flex\">\n            <Col lg={12} sm={12} className=\"mt-3 mb-3 text-center\">\n            <span>Copyright &copy; <Moment format='YYYY' /> </span>\n            <a \n              className=\"fs-14 text-white-50\" \n              href={process.env.REACT_APP_CLIENT_URL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >{process.env.REACT_APP_APP_NAME}</a>. All rights reserved.\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </footer>\n  )\n}\n\nDefaultFooter.propTypes = {\n  callSubscription: PropTypes.func.isRequired,\n  errorList: PropTypes.object.isRequired,\n};\nconst mapStateToProps = state => ({\n  errorList: state.errors,\n});\nexport default connect(mapStateToProps, {\n  callSubscription,\n})(React.memo(DefaultFooter));\n\n\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/DefaultHeader.js",["1027","1028","1029","1030","1031","1032","1033"],"import React, { useState, Suspense, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from 'react-redux'\nimport { Link, useLocation, matchPath } from \"react-router-dom\"\nimport {\n  Container,\n  Row,\n  Col,\n  Dropdown,\n  Image,\n  Nav,\n  Navbar,\n  Carousel\n} from \"react-bootstrap\";\nimport {\n  FaUser,\n  FaSignInAlt,\n  FaShoppingCart,\n  FaPhone,\n  FaEnvelope\n} from 'react-icons/fa';\nimport {\n  AiOutlineProfile,\n  AiOutlinePoweroff,\n  AiOutlineWallet,\n  AiOutlineShopping,\n  AiOutlinePercentage\n} from 'react-icons/ai';\nimport {\n  IoMdCloudUpload\n} from 'react-icons/io';\n\nimport uuid from \"uuid\";\nimport logo from \"assets/images/brand/logo.svg\";\nimport LabTestSearch from \"views/Customer/Searches/LabTestSearch\";\nimport CitySearch from \"views/Customer/Searches/CitySearch\";\nimport BreadCrumbRouter from \"./BreadCrumb/BreadCrumbRouter\";\nimport UploadProfile from \"assets/images/users/female/17.jpg\";\nimport Notification from \"./Notification\";\n\nconst breadCrumExcludedPath = {\n  \"/lab-tests\": 1,\n  \"/\": 1,\n  \"/home\": 1,\n};\n\nconst getPaths = pathname => {\n  const paths = ['/']\n  if (pathname === '/') return paths;\n  pathname.split('/').reduce((prev, curr) => {\n    const currPath = `${prev}/${curr}`\n    paths.push(currPath)\n    return currPath\n  })\n  return paths\n};\n\n/**\n * Capitalizes first letters of words in string.\n * @param {string} str String to be modified\n * @param {boolean=false} lower Whether all other letters should be lowercased\n * @return {string}\n * @citation - https://stackoverflow.com/a/7592235/6009502\n */\nconst capitalize = (str, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, match => match.toUpperCase());\n;\n\nconst DefaultHeader = ({\n  auth: { isAuthenticated, loading, user },\n  logout,\n  cartCount,\n  citySearch: { currentCity },\n  docRef,\n  routes,\n  banners,\n  query,\n  navRef,\n}) => {\n  const [showCity, setShowCity] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  const location = useLocation();\n  const footer = useSelector(state => state.footer.footerList);\n  let phone = \"\";\n  let email = \"\";\n  if(footer && footer.length >= 3 && footer[3].key === \"contacts\") {\n    const contacts = footer[3].contacts || [];\n    for(let info of contacts) {\n      switch(info.key) {\n        case \"phone\":\n          phone = info.label;\n          break;\n        case \"email\":\n          email = info.label;\n          break;\n        default: break;\n      }\n    }\n  }\n  const search_title = query.get(\"search_title\") ? query.get(\"search_title\").replace(/\\-/g, ' ')+\" \": \"\";\n  const paths = getPaths(location.pathname);\n  const currRoute = paths.map(currPath => {\n    const route = routes.find(route => matchPath(currPath, {\n      path: route.path,\n      exact: route.exact\n    }))\n    return { ...route, currPath }\n  }).filter(route => route && route.currPath === location.pathname)[0];\n  let pageName = currRoute.name;\n  if(currRoute) {\n    const pathIndex = currRoute?.path?.split(\"/\")?.findIndex((item) => item.indexOf(\":\") === 0);\n    const currPath = currRoute?.currPath?.split(\"/\")[pathIndex];\n    // console.log(pathIndex, currPath);\n    if(pathIndex && pathIndex !== -1) pageName = search_title + capitalize(currPath.replace(/-/g, \" \"));\n  }\n  const city = isAuthenticated ? user?.city : currentCity;\n  const openCityBox = (e) => {\n    e.preventDefault();\n    setShowCity(true);\n  }\n \n  const [toggleIt , setToggle] = useState(false);\n\n  const toggleDiv = (e) => {\n    e.preventDefault();\n    setToggle(!toggleIt);\n  }\n\n   \n\n\n\n  const handleNavToggle = () => {\n    if(!expanded) {\n      document.body.classList.add(\"active\");\n      docRef.current.classList.add(\"horizontalMenucontainer\");\n    }\n    else {\n      document.body.classList.remove(\"active\");\n      docRef.current.classList.remove(\"horizontalMenucontainer\")\n    }\n    setExpanded(!expanded)\n  }\n\n  // console.log(\"pathname\", paths, currRoute);\n\n  useEffect(() => {\n    window.document.title = process.env.REACT_APP_APP_NAME + (pageName ? \" - \" + pageName: \"\");\n  }, [pageName]);\n\n  return (\n    <div className=\"header-main\">\n      <header className=\"header-search border-bottom bg-white\">\n        <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-lg-3 col-md-12\">\n                  <div className=\"header-search-logo d-none d-lg-block\">\n                    <Link className=\"header-logo\" to=\"/\">\n                      <img src={logo} className=\"header-brand-img\" alt=\"medlist logo\" width=\"170px\" />\n                    </Link>\n                  </div>\n              </div>\n              <div className=\"col-lg-9 col-md-12 header-support top-bar-left\">\n                <ul className=\"contact topbard\">\n                  <li className=\"select-country\">\n                      <div>\n                        <a \n                          href=\"#\" \n                          onClick={openCityBox} \n                          title=\"Select City\"\n                        >\n                          <span className=\"city_select\">{!!city && (city.city || city.label)}</span>\n                        </a>\n                      </div>\n                      <CitySearch show={!city || showCity} onClose={() => setShowCity(false)}/>\n                    </li>\n                   \n                   <li>   \n                    <div>\n                        <ul className=\"hor-support float-right rightpop\">\n                          <li className=\"support-header\" key={uuid.v4()}>\n                            <Link to=\"/\">\n                              <div className=\"icon-adjusted\"><FaPhone style={{\"transform\": \"rotateY(180deg)\" }}/></div>\n                              <div className=\"support-text\">\n                                { phone } \n                                {/*<p>24/7 availabe services</p>*/}\n                              </div>\n                            </Link>\n                            </li>\n                            <li className=\"support-header\" key={uuid.v4()} style={{ minWidth: 255 }}>\n                              <Link to=\"/\">\n                                <div className=\"icon-adjusted\"><FaEnvelope style={{\"transform\": \"rotateY(180deg)\" }}/></div>\n                                <div className=\"support-text\">\n                                { email } \n                              {/* <p>Ask for any question</p>*/}\n                                  </div>\n                              </Link>\n                            </li>\n                        </ul>\n                      </div>\n                    </li>\n                      <li className=\"notifa\">{ user && <Notification /> }</li>\n                      {\n                      <li className=\"loginmenu\" key={uuid.v4()}>\n                      {\n                        <Link className=\"text-dark\" to=\"/cart\" style={{ position: \"relative\" }}>\n                          <FaShoppingCart className=\"mr-1\"></FaShoppingCart>\n                          { !!cartCount && <span className=\"newmessage cart\">{cartCount}</span> }\n                        </Link>\n                      }\n                      </li>\n                    }\n                   \n\n                    {user && <Dropdown as=\"li\">\n                      <Dropdown.Toggle \n                        className=\"text-dark\"\n                        as=\"a\"\n                        id=\"dropdown-dashboard\"\n                      >\n                        <Suspense>\n                          <Image \n                            src={user?.user?.avatar ? `${process.env.REACT_APP_SERVER_URL}/documents/user-avatar/${user.user.avatar}`: UploadProfile }\n                            height={32}\n                            width={32}\n                            className=\"mr-1\"\n                            roundedCircle\n                          />\n                          <span>{user?.user?.first_name}</span>\n                        </Suspense>\n                       \n                      </Dropdown.Toggle>\n                      <Dropdown.Menu \n                        alignRight\n                        className=\"dropdown-menu-arrow\"\n                       \n                      >\n                        <Dropdown.Item href=\"/profile\">\n                          <AiOutlineProfile size={18} style={{ marginLeft: -10, marginRight: 5 }} />\n                          {' '}\n                          Profile\n                        </Dropdown.Item>\n                        <Dropdown.Item href=\"/orders\">\n                          <AiOutlineShopping size={18} style={{ marginLeft: -10, marginRight: 5 }} />\n                          {' '}\n                          Orders\n                        </Dropdown.Item>\n                        <Dropdown.Item href=\"/wallet\">\n                          <AiOutlineWallet size={18} style={{ marginLeft: -10, marginRight: 5 }} />\n                          {' '}\n                          Wallet\n                        </Dropdown.Item>\n                        <Dropdown.Item href=\"/offers\">\n                          <AiOutlinePercentage size={18} style={{ marginLeft: -10, marginRight: 5 }} />\n                          {' '}\n                          Offers\n                        </Dropdown.Item>\n                        <Dropdown.Item \n                          // href=\"#action.logout\"\n                          onClick={logout}>\n                          <AiOutlinePoweroff size={18} style={{ marginLeft: -10, marginRight: 5 }} />\n                          {' '}\n                          Logout\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>}\n                    {\n                      !user &&\n                      <>\n                          <li className=\"support-header registo\" key={uuid.v4()}>\n                        {\n                          <Link className=\"text-dark\" to=\"/register\">\n                            <FaUser className=\"mr-1\"></FaUser>\n                            <span>Register</span>\n                          </Link>\n                        }\n                        </li>\n                        <li key={uuid.v4()}>\n                        {\n                          <Link className=\"text-dark\" to=\"/login\">\n                            <FaSignInAlt className=\"mr-1\"></FaSignInAlt>\n                            <span>Login</span>\n                          </Link>\n                        }\n                        </li>\n                      </>\n                    }\n\n\n                  </ul>\n                  <div className=\"horizontal-header clearfix\">\n                    <Container>\n                      <Navbar.Toggle \n                        className=\"animated-arrow\" \n                        aria-controls=\"horizontal-navtoggle\"\n                        onClick={handleNavToggle}\n                      ><span></span></Navbar.Toggle>\n                      <Link className=\"smllogo mobile-logo\" to=\"/\"></Link>\n                      <a className=\"callusbtn\" href={`tel:${phone}`}>\n                        <FaPhone style={{\"transform\": \"rotateY(180deg)\", color: \"#6e82a9\" }} />\n                      </a>\n                    </Container>\n                  </div>\n                  \n                  <Navbar \n                        sticky=\"top\" \n                        as=\"div\" \n                        className=\"p-0\" \n                        style={{ alignItems: \"baseline\" }}\n                        expand=\"lg\"\n                        expanded={expanded}\n                      >\n                        <div className=\"sticky-wrapper\" id=\"sticky-wrapper\" style={{ height: 51.6 }} ref={navRef}>\n                          <div className=\"header-style horizontal-main bg-dark-transparent clearfix\">\n                            <div className=\"horizontal-mainwrapper container clearfix\">\n                              <Navbar.Collapse as=\"nav\" id=\"horizontal-navtoggle\" className=\"horizontalMenu clearfix d-md-flex w-100\">\n                                <div className=\"horizontal-overlapbg\" onClick={handleNavToggle}></div>\n                                <Nav \n                                  className=\"horizontalMenu-list\"\n                                  as=\"ul\"\n                                  defaultActiveKey=\"/\"\n                                >\n                                  <Nav.Item as=\"li\">\n                                    <LabTestSearch />\n                                  </Nav.Item>\n                                  <Nav.Item as=\"li\">\n                                    <Nav.Link href=\"/lab-tests\">Lab Tests</Nav.Link>\n                                  </Nav.Item>\n                                  <li className=\"d-none d-lg-block \">\n                                    <span>\n                                      <Link to=\"/upload-prescription\" className=\"btn btn-primary mb-lg-0\">\n                                        <IoMdCloudUpload className=\"mr-1\" />\n                                        Upload Prescription\n                                      </Link>\n                                    </span>\n                                  </li>\n                                 \n                                </Nav>\n                               \n                            </Navbar.Collapse>\n                            </div>\n                          </div>\n                        </div>\n                      </Navbar>\n                  <ul className=\"hor-support float-right custom\">\n                    <li>\n                     \n                        {/* <div className=\"search-background bg-transparent\">\n                          <div className=\"no-gutters\">\n                              <div className=\"new_bar\">\n                                <select className=\"form-control select2-show-search border-bottom-0 w-100 searchtop\" data-placeholder=\"Select\">\n                                    <optgroup label=\"Categories\">\n                                      <option>All</option>\n                                      <option value=\"1\">    Cholesterol Tests\n                                      </option>\n                                      <option value=\"2\"> Blood Sugar Tests\n                                      </option>\n                                      <option value=\"3\">\n                                          liver Function Tests\n                                      </option>\n                                      <option value=\"4\">\n                                          Kidney Function Tests\n                                      </option>\n                                      <option value=\"5\">\n                                          Basic Metabolic panel\n                                      </option>\n                                      <option value=\"6\">\n                                          Glucose Tests\n                                      </option>\n                                    </optgroup>\n                                </select>\n                              </div>\n                              <div className=\"sea_page\">\n                                <div className=\"input-group md-form form-sm form-2 pl-0\">\n                                    <input className=\"form-control my-0 py-1 red-border\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\n                                    <div className=\"input-group-append\">\n                                      <span className=\"input-group-text red lighten-3\" id=\"basic-text1\"><i className=\"fa fa-search text-grey\" aria-hidden=\"true\"></i></span>\n                                    </div>\n                              </div>\n                          </div>\n                        </div>\n                        </div> */}\n                    </li>\n\n\n                   \n                   \n\n                 \n                      {\n                      !user &&\n                      <>\n                          <li className=\"support-header\" key={uuid.v4()}>\n                        {\n                          <Link className=\"text-dark\" to=\"/register\">\n                            <FaUser className=\"mr-1\"></FaUser>\n                            <span>Register</span>\n                          </Link>\n                        }\n                        </li>\n                        <li key={uuid.v4()}>\n                        {\n                          <Link className=\"text-dark\" to=\"/login\">\n                            <FaSignInAlt className=\"mr-1\"></FaSignInAlt>\n                            <span>Login</span>\n                          </Link>\n                        }\n                        </li>\n                      </>\n                    }\n                   \n                   \n                  </ul>\n              </div>\n            </div>\n        </div>\n      </header>\n      <div className=\"horizontal-header clearfix\">\n        <Container>\n         \n          {/* <div className=\"clickaction\" onClick={(e) => toggleDiv(e)}>\n \n            <div className=\"icon-adjusted\"><FaPhone style={{\"transform\": \"rotateY(180deg)\" }}/></div>\n            { toggleIt &&\n           \n            <div>\n              <ul className=\"hor-support float-right rightpop\">\n                <li className=\"support-header\" key={uuid.v4()}>\n                  <Link to=\"/\">\n                    <div className=\"icon-adjusted\"><FaPhone style={{\"transform\": \"rotateY(180deg)\" }}/></div>\n                    <div className=\"support-text\">\n                      <h6>{ phone }</h6>\n                      <p>24/7 availabe services</p>\n                    </div>\n                  </Link>\n                  </li>\n                  <li className=\"support-header\" key={uuid.v4()} style={{ minWidth: 255 }}>\n                    <Link to=\"/\">\n                      <div className=\"icon-adjusted\"><FaEnvelope style={{\"transform\": \"rotateY(180deg)\" }}/></div>\n                      <div className=\"support-text\">\n                        <h6>{ email }</h6>\n                        <p>Ask for any question</p>\n                        </div>\n                    </Link>\n                  </li>\n              </ul>\n            </div> }\n            </div>\n           */}\n        </Container>\n      </div>\n\n      {\n        location.pathname === \"/lab-tests\" &&\n        <section>\n          <div \n            className=\"banner-2 cover-image sptb-2 sptb-tab bg-background2 banner-section p-0\"\n          >\n            <div className=\"header-text mb-0\">\n              <Carousel  indicators={false}>\n                {\n                  banners.map((banner) => (<Carousel.Item key={banner._id}>\n                    <Image \n                      className=\"d-block w-100\" \n                      src={`${process.env.REACT_APP_SERVER_URL}/documents/banner/${banner.banner}`}\n                      alt={banner.action} \n                    />\n                    <div className=\"bt_banner\">\n                      <a className=\"btn btn-outline-success mb-lg-2 transparent_btn\"\n                        href={banner.url}\n                        target=\"_blank\"\n                        rel=\"noreferer\"\n                      >\n                        {banner.action}\n                      </a>\n                    </div>\n                  </Carousel.Item>))\n                }\n              </Carousel>\n            </div>\n          </div>\n        </section>\n      }\n      { \n        !breadCrumExcludedPath[location.pathname] && <section>\n          <div className=\"bannerimg\">\n            <div className=\"header-text mb-0\">\n              <Container>\n                <div>\n                  {/* <BreadCrumbRouter routes={routes} className=\"text-center\" /> */}\n                  <h1 className=\"font-weight-bold\">{pageName ? pageName.split('?')[0] : \"\"}</h1>\n                </div>\n              </Container>\n            </div>\n          </div>\n        </section>\n      }\n    </div>\n    );\n}\n\nDefaultHeader.propTypes = {\n  logout: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  citySearch: PropTypes.object.isRequired,\n  // showSidebar: PropTypes.func.isRequired,\n};\n\nexport default DefaultHeader;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/subscription.js",["1034"],"import axios from \"axios\";\nimport { setAlert, removeAlert } from \"./alert\";\nimport { setErrorsList } from \"./errors\";\nimport {\n  SUBSCRIPTION_LINK_SUCCESS,\n  SUBSCRIPTION_LINK_FAIL,\n  LOADING_ON_EMAIL_SUBSCRIPTION,\n  SUBSCRIPTION_CALL_SUCCESS,\n  SUBSCRIPTION_CALL_FAIL,\n  LOADING_ON_CALL_SUBSCRIPTION,\n  REMOVE_ERRORS,\n  REMOVE_ALERT,\n} from \"./types\";\n\n\n// Verify Email\nexport const verifySubscription = (token) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(removeAlert());\n    dispatch({ type: REMOVE_ERRORS });\n    dispatch(loadingOnEmailVerification());\n    const res = await axios.post(`/api/subscription/${token}`, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: SUBSCRIPTION_LINK_SUCCESS,\n        payload: res.data.response\n      });\n    } else {\n      // dispatch(tokenInvalid());\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch(setAlert(res.data.message, \"danger\"));\n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n    return res.data?res.data:{status:false};\n  } catch (err) {\n    if(err.response){\n      dispatch({\n        type: SUBSCRIPTION_LINK_FAIL,\n        payload: { msg: err.response.data.message || err.response.statusText, status: err.response.status }\n      });\n    }\n  }\n};\n\n// Verify Email\nexport const callSubscription = (formData) => async dispatch => {console.log(formData)\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    try {\n      dispatch(removeAlert());\n      dispatch({ type: REMOVE_ERRORS });\n      dispatch(loadingOnCallSubscription());\n      const res = await axios.post(`/api/subscription`, formData, config);\n      if (res.data.status === true) {\n        dispatch({\n          type: SUBSCRIPTION_CALL_SUCCESS,\n          payload: res.data.response\n        });\n        dispatch(setAlert(res.data.message, \"success\"));\n      } else {\n        // dispatch(tokenInvalid());\n        const errors = res.data.errors;\n        if (errors) {\n          dispatch(setAlert(res.data.message, \"danger\"));\n          errors.forEach(error => {\n            dispatch(setErrorsList(error.msg, error.param));\n          });\n        }\n      }\n      return res.data?res.data:{status:false};\n    } catch (err) {\n      if(err.response){\n        dispatch({\n          type: SUBSCRIPTION_CALL_FAIL,\n          payload: { msg: err.response.data.message || err.response.statusText, status: err.response.status }\n        });\n      }\n    }\n  };\n\n// Dispatch Loading\nexport const loadingOnEmailVerification = () => async dispatch => {\n  await dispatch({ type: LOADING_ON_EMAIL_SUBSCRIPTION });\n};\n\n// Dispatch Loading\nexport const loadingOnCallSubscription = () => async dispatch => {\n    await dispatch({ type: LOADING_ON_CALL_SUBSCRIPTION });\n  };\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/verification.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Notifications/Alert.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Notifications/Errors.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/common.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/constants/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Routing/CustomerRoutes.js",["1035"],"// import React from 'react';\n// import Dashboard from 'views/Customer/Dashboard';\nimport LabTests from 'views/Customer/LabTests';\nimport Pages from 'views/Customer/Pages';\nimport Login from 'views/Auth/Login';\nimport Register from 'views/Auth/Register';\nimport Profile from 'views/Customer/Profile';\nimport Category from 'views/Customer/Category';\nimport { HabitDetails, HabitList } from 'views/Customer/Habits';\nimport { Packages, PackageDetails } from 'views/Customer/Packages';\nimport TestDetails from 'views/Customer/Tests';\nimport LT_Categories from 'views/Customer/LT_Categories';\nimport { LabsList, LabDetails, TestsList } from 'views/Customer/Labs';\nimport { AddAddress, EditAddress, ListAddress } from 'views/Customer/Address';\nimport { AddFamily, EditFamily, ListFamily } from 'views/Customer/Family';\nimport Cart from 'views/Customer/Cart/Cart';\nimport Offers from 'views/Customer/Offers';\n\nimport SampleCollection from 'views/Customer/SampleCollection/SampleCollection';\nimport { OrderReview, OrderList, OrderDetails } from 'views/Customer/Order';\nimport { UploadPrescription, Prescription, Labs as PrescriptionLabs } from 'views/Customer/Prescription';\nimport { ArticleDetails, ArticleList } from 'views/Customer/Article';\nimport { HealthRecordList, HealthRecordDetails } from 'views/Customer/HealthRecord';\nimport ChangeLabList from 'views/Customer/Billing/ChangeLabList';\nimport Wallet from 'views/Customer/Wallet';\nimport SavedCards from 'views/Customer/Wallet/SavedCards';\nimport { Success, Failed } from 'views/Customer/Payment';\nimport Reviews from 'views/Customer/Labs/Reviews';\nimport PrescriptionSuccess from 'views/Customer/Prescription/SuccessPage';\n\nconst CustomerRoutes = [\n  { path: \"/page/:cms_slug\", exact: true, name: \"Page\", component: Pages },\n  { path: \"/lab-tests\", exact: true, name: \"Lab Tests\", component: LabTests },\n  // { path: \"/lab-tests/categories\", exact: true, name: \"Categories List\", component: LT_Categories },\n  { path: \"/lab-tests/categories/:category_slug\", exact: true, name: \"Category\", component: Category },\n  { path: \"/lab-tests/habits\", exact: true, name: \"Habits\", component: HabitList },\n  { path: \"/lab-tests/habits/:habit_slug\", exact: true, name: \"Habit Details\", component: HabitDetails },\n  { path: \"/lab-tests/labs\", exact: true, name: \"Partner Labs\", component: LabsList },\n  { path: \"/lab-tests/labs/:lab_slug\", exact: true, name: \"Lab Details\", component: LabDetails },\n  { path: \"/lab-tests/labs/:lab_slug/tests\", exact: true, name: \"Tests Offered\", component: TestsList },\n  { path: \"/lab-tests/packages\", exact: true, name: \"Packages\", component: Packages },\n  { path: \"/lab-tests/packages/:package_slug\", exact: true, name: \"Package Details\", component: PackageDetails },\n  { path: \"/lab-tests/tests/:test_slug\", exact: true, name: \"Test Details\", component: TestDetails },\n  { path: \"/login\", exact: true, name: \"Login\", component: Login, restricted: true, loginEnabled: false },\n  { path: \"/register\", exact: true, name: \"Register\", component: Register, restricted: true, loginEnabled: false },\n  { path: \"/profile\", exact: true, name: \"Profile\", component: Profile, restricted: true, loginEnabled: true },\n  { path: \"/addresses/create\", exact: true, name: \"Add Address\", component: AddAddress, restricted: true, loginEnabled: true },\n  { path: \"/prescription\", exact: true, name: \"Prescriptions\", component: Prescription, restricted: true, loginEnabled: true },\n  { path: \"/prescription/labs\", exact: true, name: \"Labs\", component: PrescriptionLabs, restricted: true, loginEnabled: true },\n  { path: \"/upload-prescription\", exact: true, name: \"Upload Prescription\", component: UploadPrescription, restricted: true, loginEnabled: true },\n  { path: \"/addresses/:address_slug/edit\", exact: true, name: \"Edit Address\", component: EditAddress, restricted: true, loginEnabled: true },\n  { path: \"/addresses\", exact: true, name: \"Addresses\", component: ListAddress, restricted: true, loginEnabled: true },\n  { path: \"/members/create\", exact: true, name: \"Add Family\", component: AddFamily, restricted: true, loginEnabled: true },\n  { path: \"/members/:member_slug/edit\", exact: true, name: \"Edit Family\", component: EditFamily, restricted: true, loginEnabled: true },\n  { path: \"/members\", exact: true, name: \"Members\", component: ListFamily, restricted: true, loginEnabled: true },\n  { path: \"/cart\", exact: true, name: \"Cart\", component: Cart },\n  { path: \"/offers\", exact: true, name: \"Offers\", component: Offers },\n  { path: \"/sample-collection\", exact: true, name: \"Sample Collection\", component: SampleCollection, restricted: true, loginEnabled: true },\n  { path: \"/order-review\", exact: true, name: \"Order Review\", component: OrderReview, restricted: true, loginEnabled: true },\n  { path: \"/orders\", exact: true, name: \"Orders\", component: OrderList, restricted: true, loginEnabled: true },\n  { path: \"/orders/:slug\", exact: true, name: \"Order Details\", component: OrderDetails, restricted: true, loginEnabled: true },\n  { path: \"/article/:article_slug\", exact: true, name: \"Article\", component: ArticleDetails },\n  { path: \"/article/category/:article_category\", exact: true, name: \"Articles List\", component: ArticleList },\n  { path: \"/article\", exact: true, name: \"Articles List\", component: ArticleList },\n  { path: \"/health-records\", exact: true, name: \"Health Records\", component: HealthRecordList, restricted: true, loginEnabled: true },\n  { path: \"/health-records/:name\", exact: true, name: \"Health Record Details\", component: HealthRecordDetails, restricted: true, loginEnabled: true },\n  { path: \"/cart/change-lab\", exact: true, name: \"Change Lab\", component: ChangeLabList },\n  { path: \"/wallet\", exact: true, name: \"Wallet\", component: Wallet, restricted: true, loginEnabled: true },\n  { path: \"/saved-cards\", exact: true, name: \"Payment Methods\", component: SavedCards, restricted: true, loginEnabled: true },\n  { path: \"/order-success\", exact: true, name: \"Order Placed\", component: Success, restricted: true, loginEnabled: true },\n  { path: \"/payment-failed\", exact: true, name: \"Payment Failed\", component: Failed, restricted: true, loginEnabled: true },\n  { path: \"/lab-tests/labs/:lab_slug/reviews\", exact: true, name: \"Labs Reviews\", component: Reviews, restricted: true, loginEnabled: true },\n  { path: \"/prescription-upload-success\", exact: true, name: \"Prescription Uploaded\", component: PrescriptionSuccess, restricted: true, loginEnabled: true },\n];\n\n\nexport default CustomerRoutes;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/notifications.js",["1036"],"import axios from \"axios\";\nimport {\n  REMOVE_ERRORS,\n  NOTIFICATION_ERROR,\n  NOTIFICATION_PARAMATERS_UPDATE,\n  NOTIFICATION_LIST_UPDATED,\n  NOTIFICATION_VIEWED,\n  ADD_NOTIFICATION,\n  LOADING_ON_NOTIFICATION_LIST,\n  NOTIFICATION_LIST_LOAD_MORE,\n  RESET_NOTIFICATION,\n} from \"actions/types\";\nimport { logout } from \"actions/auth\";\n\n\n//Get Notification List\nexport const getNotifications = (notificationParams, loadMore) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(loadingOnNotificationList());\n    dispatch({ type: REMOVE_ERRORS });\n    notificationParams.query = notificationParams.query?notificationParams.query:\"\";\n    config.params = notificationParams;\n    const res = await axios.get(`/api/notification`,config);\n    if(loadMore) {\n      dispatch({\n        type: NOTIFICATION_LIST_LOAD_MORE,\n        payload: res.data.response[0]\n      });\n    } else {\n      dispatch({\n        type: NOTIFICATION_LIST_UPDATED,\n        payload: res.data.response[0]\n      });\n    }\n    dispatch({\n      type: NOTIFICATION_PARAMATERS_UPDATE,\n      payload: notificationParams\n    });\n  } catch (err) {\n    console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: NOTIFICATION_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n      }\n    }\n  }\n};\n\n//Add a newly received notification\nexport const addNotification = (notification) => async dispatch => {\n  try {\n    dispatch({\n      type: ADD_NOTIFICATION,\n      payload: notification\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n\nexport const notificationViewed = (notification_id, params) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.put(`/api/notification/${notification_id}/opened`, config);\n    if (res.data.status === true) {\n      dispatch(getNotifications(params));\n    }\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: NOTIFICATION_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n      }\n    };\n  }\n}\n\n// Dispatch Loading\nexport const loadingOnNotificationList = () => async dispatch => {\n  await dispatch({ type: LOADING_ON_NOTIFICATION_LIST });\n};\n\n// Dispatch Reset store\nexport const resetComponentStore = () => async dispatch => {\n  await dispatch({ type: RESET_NOTIFICATION });\n};","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/Notification.js",["1037","1038","1039","1040","1041","1042","1043","1044","1045"],"import React, { useState, Suspense, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from 'react-redux'\nimport { withRouter } from \"react-router-dom\"\nimport {\n  Image,\n  Row,\n  Col,\n  Dropdown\n} from \"react-bootstrap\";\nimport { Spinner } from \"reactstrap\";\nimport {\n  FaBell\n} from 'react-icons/fa';\nimport {\n  AiOutlineBell,\n  AiOutlineBulb,\n  AiOutlineCheckCircle,\n  AiOutlineClockCircle,\n  AiOutlineCloseCircle,\n  AiOutlineContainer,\n  AiOutlineCreditCard,\n  AiOutlineExclamation,\n  AiOutlineFileDone,\n  AiOutlinePauseCircle,\n  AiOutlinePercentage,\n  AiOutlineStock,\n  AiOutlineScissor,\n  AiOutlineUser\n} from 'react-icons/ai';\nimport { getNotifications, notificationViewed } from \"actions/customer/notifications\";\nimport Moment from \"react-moment\";\n\n\nconst Icons = {\n  \"default\": <AiOutlineBell size={18}/>,\n  \"new-order\": <AiOutlineFileDone size={18} />,\n  \"update-order\": <AiOutlineBulb size={18}/>,\n  \"price-change\": <AiOutlineStock size={18} />,\n  \"transaction\": <AiOutlineContainer size={18} />,\n  \"phlebotomist-assigned\": <AiOutlineCheckCircle size={18} />,\n  \"ambulatory-assigned\": <AiOutlineCheckCircle size={18} />,\n  \"order-cancelled\": <AiOutlineExclamation size={18} />,\n  \"credit-received\": <AiOutlineCreditCard size={18} />,\n  \"debit-received\": <AiOutlineCreditCard size={18} />,\n  \"order-hold\": <AiOutlineClockCircle size={18} />,\n  \"new-discount\": <AiOutlinePercentage size={18} />,\n  \"approved\": <AiOutlineCheckCircle size={18} />,\n  \"rejected\": <AiOutlineCloseCircle size={18} />,\n  \"payment-failed\": <AiOutlineExclamation size={18} />\n};\n\nconst colors = {\n  \"default\": {\n    backgroundColor: \"#f5cb44\",\n    color: \"#fff\",\n  },\n  \"new-order\": {\n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n  },\n  \"update-order\": {\n    backgroundColor: \"#3788c2\",\n    color: \"#fff\",\n  },\n  \"price-change\": {\n    backgroundColor: \"#3788c2\",\n    color: \"#fff\",\n  },\n  \"transaction\": {\n    backgroundColor: \"#f5cb44\",\n    color: \"#fff\",\n  },\n  \"phlebotomist-assigned\": {\n    backgroundColor: \"#3788c2\",\n    color: \"#fff\",\n  },\n  \"ambulatory-assigned\": {\n    backgroundColor: \"#3788c2\",\n    color: \"#fff\",\n  },\n  \"order-cancelled\": {\n    backgroundColor: \"#fc3d50\",\n    color: \"#fff\",\n  },\n  \"credit-received\": {\n    backgroundColor: \"#f5cb44\",\n    color: \"#fff\",\n  },\n  \"debit-received\": {\n    backgroundColor: \"#f5cb44\",\n    color: \"#fff\",\n  },\n  \"order-hold\": {\n    backgroundColor: \"#e67605\",\n    color: \"#fff\",\n  },\n  \"new-discount\": {\n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n  },\n  \"approved\": {\n    backgroundColor: \"#28a745\",\n    color: \"#fff\",\n  },\n  \"rejected\": {\n    backgroundColor: \"#fc3d50\",\n    color: \"#fff\",\n  },\n  \"payment-failed\": {\n    backgroundColor: \"#fc3d50\",\n    color: \"#fff\",\n  },\n}\n\nconst Notification = ({\n  getNotifications,\n  notificationViewed,\n  notifications: { count, unopened_notification, data },\n  loading,\n  history,\n}) => {\n\n  const initialParams = {    \n    limit: 10,\n    page: 1,\n  };\n\n  const [listParams, setListParams] = useState(initialParams);\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      if(subscribe) {\n        getNotifications(listParams);\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, []);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      if(subscribe) {\n        if(listParams.page !== 1 && count !== data.length && !loading) {\n          getNotifications(listParams, true);\n        }\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [listParams, getNotifications]);\n\n  const notificationClick = (e, notification_id, opened, route_name, variables) => {\n    e && e.preventDefault();\n    if(!opened) notificationViewed(notification_id, initialParams, !!route_name);\n    if(!!route_name) {\n      history.push({\n        pathname: `/${route_name}`,\n        state: { variables },\n      });\n      window.location.href = `/${route_name}`;\n      \n    }\n  }\n\n  const loadMore = () => {\n    setListParams((params) => ({\n      ...params,\n      page: params.page + 1,\n    }));\n  }\n\n  const handleScroll = (e) => {\n    let sub = e.target.scrollHeight - e.target.scrollTop;\n    sub = Math.floor(sub);\n    const bottom = sub === e.target.clientHeight;\n    if (bottom && count !== data.length && !loading) { loadMore() }\n  }\n\n  return (\n    <Dropdown as={\"li\"}>\n      <Dropdown.Toggle \n        as=\"span\"\n        className=\"text-dark remove-caret\"\n        id=\"dropdownMenu\" \n        data-toggle=\"dropdown\"\n      >\n        <span><FaBell /></span>\n        { unopened_notification > 0 && (<span className=\"newmessage\">{unopened_notification}</span>) }\n      </Dropdown.Toggle>\n      <Dropdown.Menu as=\"ul\" onScroll={handleScroll} className=\"noti_page\">\n        {\n          data.map((notification) => {\n            const kindOf = notification.kindOf;\n            const icon = Icons[kindOf];\n            return (\n              <Dropdown.Item \n                as=\"li\"\n                key={notification._id}\n                onClick={(e) => notificationClick(e, notification._id, notification.isOpened, notification?.redirection?.web, notification.variables)}\n                className={ !notification.isOpened && \"un-opened\" }\n              >\n                <span style={{ ...colors[kindOf] }}>\n                  {icon}\n                </span>\n                <span>\n                  <span>{notification.title}</span><br/>\n                  <span className=\"text-gray timestamp\"><Moment unix fromNow>{ Math.ceil(notification.created_at/1000) }</Moment></span>\n                </span>\n              </Dropdown.Item>\n            )\n          })\n        }\n        {\n          data.length === 0 && <div className=\"text-center text-gray\">\n            <span>Notification Box is Empty</span>\n          </div>\n        }\n        {\n          loading && (<Dropdown.Item className=\"text-center\" style={{ pointerEvents: \"none\" }}><Spinner/></Dropdown.Item>)\n        }\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n}\n\nNotification.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getNotifications: PropTypes.func.isRequired,\n  notificationViewed: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.notification.loadingNotificationList,\n  notifications: state.notification.notifications,\n  sortingParams: state.notification.sortingParams\n});\n\nexport default connect(mapStateToProps, {\n  getNotifications,\n  notificationViewed\n})(withRouter(Notification));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/cart/cart.js",["1046","1047"],"import axios from \"axios\";\nimport { setAlert } from \"actions/alert\";\nimport { setErrorsList } from \"actions/errors\";\nimport uniqBy from 'lodash/uniqBy';\nimport {\n  REMOVE_ERRORS,\n  ADDRESS_ERROR,\n  LOAD_PAGE,\n  LOADING_ON_CART_DETAILS,\n  LOADING_ON_COUPON_LIST,\n  LOADING_ON_COUPON_SUBMIT,\n  CART_DETAILS_UPDATED,\n  CART_PRODUCT_REMOVED_SUCCESS,\n  CART_COUNT,\n  CART_UNLOAD,\n  PRODUCT_ADDED_TO_CART,\n  ADD_TO_CART_ERROR,\n  EMPTY_CART,\n  COUPON_APPLIED,\n  COUPON_ERROR,\n  COUPON_LIST,\n  COUPON_PARAMATERS_UPDATE,\n} from \"actions/types\";\nimport { logout } from \"actions/auth\";\nimport { inJSON } from \"utils/validation\";\n\n//get Cart Product Details\nexport const getCartDetails = (cartId) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    dispatch(loadOnCartDetails());\n\n    // Checking If Guest User is having any local Cart\n    // Convert it into User Cart\n    if (localStorage.getItem(\"dummyCart\")) await convertGuestCartToUserCart(cartId);\n\n    dispatch({ type: REMOVE_ERRORS });\n\n    const res = await axios.get(\"/api/user-cart/\", config);\n\n    if (res.data.status) {\n      dispatch({\n        type: CART_DETAILS_UPDATED,\n        payload: res.data.response,\n      });\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: ADD_TO_CART_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n    return res.data ? res.data.response : { status: false };\n  } catch (err) {\n    if (err.response) {\n      if (err.response.data && err.response.data.tokenStatus === 0) {\n        dispatch(logout());\n      }\n    }\n  }\n};\n\n//get Cart Product Details\nexport const getCartCount = () => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n\n    const res = await axios.get(\"/api/user-cart/count\", config);\n\n    if (res.data.status) {\n      dispatch({\n        type: CART_COUNT,\n        payload: res.data.response,\n      });\n      return res.data.response;\n    }\n    return false;\n  } catch (err) {\n    if (err.response) {\n      if (err.response.data && err.response.data.tokenStatus === 0) {\n        dispatch(logout());\n      }\n    }\n  }\n};\n\n//get Cart Product Details\nexport const getGuestCartCount = () => async (dispatch) => {\n  try {\n    const dummyCart = inJSON(localStorage.getItem(\"dummyCart\"));\n    if(dummyCart) {\n      const count = dummyCart.length || 0;\n      dispatch({\n        type: CART_COUNT,\n        payload: { count },\n      });\n    }\n    dispatch({\n      type: CART_UNLOAD,\n    });\n  } catch (err) {\n    console.log(\"error\", err);\n  }\n};\n\n// Create Guest User Cart\nexport const getGuestUserCart = () => async (dispatch) => {\n  const dummyCart = inJSON(localStorage.getItem(\"dummyCart\"));\n  if(dummyCart) {\n    let subTotal = 0;\n    let tax = 0;\n    let homeCollectionCharges = 0;\n    let grossAmount = 0;\n    let dummyCartDetails = [];\n    let lab;\n    dummyCart.map((item) => {\n      lab = item.lab;\n      if (item.price) {\n        const price = item.price.amount;\n        const product = {\n          _id: item.productID,\n          price: item.price.amount,\n          title: item.name,\n          type: item.productType,\n        };\n        subTotal += price;\n        grossAmount += subTotal;\n        dummyCartDetails.push(product);\n      }\n    });\n    grossAmount += (tax + homeCollectionCharges);\n    dispatch({\n      type: CART_DETAILS_UPDATED,\n      payload: {\n        lab,\n        products: dummyCartDetails,\n        subTotal,\n        tax,\n        grossAmount,\n        homeCollectionCharges,\n      },\n    });\n  }\n};\n\nconst convertGuestCartToUserCart = async (cartId) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  let guestCart = inJSON(localStorage.getItem(\"dummyCart\")) || [];\n  for (const cart of guestCart) {\n    let productObject = {\n      productID: cart.productID,\n      productType: cart.productType,\n      lab: cart.lab,\n    };\n    await axios.post(\"/api/user-cart/\", productObject, config);\n  }\n  localStorage.removeItem('dummyCart');\n};\n\nexport const getCouponDetails = (couponParams) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  couponParams.query = couponParams.query ? couponParams.query : \"\";\n  config.params = couponParams;\n\n  try {\n    dispatch({ type: LOADING_ON_COUPON_LIST });\n    dispatch({ type: REMOVE_ERRORS });\n    const res = await axios.get(\"/api/user-coupon\", config);\n    if (res.data.status) {\n      dispatch({\n        type: COUPON_PARAMATERS_UPDATE,\n        payload: couponParams,\n      });\n      dispatch({\n        type: COUPON_LIST,\n        payload: res.data.response[0],\n      });\n    }\n    return res.data ? res.data.response : { status: false };\n  } catch (err) {\n    // console.log(err);\n    if (err.response) {\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n    }\n  }\n};\n\n// Apply Coupon\nexport const applyCoupon = (cartId, couponCode) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    dispatch({ type: LOADING_ON_COUPON_SUBMIT });\n    dispatch({ type: REMOVE_ERRORS });\n    couponCode = {\n      code: couponCode,\n    };\n\n    const res = await axios.put(`/api/user-cart/${cartId}/coupon`, couponCode, config);\n    if (res.data.status) {\n      dispatch({\n        type: COUPON_APPLIED,\n        // payload: res.data.response\n      });\n      dispatch(setAlert(res.data.message, \"success\"));\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: COUPON_ERROR });\n        dispatch(setAlert(errors[0].msg, \"danger\"));\n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n    return res.data;\n  } catch (err) {\n    if (err.response) {\n      dispatch({\n        type: COUPON_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n      dispatch(setAlert(err.response.data.errors.msg, \"danger\"));\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n    }\n  }\n};\n\n// Remove Cart Coupon\nexport const removeCoupon = (cartId) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    dispatch({ type: LOADING_ON_COUPON_SUBMIT });\n    const res = await axios.delete(`api/user-cart/${cartId}/coupon`, config);\n    if (res.data.status) {\n      dispatch({\n        type: COUPON_APPLIED,\n        payload: res.data.response\n      });\n      dispatch(setAlert(res.data.message, \"success\"));\n      return true;\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: COUPON_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n      return false;\n    }\n  } catch (err) {\n    if (err.response) {\n      dispatch({\n        type: COUPON_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n    }\n  }\n};\n\n\n//  Remove Product from Cart\nexport const removeProductFromCart = (cartId, productId, productType, isLoggedIn) => async (\n  dispatch\n) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    data: {\n      productType\n    }\n  };\n\n  try {\n    dispatch(loadOnCartDetails());\n    dispatch({ type: REMOVE_ERRORS });\n\n    if(isLoggedIn) {\n      const url = `/api/user-cart/${cartId}/item/${productId}`;\n      const res = await axios.delete(url, config);\n\n      if (res.data.status) {\n        dispatch({ type: CART_PRODUCT_REMOVED_SUCCESS, payload: res.data.response });\n        dispatch(getCartCount());\n        return true;\n      }\n      else {\n        console.log(\"unable to remove item from the cart\", res.data);\n        return false;\n      }\n    } else {\n      const dummyCart = inJSON(localStorage.getItem('dummyCart'));\n      if(dummyCart) {\n        const dummyCartDetails = [];\n        let subTotal = 0;\n        let tax = 18.75;\n        let homeCollectionCharges = 0;\n        let grossAmount = 0;\n        const remainingProducts = dummyCart.filter(item => {\n          if(item.productID === productId) {\n            return false;\n          }\n          if (item.price) {\n            const product = {\n              price: item.price,\n              title: item.name,\n              type: item.productType,\n              _id: item.productID,\n            };\n            subTotal += item.price;\n            grossAmount += subTotal;\n            dummyCartDetails.push(product);\n          }\n          return true;\n        });\n        grossAmount += (tax + homeCollectionCharges);\n        if(remainingProducts.length) {\n          // console.log(\"set dummy cart\"); \n          dispatch({\n            type: CART_DETAILS_UPDATED,\n            payload: {\n              products: dummyCartDetails,\n              subTotal,\n              tax,\n              grossAmount,\n              homeCollectionCharges,\n            },\n          });\n          localStorage.setItem(\"dummyCart\", JSON.stringify(remainingProducts));\n          dispatch(getGuestCartCount());\n        }\n        else {\n          dispatch({\n            type: CART_DETAILS_UPDATED,\n            payload: {},\n          });\n          dispatch({\n            type: CART_COUNT,\n            payload: { count: 0 },\n          });\n          localStorage.removeItem(\"dummyCart\");\n        }\n      } else {\n        // console.log(\"if no dummy cart exist clear dummy cart\");\n        dispatch({\n          type: CART_DETAILS_UPDATED,\n          payload: {}\n        });\n        dispatch({\n          type: CART_COUNT,\n          payload: { count: 0 },\n        });\n        localStorage.removeItem(\"dummyCart\");\n      }\n    }\n  } catch (err) {\n    // console.log(err);\n    if (err.response) {\n      // dispatch(setAlert(err.data.message, \"danger\"));\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      dispatch(setAlert(err.data.message, \"danger\"));\n    }\n  }\n};\n\n// Empty Cart\nexport const emptyCart = (cartId) => async (\n  dispatch\n) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    dispatch({ type: REMOVE_ERRORS });\n    const url = `/api/user-cart/${cartId}/empty-cart`;\n\n    const res = await axios.delete(url, config);\n\n    if (res.data.status) {\n      dispatch({\n        type: EMPTY_CART,\n      });\n      dispatch({\n        type: CART_COUNT,\n        payload: { count: 0 },\n      });\n      dispatch(setAlert(res.data.message, \"success\"));\n      localStorage.removeItem('dummyCart');\n      return res.data;\n    }\n  } catch (err) {\n    if (err.response) {\n      dispatch(setAlert(err.data.message, \"danger\"));\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n    }\n  }\n};\n\n// Add Product To Cart\nexport const addToCart = (productObject) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    dispatch(loadOnCartDetails());\n    dispatch({ type: REMOVE_ERRORS });\n\n    const res = await axios.post(\"/api/user-cart/\", productObject, config);\n    if (res.data.status) {\n      dispatch({\n        type: PRODUCT_ADDED_TO_CART,\n        payload: res.data.response\n      });\n      dispatch(setAlert(res.data.message, \"success\"));\n      const count = await dispatch(getCartCount());\n      if(count && count.count === 1) window.location.href = \"/cart\";\n      return res.data;\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: ADD_TO_CART_ERROR });\n        dispatch(setAlert(errors[0].msg, \"danger\"));\n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n  } catch (err) {\n    // console.log(err);\n    if (err.response) {\n      // if(err.response.data && err.response.data.errors.reason === \"PRESCRIPTION_NEEDED\")\n      // {\n      // if (\n      //   window.confirm(\n      //     `Upload prescription to continue`\n      //   )\n      // ) {\n      //   history.push(\"/prescription\");\n      // }\n      // }\n      dispatch({\n        type: ADD_TO_CART_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n    }\n  }\n};\n\nexport const createGuestCart = (productObject) => (dispatch) => {\n  try {\n    const dummyCart = inJSON(localStorage.getItem(\"dummyCart\"));\n    if(dummyCart) {\n      if(dummyCart.length && dummyCart.length >= process.env.REACT_APP_MAX_CART_LIMIT) {\n        dispatch(setAlert('You have reached the limit. Please order some items or remove them to add new.', \"danger\"));\n        return false;\n      }\n      const isSameLab = dummyCart.find(item => item.lab === productObject.lab);\n      if(dummyCart.length && !isSameLab) {\n        dispatch(setAlert(\"You already have some items in the cart from other lab. Either purchase them first or remove from the cart to continue.\", \"danger\"));\n        return false;\n      }\n      const isDuplicateItem = dummyCart.find(item => item.productID === productObject.productID);\n      if(isDuplicateItem) {\n        console.log(\"Same item cannot be added twice.\");\n        return false;\n      }\n    }\n    const items = dummyCart || [];\n    items.push(productObject);\n    localStorage.setItem(\"dummyCart\", JSON.stringify(items));\n    if(items.length === 1) window.location.href = \"/cart\";\n    return true;\n  } catch(err) {\n    console.log(err);\n  }\n};\n\n\n// Create Cart Based on Prescription\nexport const addLabToCart = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n let order_id = formData.order_id;\n let lab = { changeLab: formData.changeLab, lab: formData.lab_id }\n  try {\n    dispatch(loadOnCartDetails());\n    dispatch({ type: REMOVE_ERRORS });\n\n    const res = await axios.put(`/api/user-cart/prescription/${order_id}`, lab, config);\n    if (res.data.status) {\n      dispatch({\n        type: PRODUCT_ADDED_TO_CART,\n        payload: res.data.response\n      });\n      dispatch(setAlert(res.data.message, \"success\"));\n      return res.data;\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: ADD_TO_CART_ERROR });\n        dispatch(setAlert(errors[0].msg, \"danger\"));\n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n  } catch (err) {\n    // console.log(err);\n    if (err.response) {\n      dispatch({\n        type: ADD_TO_CART_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      if(err.response.data && err.response.data.tokenStatus === 2){\n        let items = []\n        let product = localStorage.getItem('dummyCart') ? JSON.parse(localStorage.getItem('dummyCart')) : { }\n        items.push(product);\n        items.push(formData);\n        localStorage.removeItem('dummyCart');\n        let uniqProduct = uniqBy(items.flat(Infinity), 'productID');\n        localStorage.setItem('dummyCart', JSON.stringify(uniqProduct));\n        let arr = JSON.parse(localStorage.getItem('dummyCart'));\n        console.log(arr)\n      }\n    }\n  }\n};\n\n// Update Cart Based on change lab\nexport const changeLabToCart = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n let lab = { \n   changeLab: formData.changeLab, \n   lab: formData.lab_id,\n  //  cart_id: formData.cart_id\n  }\n  try {\n    dispatch(loadOnCartDetails());\n    dispatch({ type: REMOVE_ERRORS });\n\n    const res = await axios.put(`/api/user/change-lab`, lab, config);\n    if (res.data.status) {\n      dispatch({\n        type: PRODUCT_ADDED_TO_CART,\n        payload: res.data.response\n      });\n      dispatch(setAlert(res.data.message, \"success\"));\n      return res.data;\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: ADD_TO_CART_ERROR });\n        dispatch(setAlert(errors[0].msg, \"danger\"));\n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n  } catch (err) {\n    // console.log(err);\n    if (err.response) {\n      dispatch({\n        type: ADD_TO_CART_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      if(err.response.data && err.response.data.tokenStatus === 2){\n        let items = []\n        let product = localStorage.getItem('dummyCart') ? JSON.parse(localStorage.getItem('dummyCart')) : { }\n        items.push(product);\n        items.push(formData);\n        localStorage.removeItem('dummyCart');\n        let uniqProduct = uniqBy(items.flat(Infinity), 'productID');\n        localStorage.setItem('dummyCart', JSON.stringify(uniqProduct));\n        let arr = JSON.parse(localStorage.getItem('dummyCart'));\n      }\n    }\n  }\n};\n\n// Dispatch Loading\nexport const loadOnCartDetails = () => async (dispatch) => {\n  await dispatch({ type: LOADING_ON_CART_DETAILS });\n};\n\nexport const setErrors = (errors) => async (dispatch) => {\n  if (errors) {\n    dispatch({ type: ADDRESS_ERROR });\n    dispatch(setAlert(\"Please correct the following errors\", \"danger\"));\n    errors.forEach((error) => {\n      dispatch(setErrorsList(error.msg, error.param));\n    });\n  }\n};\n\n// Load Page/Show Page\nexport const loadPage = () => async (dispatch) => {\n  await dispatch({ type: LOAD_PAGE });\n};\n\n// reset errors\nexport const removeErrors = () => async (dispatch) => {\n  dispatch({ type: REMOVE_ERRORS });\n};\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/BreadCrumb/BreadCrumbRouter.js",["1048"],"import React from \"react\";\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'\nimport { Link, useLocation, matchPath } from 'react-router-dom';\nimport Item from \"./Item\";\nimport ItemContainer from \"./ItemContainer\";\n\n// --- Code Picked From CoreUI Breadcrumbs\n\nconst getPaths = pathname => {\n  const paths = ['/']\n  if (pathname === '/') return paths;\n  pathname.split('/').reduce((prev, curr) => {\n    const currPath = `${prev}/${curr}`\n    paths.push(currPath)\n    return currPath\n  })\n  return paths\n}\n\nconst unslug = (slug) => {\n  const regex = /\\-/g;\n  const unslugged_str = slug.replace(regex, ' ');\n  return unslugged_str;\n}\n\nconst RouteItem = ({name, currPath}, fullCurrPath) => {\n  if (currPath === fullCurrPath) {\n    const split = currPath.split(\"/\");\n    let new_name = name;\n    if(split.length > 1) new_name = split[split.length - 1] === name.toLowerCase() ? name: split[split.length - 1];\n    return <Item key={currPath} active><span style={{ textTransform: \"capitalize\" }}>{unslug(new_name)}</span></Item>\n  } else {\n    return <Item key={currPath}>\n      <Link to={currPath} className=\"breadcrumb-links\">\n        {name}\n      </Link>\n    </Item>\n  }\n}\n\nconst BreadCrumbRouter = props => {\n\n  const {\n    className,\n    innerRef,\n    routes,\n    ...attributes\n  } = props\n\n  let items = null;\n\n  const classes = classNames(className)\n\n  const location = useLocation()\n\n  if(routes) {\n    const currPath = location.pathname\n    const paths = getPaths(currPath)\n    const currRoutes = paths.map(currPath => {\n      const route = routes.find(route => matchPath(currPath, {\n        path: route.path,\n        exact: route.exact\n      }))\n      return { ...route, currPath }\n    }).filter(route => route && route.name)\n    const currItems = currRoutes.map(route => {\n      return RouteItem(route, currPath)\n    });\n    items = currItems;\n  }\n\n  return <ItemContainer\n      className={classes} \n      {...attributes}\n      ref={innerRef}\n    >\n    { items }\n  </ItemContainer>\n\n}\n\nBreadCrumbRouter.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  routes: PropTypes.array\n}\n\nexport default BreadCrumbRouter;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/footer.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Searches/LabTestSearch.js",["1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  searchLabTests,\n  resetComponentStore,\n} from 'actions/lab_search';\nimport {\n  getCategoriesList,\n} from 'actions/customer/lt_categories';\nimport slugify from \"react-slugify\";\nimport AsyncSelect from \"react-select/async\";\nimport { Row, Col, Form, Dropdown } from \"react-bootstrap\";\nimport { FaSearch } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\n\nconst LabTestSearch = ({\n  sortingParams,\n  searchLabTests,\n  categoryParams,\n  // getCategoriesList,\n  // testCategories,\n  // categoryList: { data, page, count },\n  resetComponentStore,\n}) => {\n  const [onlyOnce, setOnce] = useState(true);\n  const [defaultOptions, setDefaults] = useState([]);\n  const [selectedCategory, setSelected] = useState({ type: \"none\", value: \"all\", label: \"All\" });\n  let delayTimer;\n\n  // useEffect(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     getCategoriesList(categoryParams);\n  //     setOnce(false);\n  //   }\n  // }, [resetComponentStore, setOnce, getCategoriesList]);\n\n  const execWithDelay = (cb, input) => (delay = 750) => {\n    clearTimeout(delayTimer);\n    return new Promise((resolve) => {\n      delayTimer = setTimeout(() => {\n        resolve(cb(input));\n      }, delay);\n    })\n  }\n\n  const loadOptions = inputValue => {\n    const params = {\n      ...sortingParams,\n      filters: [\"search\"],\n      query: {\n        [\"search\"]: {\n          \"name\": {\n            value: inputValue || \"\",\n            type: \"String\",\n          },\n        },\n      }\n    };\n    switch(selectedCategory.value) {\n      case \"all\":\n      case \"lab_tests\":\n        return searchLabTests(params).then((res) => {\n          if (res.status) {\n            const data = res.response;\n            const result = data.map((test) => ({\n              value: test._id,\n              label: test.name,\n              type: test.type,\n            }));\n            setDefaults([...result]);\n            return result;\n          }\n        });\n      case \"medicines\":\n        // break;\n      case \"nursing_services\":\n        // break;\n      case \"health_and_food\":\n        // break;\n      default:\n        return [];\n    }\n    // return searchLabTests(params).then((res) => {\n    //   if (res.status) {\n    //     const data = res.response;\n    //     const result = data.map((test) => ({\n    //       value: test._id,\n    //       label: test.name,\n    //       type: test.type,\n    //     }));\n    //     return result;\n    //   }\n    // });\n  }\n\n  // const loadCategoryOptions = inputValue => {\n  //   const params = {\n  //     ...categoryParams,\n  //     filters: [\"search\"],\n  //     query: {\n  //       [\"search\"]: {\n  //         \"name\": {\n  //           value: inputValue || \"\",\n  //           type: \"String\",\n  //         },\n  //       },\n  //     }\n  //   };\n  //   return getCategoriesList(params);\n  // }\n\n  //########################## handle select ##############################\n  const handleSelect = name => (value) => {\n    let fieldValue = [];\n    if (value) {\n      if (value.length) {\n        fieldValue = value.map((item) => (item.value));\n      }\n      else if (value.value) {\n        fieldValue = value.value;\n      }\n    }\n    switch (name) {\n      case \"searchLabTest\":\n        // Open New Window\n        break;\n    }\n  };\n\n  const handleSelectedCategory = (e, category, label, type) => {\n    e.preventDefault();\n    setSelected({ type, value: category, label });\n    setDefaults([]);\n  }\n \n  return (\n    <div className=\"search-background bg-transparent\" style={{ color: 'initial' }}>\n      <div className=\" no-gutters\">\n        {/* <Col className=\"mb-0\" style={{ display: \"flex\", flex: 1 }}> */}\n        <div className=\"new_bar\">\n          <Dropdown\n            as=\"span\" \n            className=\"select2 select2-container select2-container--default\"\n            style={{ height: 43 }}\n          >\n            <span className=\"selection\">\n              <Dropdown.Toggle \n                className=\"form-control select2-show-search border-bottom-0 w-100 searchtop\" \n                as=\"span\"\n                role=\"combobox\"\n              >\n                <span className=\"select2-selection__rendered\" aria-readonly=\"true\" role=\"textbox\" title={selectedCategory.label}>{selectedCategory.label}</span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu className=\"search-category\">\n                <div style={{ padding: \"6px\"}}><strong>Categories</strong></div>\n                <Dropdown.Item onClick={ (e) => { handleSelectedCategory(e, \"all\", \"All\", \"none\") } }>\n                  <span>All</span>\n                </Dropdown.Item>\n                <Dropdown.Item key={`category_lab_test`}  onClick={ (e) => { handleSelectedCategory(e, \"lab_tests\", \"Lab Tests\", \"category\") } }>\n                  <span>Lab Tests</span>\n                </Dropdown.Item>\n                <Dropdown.Item key={`category_medicines`}  onClick={ (e) => { handleSelectedCategory(e, \"medicines\", \"Medicines\", \"category\") } }>\n                  <span>Medicines</span>\n                </Dropdown.Item>\n                <Dropdown.Item key={`category_nursing_services`}  onClick={ (e) => { handleSelectedCategory(e, \"nursing_services\", \"Nursing Servcies\", \"category\") } }>\n                  <span>Nursing Services</span>\n                </Dropdown.Item>\n                <Dropdown.Item key={`category_health_and_food`}  onClick={ (e) => { handleSelectedCategory(e, \"health_and_food\", \"Health and Food\", \"category\") } }>\n                  <span>Health and Food</span>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </span>\n          </Dropdown>\n        </div>\n        <div className=\"sea_page\">\n          <AsyncSelect \n            placeholder=\"Search Lab Tests...\"\n            cacheOptions\n            defaultOptions={defaultOptions}\n            styles={customStyles}\n            onChange={handleSelect(\"searchLabTest\")}\n            loadOptions={(input) => execWithDelay(loadOptions, input)() }\n            components={{\n              DropdownIndicator: Search,\n              IndicatorSeparator: null,\n              Option,\n              MenuList,\n            }}\n          />\n        </div>\n        {/* </Col> */}\n      </div>\n    </div>\n  )\n}\n\nconst categoryStyles = {\n  indicatorsContainer: () => ({\n    display: \"none\"\n  }),\n  menu: () => ({\n    display: 'none'\n  })\n}\n\nconst customStyles = {\n  control: (provided) => ({\n    ...provided,\n    border: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    height: 35,\n  }),\n  option: (provided) => ({\n    ...provided,\n    \"padding\": 4,\n  }),\n  indicatorsContainer: (provided) => ({\n    ...provided,\n    backgroundColor: \"#f3f3fa\",\n    padding: 0,\n    borderRadius: 4,\n  }),\n  dropdownIndicator: () => ({\n    color: \"#cccccc\",\n    padding: 4,\n    textAlign: \"center\",\n    marginLeft: 4,\n  }),\n  menuList: (provided) => ({\n    ...provided,\n    padding: 4,\n    listStyle: \"none\",\n    overflowY: 'scroll',\n    overflowX: 'hidden'\n  }),\n  menu: (provided) => ({\n    ...provided,\n    zIndex: 1021\n  })\n}\n\nconst Search = ({ innerProps, innerRef, getStyles, ...props }) => {\n  const styles = getStyles(\"dropdownIndicator\", props);\n  return(\n    <div ref={innerRef} style={ {...styles, padding:\".375rem .75rem\"} } {...innerProps} >\n      <FaSearch size={14} />\n    </div>\n  )\n}\n\nconst Option = ({\n  data,\n  children,\n  label,\n  value,\n  innerRef,\n  innerProps,\n  getStyles,\n  ...props\n}) => {\n  const styles = getStyles(\"option\", props);\n  return (\n    <Link \n      to={{\n        pathname: `/lab-tests/${data.type}s/${slugify(label)}`,\n        hash: \"#content\",\n        search: `?search_value=${value}&search_type=${data.type}`,\n      }}\n      target=\"_blank\"\n      ref={innerRef} \n      style={styles}\n      {...innerProps}\n    >\n    <Row>\n      <Col sm={10} xs={8}>\n        <span>{children}</span>\n      </Col>\n      <Col sm={2} xs={4}>\n        <span className=\"text-muted\">{data.type.toUpperCase()}</span>\n      </Col>\n    </Row>\n  </Link>)\n}\n\nconst MenuList = ({\n  innerProps,\n  innerRef,\n  getStyles,\n  children,\n  ...props\n}) => {\n  const styles = getStyles(\"menuList\", props);\n  return <div ref={innerRef} style={ styles } {...innerProps}>{children}</div>\n}\n\nLabTestSearch.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  sortingParams: PropTypes.object.isRequired,\n  searchLabTests: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.labSearch.loadingListData,\n  testList: state.labSearch.testList,\n  sortingParams: state.labSearch.sortingParams,\n  categoryParams: state.ltCategories.sortingParams,\n  categoryList: state.ltCategories.categoryList,\n  testCategories: state.ltCategories.testCategories,\n})\n\nexport default connect(mapStateToProps, {\n  searchLabTests,\n  getCategoriesList,\n  resetComponentStore,\n})(React.memo(LabTestSearch));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Searches/CitySearch.js",["1061","1062","1063","1064","1065","1066","1067","1068"],"import React, { useEffect, Suspense, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getCityList, updateCity, resetComponentStore } from \"actions/city_search\";\nimport { Modal, Form, Image, Collapse } from \"react-bootstrap\";\nimport { Spinner } from \"reactstrap\";\nimport { FaSearch } from \"react-icons/fa\";\nimport Jaipur from \"assets/images/city/Jaipur.png\";\nimport Jaisalmer from \"assets/images/city/Jaisalmer.png\";\nimport Jodhpur from \"assets/images/city/Jodhpur.png\";\nimport Ajmer from \"assets/images/city/Ajmer.png\";\nimport Alwar from \"assets/images/city/Alwar.png\";\nimport Kota from \"assets/images/city/Kota.png\";\nimport Udaipur from \"assets/images/city/Udaipur.png\";\nconst CityIcon = {\n  \"Jaipur\": Jaipur,\n  \"Jaisalmer\": Jaisalmer,\n  \"Jodhpur\": Jodhpur,\n  \"Ajmer\": Ajmer,\n  \"Alwar\": Alwar,\n  \"Kota\": Kota,\n  \"Udaipur\": Udaipur\n};\n\nconst CitySearch = ({\n  onClose = () => {},\n  getCityList,\n  updateCity,\n  currentCity,\n  loadingList,\n  customer,\n  sortingParams,\n  resetComponentStore,\n  show=false,\n}) => {\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'name',\n    ascending: 'asc',\n    query: {\n      \"status\": {\n        value: 1,\n        type: \"Number\"\n      }\n    },\n    filters: [\"status\"]\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [city, setCityList] = useState([]);\n  const [popularCities, setPopularCities] = useState([]);\n  const [openList, setOpenList] = useState(false);\n  let delayTimer;\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe) {\n        if(onlyOnce) {\n          resetComponentStore();\n          setOnce(false);\n        }\n        getCityList({ \n          ...listParams, \n          query: {\n            ...listParams.query,\n            \"is_popular\": {\n              type: \"Boolean\",\n              value: true,\n            }\n          },\n          filters: [\"status\", \"is_popular\"]\n        }).then((res) => {\n          if (res && res.status) {\n            const data = res.response[0].data;\n            const result = data.map((city) => ({\n              value: city._id,\n              label: city.city,\n              place: city.place_id,\n              icon: city.icon,\n            }));\n            if(subscribe) setPopularCities([...result]);\n          }\n        });\n        getCityList({ \n          ...listParams, \n          limit: 100,\n          query: {\n            ...listParams.query,\n            \"is_popular\": {\n              type: \"Boolean\",\n              value: false,\n            }\n          },\n          filters: [\"status\", \"is_popular\"]\n        }).then((res) => {\n          if (res && res.status) {\n            const data = res.response[0].data;\n            const result = data.map((city) => ({\n              value: city._id,\n              label: city.city,\n              place: city.place_id,\n            }));\n            if(subscribe) setCityList([...result]);\n          }\n        });\n      }\n    }\n    asyncCall();\n    return () => { \n      subscribe = false;\n    }\n  }, []);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && !onlyOnce) {\n        getCityList(listParams).then((res) => {\n          if (res && res.status) {\n            const data = res.response[0].data;\n            const popular = [];\n            const normal = [];\n            data.forEach((city) => {\n              if(city.is_popular) {\n                popular.push({\n                  value: city._id,\n                  label: city.city,\n                  place: city.place_id,\n                  icon: city.icon,\n                })\n              } else {\n                normal.push({\n                  value: city._id,\n                  label: city.city,\n                  place: city.place_id,\n                })\n              }\n            });\n            if(subscribe) {\n              setPopularCities([...popular]);\n              setCityList([...normal]);\n            }\n          }\n        });\n      }\n    }\n    asyncCall();\n    return () => { \n      subscribe = false;\n    }\n  }, [getCityList, listParams, resetComponentStore, setOnce]);\n\n  const execWithDelay = (e, cb) => (delay = 750) => {\n    const input = e.target.value;\n    clearTimeout(delayTimer);\n    return new Promise((resolve) => {\n      delayTimer = setTimeout(() => {\n        resolve(cb(input));\n      }, delay);\n    })\n  }\n\n  const loadOptions = inputValue => {\n    const params = {\n      ...sortingParams,\n      limit: 100,\n      filters: [\"status\", \"search\"],\n      query: {\n        \"status\": {\n          value: 1,\n          type: \"Number\"\n        },\n        [\"search\"]: {\n          \"city\": {\n            value: inputValue || \"\",\n            type: \"String\",\n          },\n        },\n      }\n    };\n    setListParams((p) => ({...p, ...params }));\n  }\n\n  //########################## handle select ##############################\n  const handleSelect = (e, value) => {\n    e.preventDefault();\n    let fieldValue = [];\n    if (value) {\n      fieldValue = value.value;\n    }\n    const customer_id = customer ? customer._id: null;\n    updateCity({ ...value, customer_id }, true, !!customer_id).then(() => onClose());\n  };\n\n  const openCitiesList = e => {\n    e.preventDefault();\n    setOpenList(!openList);\n  }\n\n  return (\n    <Modal \n      show={show}\n      backdrop=\"static\"\n      className=\"fade citypop \"\n      onHide={onClose}\n    >\n      <Modal.Header className=\"pb-0 border-bottom-0\" closeButton>\n        <Modal.Title className=\"w-100\" >\n            <Form>\n              <Form.Group controlId=\"search\" className=\"homepa\">\n                <Form.Control \n                  maxLength={50}\n                  name=\"search\"\n                  placeholder=\"Search Your City\"\n                  onChange={(e) => execWithDelay(e, loadOptions)()}\n                />\n                <div className=\"search_icon\">\n                  <FaSearch />\n                </div>\n              </Form.Group>\n            </Form>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"all_city\">\n        { popularCities.length > 0 &&  <h3>Popular Cities</h3> }\n        {\n          loadingList? <div className=\"w-100 p-2 text-center\"> <Spinner color=\"primary\" size=\"sm\" /></div>: (\n            <>\n              { \n                popularCities.length > 0 && (\n                  <ul className=\"city_lists\">\n                    {\n                      popularCities.map(item => {\n                        return (\n                        <li \n                          key={item.value} \n                          name=\"searchCity\" \n                          onClick={(e) => handleSelect(e, item) }>\n                            <a href=\"#\">\n                              <span>\n                                <Suspense>\n                                  <Image alt={item.label} className=\"sc-dvCyap crAZss\" src={`${process.env.REACT_APP_SERVER_URL}/documents/city/${item.icon}`} />\n                                </Suspense>\n                              </span>\n                              {item.label}\n                            </a>\n                        </li>)\n                      })\n                    }\n                  </ul>\n                )\n              }\n              { city.length > 0 && <a href=\"#\" data-toggle=\"collapse\" onClick={openCitiesList}>View All Cities</a> }\n              <Collapse in={openList}>\n                <div id=\"cities\">\n                  <ul className=\"view_all_city\">\n                  {\n                    city.map(item => <li key={item.value}><a href=\"#\" onClick={(e) => handleSelect(e, item) }>{item.label}</a></li>)\n                  }\n                  </ul>\n                </div>\n              </Collapse>\n            </>\n          )\n        }\n        </div>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nCitySearch.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  cityList: PropTypes.object.isRequired,\n  getCityList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  updateCity: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.citySearch.loadingCity,\n  loadingList: state.citySearch.loadingListData,\n  cityList: state.citySearch.cityList,\n  customer: state.auth.user,\n  currentCity: state.citySearch.currentCity,\n  sortingParams: state.citySearch.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  getCityList,\n  updateCity,\n  resetComponentStore\n})(CitySearch);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/BreadCrumb/Item.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Layout/BreadCrumb/ItemContainer.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/SuccessPage.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/Reviews.js",["1069","1070","1071","1072","1073","1074","1075"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, ListGroup, Image, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter, useLocation } from \"react-router-dom\";\nimport { getReviewsList, resetComponentStore } from 'actions/customer/labs';\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport Rating from \"utils/Rating\";\nimport Moment from \"react-moment\";\nimport { IoMdStar } from \"react-icons/io\";\nimport { Suspense } from \"react\";\n\nconst List = ({\n  getReviewsList,\n  resetComponentStore,\n  reviewList: { data, count, page },\n  city,\n  labCity,\n  loading\n}) => {\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n  const lab_id = query.get(\"search_value\");\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n\n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getReviewsList(listParams,lab_id);\n  }, [getReviewsList, listParams, lab_id, city, resetComponentStore, setOnce]);\n\n  const loadNextData = () => {\n    const pageNum = parseInt(page);\n    if(data.reviews && data.reviews.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  return (\n    loading && !data.reviews ? <Spinner /> : \n    <section className=\"sptb \" id=\"content\">\n      \n        <InfiniteScroll\n          dataLength={data.reviews.length}\n          next={loadNextData}\n          hasMore={data.reviews.length == count ? false : hasMore}\n          loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Hey! There is no more reviews.</b>\n            </p>\n          }\n        >\n          <Container>\n            <Row>\n              {/* <Card className=\"test_expm\">\n\t\t\t  <Card.Body > */}\n        <div class=\"box_par\" >\n                        <Suspense>\n                       <Image src={`${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${data.labImage}`} alt={data.labName} \n                          style={{ float:\"left\", height: \"80px\", width: \"80px\", padding: \"4px\", \"box-shadow\": \"rgba(0, 0, 0, 0.3) 2px 1px 4px\", \"margin-right\": \"20px\"}}/> \n\t\t\t\t\t\t\t\t\t\t\t </Suspense>\n                       <span>\n                         <h5>{data.labName}</h5>\n                       </span>\n                       <span>\n                       <div title=\"lab ratings\" className=\"rati_icon\">\n                         <IoMdStar size=\"14px\" className=\"ml-1\"/>{data.averageRating}\n                       </div>\n                       <br></br>\n                       </span>\n                        <span class=\"allcomant\">{`${data.certificates.map((cert) => cert.certificateName).join(\", \")}`}\n\t\t\t\t\t\t\t\t\t\t\t </span>\n\t\t\t\t\t</div>\n          <h3>{data.labName} Reviews ({data.totalReviews})</h3>\n                  {\n                    data.reviews.map((item) => { \n                      const randomColor = Math.floor(Math.random()*16777215).toString(16);\n                      return(\n\t\t\t\t\t<Row style={{margin:\"15px\"}}>\n\t\t\t\t\t\t\t<Col sm={6} md={12}>\n\t\t\t\t\t\t\t\t{/* <Card className=\"mb-0\">\n\t\t\t\t\t\t\t\t\t<Card.Body >\n\t\t\t\t\t\t\t\t\t\t\t\t   <div className=\"item-card2\"> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {/* <div className=\"part_lat labspage\"> */}\n                            {item.reviewed_by.avatar && item.reviewed_by.avatar !== \"\"? \n                              <Image style={{\n                                \"width\": \"55px\",\n                                \"height\": \"55px\",}} \n                                className=\"mr-1 rounded-circle\" \n                                src={`${process.env.REACT_APP_SERVER_URL}/documents/user-avatar/${item.reviewed_by.avatar}`} alt=\"\"/> \n                              :(\n                              <div style={{\n                                \"background-color\": \"#\"+randomColor,\n                                \"width\": \"55px\",\n                                \"height\": \"55px\",\n                                \"float\":\"left\",\n                                \"border-radius\": \"100px\"\n                                }} >\n                              <div style={{ \n                                            \"border-radius\": \"22px\",\n                                            \"width\": \"100%\",\n                                            \"color\": \"white\",\n                                            \"font-size\": \"36px\",\n                                            \"line-height\": \"100px\",\n                                            \"position\": \"absolute\",\n                                            \"bottom\": \"-2px\",\n                                            \"right\": \"-25px\",\n                                            \"float\":\"left\"}}>                        \n                              {item.reviewed_by.name.trim().charAt(0).toUpperCase()}\n                              </div>\n                              </div> )\n                             }\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {/* </div> */}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"right_new\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5><b>{item.reviewed_by.name.split(\" \").map((name)=>{\n                              return name.trim().charAt(0).toUpperCase()+ name.slice(1)\n                            }).join(' ')}</b></h5>\n                                                        <Rating ratings={item.rating} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <span><i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> (Nice)</span> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{item.review}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <p><i><b>Date of stay:</b> \n                                                        <Moment format=\"MMMM  YYYY\">{item.reviewed_at}</Moment></i></p> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n                                                    {/* </div>\n\t\t\t\t                     </Card.Body>\n                                </Card> */}\n\t\t\t\t\t\t\t</Col>        \n\t\t\t\t\t</Row>       \n                          )\n                        })\n                    }\n\t\t\t\t{/* </Card.Body>\n\t\t\t</Card> */}\n            </Row>\n          </Container>\n        </InfiniteScroll>\n    </section>\n  )\n}\n\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  reviewList: PropTypes.object.isRequired,\n  getReviewsList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.labs.loadingReviewsList,\n  reviewList: state.labs.reviewList,\n  sortingParams: state.labs.sortingParams,\n  city: state.citySearch.currentCity,\n  labCity: state.labs.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  getReviewsList,\n  resetComponentStore\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/SavedCards.js",["1076","1077","1078","1079"],"import React, { useMemo, useState, Suspense, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Container, Row, Col, FormFile, Card, Button, Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getSavedCards, deleteCard } from \"actions/customer/wallet\";\nimport { FaMapMarker, FaChild, FaBell, FaFile, FaFileMedical, FaWallet, FaCreditCard } from \"react-icons/fa\";\nimport UploadProfile from \"assets/images/users/female/17.jpg\";\nimport {\n  getProfile\n} from \"actions/customer/profile\";\nimport Collapsible from 'react-collapsible';\nimport Spinner from \"views/Spinner\";\nimport AmericanExpress from \"assets/images/payments/americanexpress.svg\";\nimport Maestro from \"assets/images/payments/maestro.svg\";\nimport MasterCard from \"assets/images/payments/mastercard.svg\";\nimport VISA from \"assets/images/payments/visa.svg\";\nimport Rupay from \"assets/images/payments/rupay.png\";\n\nconst cardType = {\n  \"AmericanExpress\": AmericanExpress,\n  \"Maestro\": Maestro,\n  \"MasterCard\": MasterCard,\n  \"Visa\": VISA,\n  \"Rupay\": Rupay\n};\n\n\nconst SavedCards = ({\n  getSavedCards,\n  deleteCard,\n  getProfile,\n  currentProfile,\n  cards,\n  loading,\n  loadingProfile,\n}) => {\n\n  const initialData = {\n    name: \"\",\n    avatar: \"\",\n    imageURL: UploadProfile,\n  };\n\n  const [data, setData] = useState(initialData);\n\n  const {\n    name,\n    avatar,\n    imageURL,\n  } = data;\n\n  // useMemo(() => {\n  //   getProfile();\n  //   getSavedCards();\n  // }, []);\n\n  useEffect(() => {\n    getProfile();\n    getSavedCards();\n  }, []);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && currentProfile) {\n          const { user, gender, dob } = currentProfile;\n          if(user) {\n            const { first_name, last_name, email, ccode, phone, avatar } = user;\n            setData((prevData) => ({\n              ...prevData,\n              gender,\n              dob,\n              name: last_name ? first_name + \" \" + last_name : first_name,\n              email,\n              ccode,\n              phone: ccode + \" - \" + phone,\n              contact: ccode + \" - \" + phone,\n              avatar,\n              imageURL: avatar ? `${process.env.REACT_APP_SERVER_URL}/documents/user-avatar/${avatar}`: UploadProfile\n            }));\n          }\n        }\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [currentProfile]);\n\n  const removeCard = (token) => {\n    if (\n      window.confirm(\n        `Are you sure you want to delete this card? Once you have deleted, it would no longer be available for future payments.\\\n         However, you can still add the same card while doing checkout.`\n      )\n    ) {\n      deleteCard(token);\n    }\n  };\n\n  const onChange = (e) => {\n    const { name, value, files } = e.target;\n    switch( name ) {\n      case \"avatar\":\n        let image_file = files[0];\n        let image_url = URL.createObjectURL(image_file);\n        setData((prevData) => ({\n          ...prevData,\n          [name]: image_file,\n          imageURL: image_url\n        }));\n        break;\n      default:\n        setData((prevData) => ({ \n          ...prevData,\n          [name]: value\n        }));\n    }\n  }\n\n  return ( loading || loadingProfile ? <Spinner />:\n    <section className=\"sptb\">\n      <Container>\n        <Row>\n          <Col xl={3} lg={12} md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>Dashboard</Card.Title>\n              </Card.Header>\n              <Card.Body \n                className=\"text-center item-user border-bottom\"\n              >\n                <FormFile>\n                  <FormFile.Label>\n                  <div className=\"profile-pic\" style={{ \"cursor\": \"pointer\" }}>\n                    <div className=\"profile-pic-img\">\n                      <Suspense>\n                        <Image src={imageURL} className=\"brround thumbnail fs-10\" style={{ width: 80, height: 80 }} alt={name} roundedCircle/>\n                      </Suspense>\n                    </div>\n                  <Link \n                    to=\"/profile\"\n                    className=\"text-dark\"\n                  >\n                    <h4 className=\"mt-3 mb-0 font-weight-semibold\">\n                      {name}\n                    </h4>\n                  </Link>\n                </div>\n                  <FormFile.Input \n                      isInvalid \n                      accept=\"image/jpeg,image/png\" \n                      onChange={onChange} \n                      name=\"avatar\"\n                      hidden={true}\n                    />\n                  </FormFile.Label>\n                </FormFile>\n              </Card.Body>\n              <div className=\"item1-links mb-0\">\n                <Link \n                  to=\"/prescription\"\n                  // to=\"/upload-prescription\"\n                  className=\"d-flex border-bottom\"\n                >\n                  <span className=\"icon1 mr-3\">\n                    <FaFile fontSize={16} /> Prescriptions\n                  </span>\n                </Link>\n                <Link \n                  to=\"/health-records\"\n                  className=\"d-flex border-bottom\"\n                >\n                  <span className=\"icon1 mr-3\">\n                    <FaFileMedical fontSize={16} /> Health Records\n                  </span>\n                </Link>\n                <Link \n                  to=\"/members\"\n                  className=\"d-flex border-bottom\"\n                >\n                  <span className=\"icon1 mr-3\">\n                    <FaChild fontSize={16} /> Family\n                  </span>\n                </Link>\n                <Link \n                  to=\"/addresses\"\n                  className=\"d-flex border-bottom\"\n                >\n                  <span className=\"icon1 mr-3\">\n                    <FaMapMarker fontSize={16} /> Addresses\n                  </span>\n                </Link>\n                <Link \n                  to=\"/saved-cards\"\n                  className=\"d-flex border-bottom\"\n                >\n                  <span className=\"icon1 mr-3\">\n                    <FaCreditCard fontSize={16} /> Saved Cards\n                  </span>\n                </Link>\n                <Link \n                  to=\"/reminders\"\n                  className=\"d-flex border-bottom\"\n                >\n                  <span className=\"icon1 mr-3\">\n                    <FaBell fontSize={16} /> Reminders\n                  </span>\n                </Link>\n              </div>\n            </Card>\n          </Col>\n          <Col xl={9} lg={12} md={12}>\n            <Card>\n              <Card.Header>\n                <h3 className=\"card-title\">\n                  Saved Cards\n                </h3>\n              </Card.Header>\n              <Card.Body>\n                <div className=\"card-pay\">\n                  <ul className=\"card_lists\">\n                    {\n                      !cards.length && <div className=\"text-center\"><h4>No Card Found.</h4></div>\n                    }\n                  { !!cards.length && cards.map(card => {\n                    return (\n                      <Collapsible \n                        trigger={getMaskedCard(card.card.last4, card.card.network, card.card.entity)}\n                        contentContainerTagName=\"li\"\n                        triggerTagName=\"div\"\n                        triggerOpenedClassName=\"p-3 border-bottom\"\n                        triggerClassName=\"p-3\"\n                        className=\"mb-3\"\n                        openedClassName=\"mb-3\"\n                        contentOuterClassName=\"bg-white\"\n                        open={false}\n                      >\n                        <div className=\"d-flex justify-content-end p-3\">\n                        <Button\n                          variant=\"danger\"\n                          size=\"md\"\n                          className=\"pull-right modified\"\n                          onClick={() => removeCard(card.id)}\n                        >\n                          Remove\n                        </Button></div>\n                      </Collapsible>\n                    )\n                  })}\n                  </ul>\n                </div>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\nconst getMaskedCard = (last4, type, name) => {\n  const prefix = \"#### #### ####\";\n  const trigger = (<><Image src={cardType[type]} alt={name} /> {prefix+\" \"+last4}</>);\n  return trigger;\n};\n\nSavedCards.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  cards: PropTypes.array.isRequired,\n  getSavedCards: PropTypes.func.isRequired,\n  deleteCard: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.wallet.loadingSavedCards,\n  cards: state.wallet.savedCards,\n  loadingProfile: state.profile.loadingProfile,\n  currentProfile: state.profile.currentProfile,\n});\n\nexport default connect(mapStateToProps, {\n  getSavedCards,\n  getProfile,\n  deleteCard\n})(SavedCards);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Billing/ChangeLabList.js",["1080","1081"],"import React, { useState, useEffect } from \"react\";\nimport { Col, Card, Image, Container, Row, Button } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\"\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {\n  getChangeLabsList,\n} from \"actions/customer/labs\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory,  { \n  PaginationProvider, \n  PaginationTotalStandalone,\n} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport * as Constants from \"constants/index\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport { FaCartPlus, FaShoppingCart } from \"react-icons/fa\";\nimport slugify from \"react-slugify\";\nimport Rating from \"utils/Rating\";\nimport { changeLabToCart } from 'actions/cart/cart';\nimport {\n  // getLabTestsPage,\n  resetComponentStore,\n} from \"actions/customer/labs\";\nimport { LocalityFilter, RatingFilter, PriceFilter } from 'utils/Filters';\nimport { getLocalityList } from \"actions/customer/locality\";\n\nconst ChangeLabList = ({\n  getChangeLabsList,\n  history,\n  // createGuestCart,\n  changeLabToCart,\n  labsList:{ data, count },\n  sortingParams,\n  loading,\n  // getLabTestsPage,\n  resetComponentStore,\n  // labTests,\n  currentCity,\n  getLocalityList,\n  // cartDetails\n}) => {\n\n//   const useQuery = () => new URLSearchParams(useLocation().search);\n//   let query = useQuery();\n\n//   const prescription_id_value = query.get(\"search_value\");\n  \n  const initialData = {\n    disabled: '',\n  };\n  const [Data, setData] = useState(initialData);\n  const { disabled } = Data;\n\nconst initialSortingParams = {\n  limit: 10,\n  page: 1,\n  orderBy: 'totalReviews',\n  ascending: 'desc',\n  query: {},\n  filters: [],\n  // test_id: history.location.state.test_ids,\n  // packages_id: history.location.state.packages_ids\n};\nconst [labsParams, setLabsParams] = useState(initialSortingParams);\n\nconst handleSorting = (e) => {\n  const { value } = e.target;\n  const params = {\n    ...labsParams,\n    orderBy: 'listing_price',\n    ascending: 'desc',\n    page: 1,\n    limit: 2,\n  };\n  switch(value) {\n    case \"0\": params.orderBy = \"listing_price\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n    case \"1\": params.orderBy = \"averageRating\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n    default: break;\n  }\n  setLabsParams(params);\n}\nconst onFilterChange = (name, value, newParams) => {\n  setLabsParams((params) => ({...params, ...newParams}));\n};\n\nconst [onlyOnce, setOnce] = useState(true);\nconst [defaultLocality, setDefaultLocality] = useState([]);\n\n// useMemo(() => {\n//   if(onlyOnce) {\n//     resetComponentStore();\n//     getLocalityList(currentCity.value, { \n//       limit: 2,\n//       page: 1,\n//       orderBy: 'city',\n//       ascending: 'desc',\n//       query: \"\",\n//       filters: []\n//      }).then((res) => {\n//       if (res && res.status) {\n//         const { data } = res.response[0];\n//         const result = data.map(list => ({\n//           value: list._id,\n//           label: list.locality_name,\n//         }));\n//         setDefaultLocality([...result])\n//         return result;\n//       }\n//     })\n//     setOnce(false);\n//   }\n//   getChangeLabsList(labsParams);\n// }, [getChangeLabsList, currentCity, resetComponentStore, setOnce, labsParams]);\n\nuseEffect(() => {\n  let subscribe = true;\n  async function asyncCall() {\n    try {\n      if(subscribe && currentCity) {\n        if(onlyOnce) {\n          resetComponentStore();\n          getLocalityList(currentCity.value, { \n            limit: 2,\n            page: 1,\n            orderBy: 'city',\n            ascending: 'desc',\n            query: \"\",\n            filters: []\n            }).then((res) => {\n            if (res && res.status) {\n              const { data } = res.response[0];\n              const result = data.map(list => ({\n                value: list._id,\n                label: list.locality_name,\n              }));\n              setDefaultLocality([...result])\n              return result;\n            }\n          })\n          setOnce(false);\n        }\n      }\n      getChangeLabsList(labsParams);\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n  asyncCall();\n  return () => subscribe = false;\n}, [getChangeLabsList, currentCity, resetComponentStore, setOnce, labsParams]);\n\n// useMemo(() => {\n//     if (onlyOnce) {\n//       resetComponentStore();\n//       setOnce(false);\n//     }\n//     // getLabTestsPage();\n//   }, [ city, resetComponentStore]);\n\n// useMemo(() => {\n// \tgetChangeLabsList(labsParams);\n// },[Data.labs]);\n\n\nuseEffect(() => {\n\tgetChangeLabsList(labsParams);\n},[Data.labs]);\n\nconst handleTableChange = (\n    type,\n    { page }\n  ) => {\n    let params = {\n      ...sortingParams,\n      page: type === \"search\" ? 1 : page,\n    };\n    setLabsParams(params);\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && data) {\n          setData((prevData) => ({\n            ...prevData,\n            ...data,\n          }));\n        }\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [data]);\n\n  const addItem = (e, lab_id ) => {\n    e.preventDefault();\n    let labs = data;\n    const changeLabData = { lab_id };\n    changeLabData.changeLab = 1;\n    // changeLabData.cart_id = cartDetails._id;\n    setData((data) => ({...data, disabled: lab_id }));\n    // if (isLoggedIn) {\n      changeLabToCart(changeLabData).then((res) => {\n        if(!res) {\n          console.log(\"lab not changed\");\n        } else {\n          labs = labs.map((item) => ({ ...item, isInCart: item._id === lab_id ? 1: item.isInCart }));\n        }\n        setData((data) => ({ ...data, labs }));\n      });\n    // }\n  }\n  \nconst defaultSorted = [\n    {\n      dataField: \"labName\",\n      order: \"desc\"\n    }\n  ];\n\n  const columns = [\n    {\n      dataField: \"labName\",\n      text: '',\n      formatter: (col, row) => {\n        const { \n          listing_price,\n          discount,\n          MRP,\n          address,\n          listing_price_currency,\n          MRP_currency,\n          isInCart,\n          _id,\n          labName,\n          labImage,\n          averageRating,\n          totalReviews,\n          certificates, } = row;\n                \n        const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n        \n        return (\n          <div className=\"tab-content\">\n            <div className=\"tab-pane active\" id=\"tab-11\">\n              <Card className=\"card overflow-hidden\">\n                <div className=\"d-md-flex\">\n                  <div className=\"item-card9-img\">\n                    <div className=\"item-card9-imgs\">\n                      <Link \n                        to={{\n                        pathname:`/lab-tests/labs/${slugify(labName)}`,\n                        hash:\"#content\",\n                        search: `?search_type=labs&search_value=${_id}`\n                        }}\n                      >\n                      </Link>\n                      <Image \n                        className=\"cover-image\"\n                        alt={labName}\n                        src={labImageURL}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"card border-0 mb-0\">\n                    <Card.Body className=\"card-body\">\n                      <div className=\"item-card9\">\n                        <Link \n                          to={{\n                          pathname:`/lab-tests/labs/${slugify(labName)}`,\n                          hash:\"#content\",\n                          search: `?search_type=labs&search_value=${_id}`\n                          }}\n                          className=\"text-dark\"\n                        >\n                          <h4 className=\"font-weight-bold mt-1 mb-2\">{labName}\n                          <i class=\"ion-checkmark-circled  text-success fs-14 ml-1\"></i></h4>\n                        </Link>\n                        <span className=\"text-muted fs-13 mt-0\">\n                          { \n                            address.locality ? `${address.locality}, ${currentCity.label}`: currentCity.label\n                          }\n                        </span>\n                        <span className=\"new01 lab_list\">\n                          <div title=\"lab ratings\" className=\"changed mr-1\">\n                            <Rating ratings={averageRating} />\n                          </div>\n                          <span className=\"allcomant\">{`(${totalReviews})`}  | {`${certificates.map((cert) => cert.certificateName).join(\", \")}`} </span>\n                        </span><br/><br/>\n                        <div className=\"item-card9-desc mb-2 mt-1\">\n                          <span className=\"mr-4\">Price: <b>{CURRENCY_SYMBOL[listing_price_currency]}{listing_price} <s>{CURRENCY_SYMBOL[MRP_currency]}{MRP}</s></b></span>\n                        </div>\n                        { discount && discount > 0 ?\n                          <div className=\"spans\">\n                              {`Flat ${discount}% Off`}\n                            </div>\n                          :null\n                        }\n                        {\n                          isInCart === 1 ? (\n                            <Button \n                              onClick={()=>history.push({\n                                        pathname:`/cart`,\n                                        hash:\"#content\",\n                                      })}\n                              className=\"btn btn-primary\">\n                              <FaShoppingCart className=\"mr-1\" />\n                              Go To Cart\n                            </Button>\n                          ): (\n                            <Button\n                              // className=\"add_cart\"\n                              onClick={ (e) => addItem(e, _id) }\n                              disabled={disabled === _id}\n                            >\n                              <FaCartPlus className=\"mr-1\" />\n                              Add To Cart\n                            </Button>\n                          )\n                        }\n                      </div>\n                    </Card.Body>\n                    \n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        )\n      }\n\n    },\n  ];\n\nconst customTotal = function (from, to, size) {\n  return (\n\t<div className=\" mb-0\">\n\t  <div className=\"\">\n\t\t<div className=\"p-5 bg-white item2-gl-nav d-flex\">\n\t\t  <h6 className=\"mb-0 mt-2\">Showing {from} to {to} of {size} Labs</h6>\n\t\t\t<ul className=\"nav item2-gl-menu ml-auto\">\n        \n\t\t\t</ul>\n\t\t\t<div className=\"d-flex select2-sm\">\n\t\t\t\t<label className=\"mr-2 mt-1 mb-sm-1\">Sort By:</label>\n\t\t\t\t         <select \n                    name=\"sortBy\" \n                    className=\"form-control select2\"\n                    onChange={handleSorting}\n                  >\n                    <option value=\"0\" key=\"sort_price\" >Price</option>\n                    <option value=\"1\" key=\"sort_rating\" >Rating</option>\n                    <option value=\"999\" key=\"sort_none\" >None</option>\n                  </select>\n\t\t\t</div>\n\t\t</div>\n\t  </div>\n\t</div>\n  )\n}\n\nconst options = {\n  page: parseInt(labsParams.page),\n  pageStartIndex: 1,\n  firstPageText: 'First',\n  lastPageText: 'Last',\n  withFirstAndLast: true,\n  hideSizePerPage: true, // Hide the sizePerPage dropdown always\n  hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n  hideSizePerPageRenderer: true,\n  showTotal: true,\n  totalSize: count,\n  paginationTotalRenderer: () => { return null },\n  sizePerPage: labsParams.limit || data.length,\n};\n\nreturn (\n// loading ? <Spinner /> : \n<section className=\"sptb\">\n  <Container className=\"container\">\n\t<Row className=\"row\">\n\t\t<Col  xl={3} lg={12} md={12}>\n\t\t\t<Card className=\"card\">\n              <div>\n                <Card.Header className=\"justify-content-center\">\n                  <h3 className=\"card-title\"> Lab Filters</h3>\n                </Card.Header>\n              </div>\n              <LocalityFilter\n                type=\"checkbox\"\n                filter=\"locality=localityServings\"\n                filterType=\"String\"\n                filterName=\"Location\"\n                filterParams={labsParams}\n                onFilterChange={onFilterChange}\n                loadFilterMethod={getLocalityList}\n                loadFilterFollowedBy={currentCity.value}\n                loadFilterName=\"locality_name\"\n                loadFilterType=\"String\"\n                selectFilterOptions={defaultLocality}\n              />\n              <PriceFilter \n                type=\"range\"\n                filter=\"price=listing_price\"\n                filterType=\"object\"\n                filterName=\"Price (INR)\"\n                filterParams={labsParams}\n                onFilterChange={onFilterChange}\n                rangeValue={[0, 10000, 50]}\n                rangeType=\"price\"\n                marks={[{\n                  value: 0,\n                  label: CURRENCY_SYMBOL[\"INR\"] + 0,\n                },\n                {\n                  value: 10000,\n                  label: CURRENCY_SYMBOL[\"INR\"] + 10000,\n                }]}\n              />\n              <RatingFilter\n                type=\"textSelect\"\n                filter=\"rating=averageRating\"\n                filterType=\"Number\"\n                filterName=\"Rating\"\n                filterParams={labsParams}\n                onFilterChange={onFilterChange}\n                selectFilterOptions={[{\n                  value: 4,\n                  label: \"4 Star and Higher\",\n                },{\n                  value: 3,\n                  label: \"3 Star and Higher\",\n                },{\n                  value: 2,\n                  label: \"2 Star and Higher\",\n                }, {\n                  value: 1,\n                  label: \"1 Star and Higher\",\n                }]}\n              />\n\t\t\t</Card>\n\t\t</Col>\n\t  <Col xl={9} lg={12} md={12}>\n\t\t<div className=\"mb-lg-0\">\n\t\t  <div className=\"item2-gl\">\n\t\t\t<div className=\"list-content\">\n\t\t\t  <div id=\"list-products\">\n\t\t\t\t<PaginationProvider\n\t\t\t\t  pagination={paginationFactory(options) }\n\t\t\t\t  keyField=\"_id\"\n\t\t\t\t  columns={columns}\n\t\t\t\t  data={data}\n\t\t\t\t>\n\t\t\t\t{\n\t\t\t\t  ({\n\t\t\t\t\tpaginationProps,\n\t\t\t\t\tpaginationTableProps,\n\t\t\t\t  }) => \n\t\t\t\t\t<ToolkitProvider\n\t\t\t\t\t  keyField=\"_id\"\n\t\t\t\t\t  data={data}\n\t\t\t\t\t  columns={columns}\n\t\t\t\t\t  search\n\t\t\t\t\t>\n\t\t\t\t\t  {\n\t\t\t\t\t\ttoolkitprops => (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t  <PaginationTotalStandalone  \n\t\t\t\t\t\t\t{...paginationProps}  \n\t\t\t\t\t\t\tpaginationTotalRenderer={customTotal}\n\t\t\t\t\t\t  />\n\t\t\t\t\t\t  <BootstrapTable\n\t\t\t\t\t\t\t{...toolkitprops.baseProps}\n\t\t\t\t\t\t\tbootstrap4\n\t\t\t\t\t\t\tremote={{ pagination: count > 0 }}\n\t\t\t\t\t\t\tkeyField=\"_id\"\n\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\t{...paginationTableProps}\n\t\t\t\t\t\t\tonTableChange={handleTableChange}\n\t\t\t\t\t\t\tdefaultSorted={defaultSorted}\n\t\t\t\t\t\t\tnoDataIndication={Constants.NO_RECORD}\n\t\t\t\t\t\t\tbordered={false}\n\t\t\t\t\t\t\toverlay={ overlayFactory({ \n\t\t\t\t\t\t\t\tspinner: true, \n\t\t\t\t\t\t\t\tstyles: { overlay: (base) => ({...base, background: 'rgba(192,192,192,0.7)'}) } \n\t\t\t\t\t\t\t  }) \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  />\n\t\t\t\t\t\t</>\n\t\t\t\t\t  )}\n\t\t\t\t\t</ToolkitProvider>\n\t\t\t\t}\n\t\t\t\t</PaginationProvider>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </div>\n\t\t</div>\n\t  </Col>\n\t</Row>\n  </Container>\n</section>\n)\n}\n\nChangeLabList.propTypes = {\n  getChangeLabsList: PropTypes.func.isRequired,\n  labsList: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n  // cartDetails: PropTypes.object.isRequired,\n};\nconst mapStateToProps = state => ({\n  loading: state.labs.loadingLabsList,\n  // cartDetails: state.cart.cartDetails,\n  labsList: state.labs.labList,\n  sortingParams: state.labs.sortingParams,\n  // labTests: state.labTests.labTestsList,\n  currentCity: state.citySearch.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  getChangeLabsList,\n  changeLabToCart,\n  getLocalityList,\n  // getLabTestsPage,\n  // createGuestCart,\n  resetComponentStore,\n})(withRouter(ChangeLabList));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/HealthRecord/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/city_search.js",["1082"],"import axios from \"axios\";\n\nimport {\n  REMOVE_ERRORS,\n  LOADING_CITY_LIST_DATA,\n  LOADING_ON_CITY_UPDATE,\n  CITY_SEARCH_PARAMATERS_UPDATE,\n  CITY_LIST_UPDATED,\n  CITY_UPDATED,\n  CITY_ERROR,\n  RESET_CITY,\n} from \"actions/types\";\n\nimport { setUserCity } from \"utils/setHeaders\";\n\n\n//get City list\nexport const getCityList = (cityParams, notRemoveError) => async dispatch => {\n\n  try {\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\n      if (!notRemoveError) {\n          dispatch({ type: REMOVE_ERRORS });\n          dispatch({ type: LOADING_CITY_LIST_DATA });\n      }\n      const query = cityParams.query ? cityParams.query : \"\";\n      cityParams.query = query;\n      config.params = cityParams;\n      const res = await axios.get(`/api/city`, config);\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch({\n          type: CITY_SEARCH_PARAMATERS_UPDATE,\n          payload: cityParams\n      });\n      dispatch({\n          type: CITY_LIST_UPDATED,\n          payload: res.data.response[0]\n      });\n      return res.data ? res.data : { status: false };\n  } catch (err) {\n      dispatch({\n          type: CITY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n      });\n  }\n};\n\n//Update City\nexport const updateCity = (formData, notRemoveError, isLoggedIn) => async dispatch => {\n  try {\n    dispatch({ type: LOADING_ON_CITY_UPDATE });\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\n      if (!notRemoveError) {\n        dispatch({ type: REMOVE_ERRORS });\n        dispatch({ type: LOADING_CITY_LIST_DATA });\n      }\n      if(isLoggedIn) {\n        const res = await axios.put(`/api/user/${formData.customer_id}/city`, { city_id: formData.place }, config);\n      }\n      setUserCity(formData.value);\n      dispatch({\n        type: CITY_UPDATED,\n        payload: formData,\n      });\n      window.location.reload();\n      // return res.data ? res.data : { status: false };\n  } catch (err) {\n      dispatch({\n        type: CITY_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n  }\n};\n\n// Dispatch Reset store\nexport const resetComponentStore = () => async dispatch => {\n  await dispatch({ type: RESET_CITY });\n};","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/lab_search.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/lt_categories.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/validation.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Cart.js",["1083","1084","1085","1086"],"import React, { useEffect, useState } from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  Row,\n  Col,\n  Card,\n  Container,\n  Image,\n  Alert\n} from \"react-bootstrap\";\nimport {\n  getCartDetails,\n  getGuestUserCart,\n} from \"actions/cart/cart\";\nimport { getCollectionCentersList } from 'actions/customer/collectionCenters';\nimport BillingDetails from \"views/Customer/Billing/BillingDetails\";\nimport { ListAddress } from \"views/Customer/Cart/Address\";\nimport { ListFamily } from \"views/Customer/Cart/Family\";\nimport ListCollectionCenter from \"views/Customer/Cart/CollectionCenter/CollectionCenters\";\nimport { Payment } from \"views/Customer/Payment\";\nimport CartLogin from \"views/Auth/CartLogin\";\nimport SampleCollection from \"../SampleCollection/SampleCollection\";\nimport ApplyCoupon from \"./ApplyCoupon\";\nimport { placeOrder, verifyPayment, failedPayment } from \"actions/order/order\";\nimport Collapsible from 'react-collapsible';\nimport Spinner from \"views/Spinner\";\nimport EmptyCart from \"assets/images/emptyCart.png\";\nimport CartRegister from \"views/Auth/CartRegister\";\nimport { deductWallet, getWalletBalance } from \"actions/customer/wallet\";\n\nconst stepName = {\n  1: \"Sample Collection\",\n  2: \"Patient Information\",\n  3: \"Address Information\",\n  4: \"Collection Center\",\n  5: \"Payment\"\n};\n\nconst Cart = ({\n  getCartDetails,\n  getWalletBalance,\n  getCollectionCentersList,\n  deductWallet,\n  verifyPayment,\n  failedPayment,\n  placeOrder,\n  history,\n  getGuestUserCart,\n  auth: { isAuthenticated, user },\n  placedOrderDetails,\n  loading,\n  loadingPaymentScreen,\n  center,\n  balance,\n  cartDetails: {\n    wallet_deduction,\n    sampleCollection,\n    patient,\n    address,\n    products,\n    subTotal,\n    tax,\n    penalty,\n    discount,\n    coupon,\n    homeCollectionCharges,\n    _id,\n    lab,\n    grossAmount,\n    collectionCenter,\n    prescription,\n    prescriptionNeeded\n  },\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    ascending: \"desc\",\n  };\n\n  const cartId = _id;\n  const [currentStep, setStep] = useState(1);\n  const [showApplyCoupon, setApplyCoupon] = useState(false);\n  const [showCartLoginPage,setShowCartLoginPage] = useState(true);\n  const [haveRadiology, setHaveRadiology] = useState(false);\n  const [hasEmail, setHasEmail] = useState(user && user?.user?.email);\n\n  let maxSteps = 3;\n  \n  useEffect(()=>{\n    if(products && products.length > 0){\n      const radiologyProducts = products.some((item) => item.labtest && item.labtest.test.category === \"radiology\");\n      setHaveRadiology(radiologyProducts);\n    }\n  },[products])\n\n\n  const handleApplyCouponClose = () => {\n    setApplyCoupon(false);\n    getCartDetails();\n  }\n\n  const paymentHandler = (callback_url) => (res) => {\n    if(callback_url) {\n      verifyPayment(callback_url, res, history);\n    }\n  }\n\n  const failHandler = (rzp) => (response) => {\n    if(response.error) {\n      if(rzp) {\n        rzp.close();\n        failedPayment(response.error, history);\n      }\n    }\n  }\n  \n  const onCheckout = (payment_type) => placeOrder(payment_type);\n  const onEmailUpdateCb = (status) => setHasEmail(status);\n  const nextStep = (step) => () => {\n    getCartDetails();\n    setStep(step);\n    if(isAuthenticated && step === 2 && sampleCollection?.collectionType === \"walkin\" ) {\n      getCollectionCentersList(initialSortingParams);\n    }\n  }\n  const onScheduleEdit = () => {\n    setStep(1);\n  }\n  const onCenterEdit = () => {\n    setStep( (isAuthenticated && cartId && center.count >0) && (sampleCollection && sampleCollection.collectionType === \"walkin\" ? 3:(isAuthenticated ? 4 : 5)) );\n  }\n\n  const moveToStep = (e, step) => { e.preventDefault(); setStep(step); }\n\n  // const setCollectionType = (type) => setSampleScheduleType(type);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n      if(subscribe) {\n        if(isAuthenticated) {\n          getCartDetails();\n          // getCollectionCentersList(initialSortingParams);\n        }\n        else {\n          getGuestUserCart();\n        }\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, []);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && placedOrderDetails) {\n          const { payment_type, options, complete } = placedOrderDetails;\n          if(complete) {\n            history.push({\n              pathname: \"/order-success\", \n              state: { payment: {\n                orderID: placedOrderDetails.orderID,\n                amount: placedOrderDetails.amount,\n                currency: placedOrderDetails.currency,\n                schedule: placedOrderDetails.schedule,\n                address: placedOrderDetails.address,\n                patient: placedOrderDetails.patient,\n                center: placedOrderDetails.center,\n                mode: payment_type,\n              }}\n            });\n          }\n          else if(payment_type === \"Online\") {\n            const handler = paymentHandler(options.callback_url);\n            const rzp_options = {\n              ...options,\n              handler,\n            };\n            delete rzp_options[\"callback_url\"];\n            const rzp = new window.Razorpay(rzp_options);\n            rzp.open();\n            rzp.on('payment.failed', failHandler(rzp));\n          }\n        }\n      }\n      catch(err) {\n        // Error\n        console.log(\"error\", err);\n      }\n    }\n    asyncCall();\n\n    return () => {\n      subscribe = false;\n    }\n  }, [placedOrderDetails]);\n  if(isAuthenticated && cartId && sampleCollection?.collectionType) {\n    maxSteps = sampleCollection.collectionType === \"walkin\" ? maxSteps + Number(center.count > 0): 4;\n  }\n  if(maxSteps === 3) {\n    stepName[3] = \"Payment\";\n  } else if(maxSteps === 4) {\n    stepName[4] = \"Payment\";\n    if(sampleCollection.collectionType === \"walkin\") {\n      stepName[3] = \"Collection Center\";\n    } else {\n      stepName[3] = \"Address Information\";\n    }\n  }\n\n  const renderProgress = () => {\n    const steps = [];\n    for(let i=0; i < maxSteps; i++) {\n      steps.push(<li key={`step_${i}`} className={currentStep === i+1 ? \"active\": \"\"}>\n      </li>)\n    }\n    return steps;\n  }\n\n  const renderProgressStepNumbers = () => {\n    const steps = [];\n    for(let i=0; i < maxSteps; i++) {\n      let hrefClass = \"text-center\";\n      let stepCountClass = \"\";\n      if(i === 0) hrefClass = \"\";\n      if(i === 1) stepCountClass = \"text-left \";\n      steps.push(\n        <li key={`step_no_${i}`} style={{ width: 165, marginRight: 10 }}>\n          {\n            currentStep > i+1 ? (\n              <a href=\"#\" onClick={(e) => moveToStep(e, i+1)} className={hrefClass}>\n                <span className={stepCountClass + \"d-block\"}><span className=\"top\">{\"Step \"+(i+1)+\".\"}</span></span>\n                <span className=\"text-default\"><span className=\"bottom font-weight-normal\">{stepName[i+1]}</span></span>\n              </a>\n            ):\"\"\n          }\n        </li>\n      )\n    }\n    return steps; \n  }\n\n  console.log(penalty)\n\n  return (\n    (loading && !lab)? <Spinner />: (\n    <>\n      <section className=\"sptb\">\n        <Container>\n          {\n            !products || products.length === 0 ? (\n              <Row>\n                <Col md={8} lg={6} className=\"m-auto\">\n                  <div className=\"right_bill card\">\n                    <div className=\"item-card9-desc mb-2 mt-1\">\n                      <Container>\n                        <div className=\"mb-4 cart_empty cartemp\">\n                          <Image src={EmptyCart} alt=\"\" />\n                          <h4>Cart is Empty</h4>\n                          <p>Looks Like you haven't added any test yet.</p>\n                          <Link to=\"/lab-tests\" className=\"btn btn-primary w-75 mt-7 mb-5\">\n                            Add Test\n                          </Link>\n                        </div>\n                      </Container>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            ): (\n              <Row>\n                <Col md={8} lg={8}>\n                  {\n                    isAuthenticated && (\n                      <div className=\"cart_page mb-5 mt-5\">\n                        <ul className=\"stepsName\">\n                         { renderProgressStepNumbers() }\n                        </ul>\n                        <ul className=\"steps\">\n                          { renderProgress() }\n                        </ul>\n                      </div>\n                    )\n                  }\n                  { \n                    !isAuthenticated && (\n                      <div className=\"cart_page mb-2\">\n                        <Card>\n                          <Card.Body>\n                            <h3 className=\"cart-step-title\">{showCartLoginPage ? \"Login\": \"Register\"}</h3>\n                            <Row>\n                              <Col md={6}>\n                                {showCartLoginPage ?\n                                <>\n                                <CartLogin />\n                                <p className=\"text-dark mb-0 mt-2\">\n                                  New Member?\n                                    <Link to={window.location.pathname} onClick={()=>setShowCartLoginPage(false)} className=\"text-primary ml-1\">\n                                      Sign Up\n                                    </Link>\n                                </p>\n                                </>\n                                :\n                                <>\n                                <CartRegister />\n                                <p className=\"text-dark mb-0 mt-2\">\n                                  Already a member?\n                                    <Link to={window.location.pathname} onClick={()=>setShowCartLoginPage(true)} className=\"text-primary ml-1\">\n                                      Sign In\n                                    </Link>\n                                </p>\n                                </>\n                                }\n                              </Col>\n                              <Col md={6}>\n                                <div className=\"dummy_text\">\n                                  <h5>Advantage of our secure login </h5>\n                                  <ul>\n                                    <li>\n                                    Stay informed with latest offers & reminders{\" \"}\n                                    </li>\n                                    <li>Single login for App & Web, access to historic reports </li>\n                                    <li>\n                                    Control all notifications, zero spam{\" \"}\n                                    </li>\n                                  </ul>\n                                </div>\n                              </Col>\n                            </Row>\n                          </Card.Body>\n                        </Card>\n                      </div>\n                    ) \n                  }\n                  {\n                    isAuthenticated && cartId && (\n                      <div className=\"cart_page mb-2\">\n                        <Card>\n                          {\n                            currentStep === 1 && \n                            <Card.Body>\n                              <h3 className=\"cart-step-title\">Sample Collection</h3>\n                              { \n                                isAuthenticated && cartId && \n                                <SampleCollection\n                                  cart={cartId}\n                                  onContinue={nextStep(2)}\n                                  haveRadiology={haveRadiology}\n                                  defaultCollectionType={haveRadiology ? \"ambulatory\": \"home\"}\n                                  labSlots={lab.opening_time || { from:0, to: 1439 }}\n                                  ambulatory={!!(lab?.ambulatoryServiceProvided === \"yes\")}\n                                />\n                              }\n                            </Card.Body>\n                          }\n                          {\n                            currentStep === 2 &&\n                            <Card.Body>\n                              <h3 className=\"cart-step-title\">Patient Information</h3>\n                              <Row>\n                                <Col md={12}>\n                                { \n                                  isAuthenticated && cartId && \n                                  <ListFamily \n                                    goBack={nextStep(currentStep-1)}\n                                    onContinue={nextStep(3)}\n                                    cart={cartId}\n                                  />\n                                }\n                                </Col>\n                              </Row>\n                            </Card.Body>\n                          }\n                          {\n                            currentStep === 3 && (sampleCollection.collectionType === \"walkin\" ? (\n                              center.count === 0 ? (\n                                <Card.Body>\n                                  <h3 className=\"cart-step-title\">Payment</h3>\n                                  <Row>\n                                    <Col md={12}>\n                                      <Payment\n                                        grossAmount={grossAmount}\n                                        isAuthenticated={isAuthenticated}\n                                        onEmailUpdateCb= {onEmailUpdateCb}\n                                        placeOrder={onCheckout}\n                                        penalty = {penalty}\n                                        goBack={nextStep(currentStep-1)}\n                                        getWalletBalance={getWalletBalance}\n                                        deductWallet={deductWallet}\n                                        loading={loadingPaymentScreen}\n                                        balance={balance}\n                                        reserved={wallet_deduction}\n                                        disabled={!hasEmail}\n                                      /> \n                                    </Col>\n                                  </Row>\n                                </Card.Body>\n                              ): (\n                                <Card.Body>\n                                  <h3 className=\"cart-step-title\">Collection Center</h3>\n                                  <Alert variant=\"warning\" className=\"mt-3\">\n                                    <p className=\"font-weight-bold\">\n                                      Note: If no collection center is selected then \n                                      test will be done at selected lab and collection charges may differ.\n                                    </p>\n                                  </Alert>\n                                  <Card.Body>\n                                    <Row>\n                                      <Col md={12}>\n                                        <ListCollectionCenter\n                                          goBack={nextStep(currentStep-1)}\n                                          onContinue={nextStep(4)}\n                                          cart={cartId}\n                                        />\n                                      </Col>\n                                    </Row>\n                                  </Card.Body>\n                                </Card.Body>\n                              )\n                            ): (\n                              <Card.Body>\n                                <h3 className=\"cart-step-title\">Address Information</h3>\n                                <Row>\n                                  <Col md={12}>\n                                    <ListAddress \n                                      goBack={nextStep(currentStep-1)}\n                                      onContinue={nextStep(4)}\n                                      cart={cartId}\n                                    />\n                                  </Col>\n                                </Row>\n                              </Card.Body>\n                            ))\n                          }\n                          {\n                            currentStep === 4 && \n                            <Card.Body>\n                              <h3 className=\"cart-step-title\">Payment</h3>\n                              <Row>\n                                <Col md={12}>\n                                  <Payment\n                                    goBack={nextStep(currentStep-1)}\n                                    grossAmount={grossAmount}\n                                    isAuthenticated={isAuthenticated}\n                                    onEmailUpdateCb= {onEmailUpdateCb}\n                                    penalty = {penalty}\n                                    placeOrder={onCheckout}\n                                    getWalletBalance={getWalletBalance}\n                                    deductWallet={deductWallet}\n                                    loading={loadingPaymentScreen}\n                                    balance={balance}\n                                    reserved={wallet_deduction}\n                                    disabled={!hasEmail}\n                                  /> \n                                </Col>\n                              </Row>\n                            </Card.Body>\n                          }\n                        </Card>\n                      </div>\n                    )\n                  }\n                </Col>\n                <Col md={4} lg={4}>\n                  <BillingDetails\n                    subTotal={subTotal}\n                    homeCollectionCharges={homeCollectionCharges}\n                    discount={discount}\n                    grossAmount={grossAmount}\n                    walletDeduction={wallet_deduction || 0}\n                    tax={tax}\n                    cart={cartId}\n                    onEdit={getCartDetails}\n                    onScheduleEdit={onScheduleEdit}\n                    loading={loading}\n                    products={products}\n                    sampleDetails={sampleCollection}\n                    patientDetails={patient}\n                    addressDetails={address}\n                    penalty = {penalty}\n                    // removeProduct={removeProduct}\n                    appliedCoupon={coupon}\n                    lab={lab}\n                    setApplyCoupon={setApplyCoupon}\n                    // removeCouponCode={removeCouponCode}\n                    collectionCenter={collectionCenter}\n                    onCenterEdit={onCenterEdit}\n                    prescriptionNeeded={prescriptionNeeded}\n                    prescription={prescription}\n                  />\n                </Col>\n              </Row>\n            )\n          }\n        </Container>\n        <ApplyCoupon\n          cart={cartId}\n          show={showApplyCoupon}\n          handleClose={handleApplyCouponClose}\n        />\n      </section>\n    </>)\n  );\n};\n\nCart.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.cart.loadingCartDetails,\n  loadingPaymentScreen: state.wallet.loadingMoneyDeduct,\n  cartDetails: state.cart.cartDetails,\n  auth: state.auth,\n  placedOrderDetails: state.order.placedOrderDetails,\n  center: state.collectionCenters.collectionCenterList,\n  balance: state.wallet.walletBalance,\n});\n\nexport default connect(mapStateToProps, {\n  getCartDetails,\n  getGuestUserCart,\n  getWalletBalance,\n  getCollectionCentersList,\n  deductWallet,\n  placeOrder,\n  verifyPayment,\n  failedPayment,\n})(withRouter(Cart));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/SampleCollection/SampleCollection.js",["1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100"],"import React, { useEffect, useState, useMemo, Suspense } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  setSampleCollectionDetails,\n  getSampleCollectionDetails,\n} from \"actions/sampleCollection/sampleCollection\";\nimport { Row, Col, Card, Container, Button, Image } from \"react-bootstrap\";\nimport { getCartDetails } from \"actions/cart/cart\";\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\nimport Spinner from \"views/Spinner\";\nimport { getTimeSlots } from \"actions/misc\";\nimport classNames from 'classnames';\nimport Afternoon from 'assets/images/pngs/afternoon.png';\nimport Morning from 'assets/images/pngs/morning.png';\nimport Evening from 'assets/images/pngs/evening.png';\nimport { FaLongArrowAltRight } from \"react-icons/fa\";\n\nconst currentMinutes = moment.duration(moment().format('HH:mm')).asMinutes();\nconst today = moment(new Date()).format(\"Do MMM\");\n\nfunction generateTimeSlots(startingSlot, endingSlot) {\n  //statring slot format 06:00 endling slot 13:00\n  // {\n  // time: '06.00 AM - 07.00 AM',\n  // timeslot1: '06:00',\n  // timeslot2: '07:00',\n  // f: 'am',\n  // },\n  // 04 am to 12:00 morning 12 pm to 16:00 afternoon 16:00 to 20:00 evening\n  const splitStart = startingSlot.split(\":\"); // [06, 00];\n  const splitEnd = endingSlot.split(\":\"); // [13, 00]\n  const timeSlots = parseInt(splitEnd[0], 10) - parseInt(splitStart[0], 10);\n  let startTime = parseInt(splitStart[0], 10); // 6\n  let endTime = parseInt(splitStart[0], 10) + 1; // 7\n  const interval = 1;\n  const morningTime = [];\n  const afternoonTime = [];\n  const eveningTime = [];\n  const nightTime = [];\n  for (let i = 0; i < timeSlots; i++) {\n    const sM = startTime < 12 ? \"AM\" : \"PM\";\n    const eM = endTime < 12 ? \"AM\" : \"PM\";\n    const formatStartTime = startTime % 12 || 12;\n    const formatEndTime = endTime % 12 || 12;\n    const startTimeLabel = (startTime < 10\n      ? `0${startTime % 12}:00`\n      : `0${formatStartTime}:00`\n    ).slice(-5);\n    const endTimeLabel = (endTime < 10\n      ? `0${endTime % 12}:00`\n      : `0${formatEndTime}:00`\n    ).slice(-5);\n    const startTimeLabel24 = `0${startTime}:00`.slice(-5);\n    const endTimeLabel24 = `0${endTime}:00`.slice(-5);\n    const timeLabel =\n      startTimeLabel + \" \" + sM + \" - \" + endTimeLabel + \" \" + eM;\n    const startTimeInMinutes = startTime*60;\n    const timeObj = {\n      time: timeLabel,\n      inMinS1: startTimeInMinutes,\n      inMinS2: (startTimeInMinutes + interval*60),\n      timeslot1: startTimeLabel,\n      timeslot2: endTimeLabel,\n      timeSlot1: startTimeLabel24,\n      timeSlot2: endTimeLabel24,\n    };\n    if (startTime < 12) morningTime.push(timeObj);\n    else if (startTime < 17) afternoonTime.push(timeObj);\n    else if (startTime < 24) eveningTime.push(timeObj);\n    // else nightTime.push(timeObj);\n    startTime += interval;\n    endTime += interval;\n  }\n  return { morningTime, afternoonTime, eveningTime, nightTime };\n}\n\nfunction enumerateDaysBetweenDates(startDate, endDate) {\n  let now = startDate, dates = [];\n  while (now.isSameOrBefore(endDate)) {\n    dates.push(now.format('M/D/YYYY'));\n    now.add(1, 'days');\n  }\n  return dates;\n};\n\nconst SampleCollection = ({\n  cart,\n  sampleDetails: { schedule },\n  loadingSlots,\n  loading,\n  timeSlots,\n  labSlots,\n  getTimeSlots,\n  setSampleCollectionDetails,\n  getSampleCollectionDetails,\n  onContinue = () => {},\n  haveRadiology,\n  ambulatory,\n  defaultCollectionType,\n}) => {\n  const [days, setDays] = useState([]);\n  const [menuItems, setMenuItems] = useState(null);\n  const [selected, setSelected] = useState(moment().format(\"Do MMM\"));\n  const [time, setTime] = useState({ morningTime: [], eveningTime: [], afternoonTime: [], nightTime: [] });\n  const [isToday, setToday] = useState(false);\n  const [resetSlots, setSlots] = useState(0);\n  const [hideNextButton , setHideNextButton] = useState(false); \n  const {\n    morningTime,\n    eveningTime,\n    afternoonTime,\n    nightTime,\n  } = time;\n\n  // All items component\n  // Important! add unique key\n  const Menu = (days, selected) =>\n    days.map((date) => {\n      const formatDate = moment(date, \"MM/DD/YYYY\").format(\"Do MMM\");\n      const classes = classNames(\n        \"nav-item\",\n        \"nav-link\",\n        selected === formatDate ? \"date-active font-weight-semibold text-dark\": null\n      );\n      return (\n        <Link\n          to=\"#\"\n          key={formatDate}\n          className={classes}\n          onClick={() => handleSelectDate(date)}\n        >\n          {formatDate}\n        </Link>\n      );\n    });\n\n  const Arrow = ({ text, className }) => {\n    return <div className={className}>{text}</div>;\n  };\n\n  const ArrowLeft = Arrow({ text: \"<\", className: \"arrow-prev\" });\n  const ArrowRight = Arrow({ text: \">\", className: \"arrow-next\" });\n\n  // dynamically add active class\n  const [activeTimeId, setActiveTimeId] = useState(null);\n\n  const [scheduleCollection, setSchedule] = useState({\n    collectionType: defaultCollectionType,\n    day: moment().format(\"DD-MM-YYYY\"),\n    time_slot: [],\n  });\n\n  const changeCollectionType = (e) => {\n    e.preventDefault();\n    const type = e.target.value;\n    setSchedule({\n      ...scheduleCollection,\n      collectionType: type,\n    });\n    // onCollectionType(type);\n    setActiveTimeId(null);\n    setSlots(count => count+1);\n  };\n\n  const submitCollection = () => {\n    setHideNextButton(true);\n    setSampleCollectionDetails(cart, scheduleCollection).then(res => {\n      setHideNextButton(false);\n      if(res && res.status) {\n        onContinue();\n      }\n    })\n  };\n\n  const handleSelectDate = (date) => {\n    const userSelection = moment(date).format(\"Do MMM\");\n    setSelected(userSelection);\n    setSchedule({\n      ...scheduleCollection,\n      day: moment(date).format(\"DD-MM-YYYY\"),\n    });\n  };\n\n  const selectSlot = (time) => {\n    setActiveTimeId(time.timeSlot1);\n    setSchedule({\n      ...scheduleCollection,\n      time_slot: [time.timeSlot1, time.timeSlot2],\n    });\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      try {\n        if(subscribe && cart) {\n            getSampleCollectionDetails(cart);\n            const fromDate = moment();\n            const toDate   = moment().add(1, 'months');\n            const results = enumerateDaysBetweenDates(fromDate, toDate);\n            setDays(results)\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [cart]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      try {\n        if(subscribe) {\n          getTimeSlots();\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, []);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      try {\n        if(subscribe && timeSlots) {\n          const { to, from } = labSlots;\n          let { start, end } = timeSlots.sampleCollection;\n          if(scheduleCollection.collectionType !== \"home\") {\n            start = moment.utc().startOf('day').add(Math.min(to, from)+1, 'minutes').format('HH:mm');\n            end = moment.utc().startOf('day').add(Math.max(to, from)-1, 'minutes').format('HH:mm');\n          }\n          const slots = generateTimeSlots(start, end);\n          setTime({ ...slots });\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [timeSlots, setTime, resetSlots]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && schedule && schedule.collectionType) {\n          const scheduleObj = {\n            collectionType: schedule.collectionType,\n            day: schedule.schedule.day,\n            time_slot: schedule.schedule.slot,\n          };\n          const formatDate = moment(scheduleObj.day, \"DD-MM-YYYY\").format(\"Do MMM\");\n          setSchedule((schd) => ({\n            ...schd,\n            collectionType: schedule.collectionType,\n            day: schedule.schedule.day,\n            time_slot: schedule.schedule.slot,\n          }));\n          setSelected(formatDate);\n          setActiveTimeId(scheduleObj.time_slot[0]);\n          // setSlots(resetSlots+1);\n        }\n      }\n      catch(err) {\n        // throw err;\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [schedule]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      try {\n        if(subscribe && selected) {\n          let items = Menu(days, selected);\n          setMenuItems(items);\n          setToday(today === selected);\n          // setActiveTimeId(null); \n        }\n      }\n      catch(err) {\n        // throw err;\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [days, selected]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      try {\n        if(subscribe && selected) {\n          setSchedule((schedule) => ({...schedule, collectionType: defaultCollectionType}));\n        }\n      }\n      catch(err) {\n        // throw err;\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [defaultCollectionType]);\n\n  let showMorningSlots = false;\n  let showAfternoonSlots = false;\n  let showEveningSlots = false;\n\n  morningTime.map((slot, index) => {\n    const isDisabled = isToday && currentMinutes + 120 > slot.inMinS1;\n    if(!isDisabled) showMorningSlots = true;\n  })\n  afternoonTime.map((slot, index) => {\n    const isDisabled = isToday && currentMinutes + 120 > slot.inMinS1;\n    if(!isDisabled) showAfternoonSlots = true;\n  });\n  eveningTime.map((slot, index) => {\n    const isDisabled = isToday && currentMinutes + 120 > slot.inMinS1;\n    if(!isDisabled) showEveningSlots = true;\n  });\n\n\n  return loadingSlots ? (\n    <Spinner />\n  ) : (\n    <section className=\"sptb pb-0 pt-0\">\n      <Container>\n        <Row>\n          <Col>\n            <Card className=\"overflow-hidden\">\n              <Card.Body>\n                <div className=\"item-card9 blo\">\n                  <div className=\"froms\">\n                    <div className=\"control-group form-group\">\n                      <div className=\"form-group\">\n                        <label className=\"form-label text-dark\">\n                          I'm Intersted in\n                        </label>\n                        <select\n                          className=\"form-control select2\"\n                          onChange={(e) => changeCollectionType(e)}\n                          value={scheduleCollection.collectionType}\n                        >\n                          {\n                            !haveRadiology ?\n                              <>\n                                <option value=\"home\">Home Collection</option>\n                                <option value=\"walkin\">Walk In</option>\n                              </>\n                              :\n                              <>\n                                <option value=\"ambulatory\" disabled={!ambulatory}>Ambulatory</option>\n                                <option value=\"walkin\">Walk In</option>\n                              </>\n                          }\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"samp_list\">\n                    <div className=\"w-100 pt-3\">\n                      <ScrollMenu\n                        data={menuItems}\n                        arrowLeft={ArrowLeft}\n                        arrowRight={ArrowRight}\n                        scrollBy={5}\n                        wheel={true}\n                      />\n                      <div className=\"tab-content p-3\" id=\"myTabContent\">\n                        <div\n                          role=\"tabpanel\"\n                          className=\"tab-pane fade active show mt-2\"\n                          id=\"tab1\"\n                          aria-labelledby=\"public-tab\"\n                          aria-expanded=\"true\"\n                        >\n                          {\n                            showMorningSlots && morningTime.length > 0 && <>\n                              <Suspense>\n                                <Image src={Morning} alt=\"morning\" width={20} height={20} className=\"mr-2\"/>\n                              </Suspense>\n                              <span>Morning</span>\n                              <ul className=\"list_view\">\n                              { \n                                morningTime.map((slot, index) => {\n                                  const isDisabled = isToday && currentMinutes + 120 > slot.inMinS1;\n                                  const classes = classNames(\n                                    \"btn\",\n                                    \"rounded-pill\",\n                                    \"slot-padding\",\n                                    \"slot\",\n                                    \"fs-11\",\n                                    isDisabled && \"disabled\",\n                                    activeTimeId === slot.timeSlot1 ? \"time-slots-border\": null\n                                  );\n                                  return (<li key={index}>\n                                    <a\n                                      className={classes}\n                                      href=\"#\"\n                                      name=\"day\"\n                                      id={slot.timeSlot1}\n                                      onClick={(e) => { \n                                        e.preventDefault(); \n                                        if(isDisabled) return alert(\"You can't  select this time slot.\");\n                                        selectSlot(slot);\n                                      }}\n                                    >{slot.time}</a>\n                                  </li>)\n                                })\n                                  \n                              }\n                              </ul>\n                            </>\n                          }\n                          {\n                            showAfternoonSlots && afternoonTime.length > 0 && <>\n                              <Suspense>\n                                <Image src={Afternoon} alt=\"afternoon\" width={20} height={20} className=\"mr-2\"/>\n                              </Suspense>\n                              <span>Afternoon</span>\n                              <ul className=\"list_view\">\n                              { \n                                afternoonTime.map((slot, index) => {\n                                  const isDisabled = isToday && currentMinutes + 120 > slot.inMinS1;\n                                  showAfternoonSlots = isDisabled;\n                                  const classes = classNames(\n                                    \"btn\",\n                                    \"rounded-pill\",\n                                    \"slot-padding\",\n                                    \"slot\",\n                                    \"fs-11\",\n                                    isDisabled && \"disabled\",\n                                    activeTimeId === slot.timeSlot1 ? \"time-slots-border\": null\n                                  );\n                                  return (<li key={index}>\n                                    <a\n                                      className={classes}\n                                      href=\"#\"\n                                      name=\"day\"\n                                      id={slot.timeSlot1}\n                                      onClick={(e) => { \n                                        e.preventDefault(); \n                                        if(isDisabled) return alert(\"You can't  select this time slot.\");\n                                        selectSlot(slot);\n                                      }}\n                                    >{slot.time}</a>\n                                  </li>)\n                                })\n                              }\n                              </ul>\n                            </>\n                          }\n                          {\n                            showEveningSlots && eveningTime.length > 0 && <>\n                              <Suspense>\n                                <Image src={Evening} alt=\"evening\" width={20} height={20} className=\"mr-2\"/>\n                              </Suspense>\n                              <span>Evening</span>\n                              <ul className=\"list_view\">\n                              { \n                                eveningTime.map((slot, index) => {\n                                  const isDisabled = isToday && currentMinutes + 120 > slot.inMinS1;\n                                  const classes = classNames(\n                                    \"btn\",\n                                    \"rounded-pill\",\n                                    \"slot-padding\",\n                                    \"slot\",\n                                    \"fs-11\",\n                                    isDisabled && \"disabled\",\n                                    activeTimeId === slot.timeSlot1 ? \"time-slots-border\": null\n                                  );\n                                  return (<li key={index}>\n                                    <a\n                                      className={classes}\n                                      href=\"#\"\n                                      name=\"day\"\n                                      id={slot.timeSlot1}\n                                      onClick={(e) => { \n                                        e.preventDefault(); \n                                        if(isDisabled) return alert(\"You can't  select this time slot.\");\n                                        selectSlot(slot);\n                                      }}\n                                    >{slot.time}</a>\n                                  </li>)\n                                })\n                                  \n                              }\n                              </ul>\n                            </>\n                          }\n                          {\n                            loading ? (<span>Loading...</span>): (\n                              scheduleCollection.time_slot?.length > 0 && <div className=\"text-right pt-5\">\n                                <Button\n                                  variant={hideNextButton ? \"disable\" : \"primary\"}\n                                  className=\"addbt btn font-weight-bold\"\n                                  style={{ minWidth: 101 }}\n                                  onClick={submitCollection}\n                                >\n                                  Next <FaLongArrowAltRight />\n                                </Button>\n                              </div>\n                            )\n                          }\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nSampleCollection.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  onContinue: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  timeSlots: state.misc.timeSlots,\n  loadingSlots: state.misc.loadingTimeSlots,\n  loading: state.sampleCollection.loadingSampleDetails,\n  sampleDetails: state.sampleCollection.sampleDetails,\n});\n\nexport default connect(mapStateToProps, {\n  getTimeSlots,\n  setSampleCollectionDetails,\n  getSampleCollectionDetails,\n  getCartDetails,\n})(withRouter(SampleCollection));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/Register.js",["1101"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { register, checkUserExistence, loadUser, loadPage, setErrors, removeErrors, custom_alert } from \"actions/auth\";\nimport Loader from \"views/Spinner\";\nimport * as Constants from \"constants/index\";\nimport Errors from \"views/Notifications/Errors\";\nimport { validateForm, validatePhoneNumber, validateCountryCode } from \"utils/validation\";\nimport { auth } from \"utils/firebase\";\nimport VerifyOTP from \"./VerifyOTP\";\nimport { FaPhone, FaUser } from \"react-icons/fa\";\nimport validateUtility from \"../plugins/validateUtility\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Tab,\n  Form,\n  Button,\n  Nav,\n} from \"react-bootstrap\";\n\nimport {\n  Spinner\n} from 'reactstrap';\n\n// auth().settings.appVerificationDisabledForTesting = true;\n// Default Browser language\nauth().useDeviceLanguage();\n\nconst Register = ({\n  register,\n  checkUserExistence,\n  loadUser,\n  loadPage,\n  loading,\n  errorList,\n  isAuthenticated,\n  history,\n  citySearch: { currentCity },\n  setErrors,\n  custom_alert,\n  removeErrors,\n}) => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    ccode: \"+91\",\n    mobile: \"\",\n    phone: \"\",\n    city: \"\",\n    userType: Constants.CUSTOMER_ROLE,\n  });\n\n  const [FirebaseConfirm, setFirebaseConfirm] = useState(null);\n  const [verifyMobile, setVerifyMobile ] = useState(false);\n  const [verifyOTP, setVerifyOTP] = useState(false);\n\n  const recaptchaBlock = useRef(null);\n\n  const { phone, name, ccode } = formData;\n  const onChange = e => {\n    const { name, value } = e.target;\n    switch(name) {\n      case \"phone\":\n        setFormData({ ...formData, [name]: value, mobile: \"\" });\n        break;\n      default:\n        setFormData({ ...formData, [name]: allowOnlyOneSpace(value) });\n    }\n  }\n\n  const allowOnlyOneSpace = str => {\n    return str.endsWith(\" \") ? str.trim() + \" \" : str.trim();\n  };\n  \n  const createAuthObject = async (phone, captchaObject) => {\n    const confirmSignIn = await auth().signInWithPhoneNumber(phone, captchaObject);\n    setFirebaseConfirm(confirmSignIn);\n  }\n\n  const onCaptchaPass = () => {\n    setVerifyMobile(false);\n    setVerifyOTP(true);\n  }\n\n  const renderCaptcha = async (phone) => {\n    const captchaObj = window.recaptchaVerifier;\n    captchaObj.render().then((res) => {\n      createAuthObject(phone, captchaObj);\n    }).catch(err => {\n      // console.log(\"unable to render the captcha\", err.code, err.message);\n    }); \n  }\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(formData, [\n      {\n        \"msg\": \"Please provide a name\",\n        \"param\": \"name\"\n      },\n      {\n        \"msg\": \"Please provide a valid 10 digits mobile number with country code\",\n        \"param\": \"phone\"\n      }], setErrors);\n    if(!noErrors) return;\n    const contact = phone;\n    if(!validateCountryCode(ccode))\n      return setErrors([{\n        param: \"phone\",\n        msg: \"Please use a valid country code. Currently we are only serving in India\",\n      }]);\n    if(!validatePhoneNumber(contact)) \n      return setErrors([{\n        param: \"phone\",\n        msg: \"Please provide a valid 10 digits mobile number\",\n      }]);\n    const iute164_phone = ccode+contact;\n    setFormData((form) => ({ ...form, mobile: contact }));\n    try {\n      setVerifyMobile(true);\n      const is_user_exists = await checkUserExistence(iute164_phone);\n      if(!is_user_exists) {\n        if(!window.recaptchaVerifier || window.recaptchaVerifier.m.id !== \"recaptcha-container-register\") {\n          window.recaptchaVerifier = new auth.RecaptchaVerifier(recaptchaBlock.current, {\n            'size': 'invisible',\n            'callback': (response) => {\n              onCaptchaPass();\n            }\n          });\n        }\n        renderCaptcha(iute164_phone);   \n      } else {\n        setVerifyMobile(false);\n        return setErrors([{\n          param: \"phone\",\n          msg: \"Provided phone number is associated with another account.\",\n        }]);\n      }\n    }\n    catch(err) {\n      console.log('error', err);\n      setVerifyMobile(false);\n      // throw err;\n    }\n  };\n\n  const verificationCancelled = () => { setVerifyOTP(false) };\n  const verificationSuccess = (auth) => { \n    setVerifyOTP(false);\n    // Login User\n    auth.getIdToken().then((token) => {\n      register({ \n        first_name: formData.name,\n        ccode: formData.ccode,\n        phone: formData.mobile,\n        token,\n        city: formData.city,\n        userType: formData.userType\n      });\n    }).catch(err => { \n      console.log(\"err\", err); \n      custom_alert(\"Unable to verify your identify. Please try again later\")\n    });\n  };\n\n  useEffect(() => {\n    if(currentCity) {\n      setFormData((form) => ({\n        ...form,\n        city: currentCity.place,\n      }))\n    }\n  }, [currentCity]);\n\n  return loading ? (\n    <Loader />\n  ) : (\n    <section className=\"sptb home_login\" id=\"content\">\n      <Container className=\"customerpage\">\n        <Row>\n          <Col xl={4} lg={5} md={6} className=\"d-block mx-auto\">\n            <Row>\n              <Col xl={12} md={12} className=\"register-right\">\n                <h4 className=\"text-dark mx-auto\">Register</h4>\n                <Tab.Content>\n                  <Tab.Pane className=\"fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                    <div className=\"single-page w-100 p-0\">\n                      <div className=\"wrapper wrapper2 log border-0\">\n                        <Form onSubmit={e => onSubmit(e)} id=\"login\" tabIndex=\"500\">\n                          <Form.Group controlId=\"name\" style={{ textAlign: \"left\" }}>\n                            <i className=\"mail\">\n                              <FaUser className=\"rY-180\"/>\n                            </i>\n                            <Form.Control \n                              type=\"text\"\n                              placeholder=\"Enter your name\"\n                              autoComplete=\"name\"\n                              name=\"name\"\n                              maxLength=\"50\"\n                              disabled={verifyMobile}\n                              value={name}\n                              data-vu-type = \"alphawithspace\"\n                              onKeyDown={ (e) => validateUtility.stopDefault(e)}\n                              onChange={e => onChange(e)}\n                              style={{ paddingLeft: 61, borderRadius: 30 }}\n                              required\n                              isInvalid={errorList.name ? true : false}\n                            />\n                            <Errors current_key=\"name\" key=\"name\" />\n                          </Form.Group>\n                          <Form.Group controlId=\"phone\" style={{ textAlign: \"left\" }}>\n                            <i className=\"mail\">\n                              <FaPhone className=\"rY-180\"/>\n                            </i>\n                            <Form.Control \n                              type=\"text\"\n                              placeholder=\"Enter your phone number\"\n                              autoComplete=\"phone\"\n                              name=\"phone\"\n                              maxLength=\"10\"\n                              disabled={verifyMobile}\n                              value={phone}\n                              onChange={e => onChange(e)}\n                              style={{ paddingLeft: 61, borderRadius: 30 }}\n                              required\n                              isInvalid={errorList.phone ? true : false}\n                            />\n                            <Errors current_key=\"phone\" key=\"phone\" />\n                          </Form.Group>\n                          {\n                            verifyMobile ?\n                            (\n                              <div className=\"mt-7 mb-2\">\n                                <Spinner\n                                  color=\"warning\"\n                                />\n                              </div>\n                            )\n                            :\n                            (\n                              <div className=\"mt-7 mb-2\">\n                                <div className=\"submit\">\n                                  <Button \n                                    color=\"primary\"\n                                    className=\"btn-block\"\n                                    type=\"submit\"\n                                  >\n                                    Continue\n                                  </Button>\n                                </div>\n                                <p className=\"text-dark mb-0 mt-2\">Already a member? \n                                  <Link \n                                    to=\"login\"\n                                    className=\"text-primary ml-1\"\n                                  >Sign In\n                                  </Link>\n                                </p>\n                              </div>\n                            )\n                          }\n                        </Form>\n                      </div>\n                    </div>\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n      <VerifyOTP \n        show={verifyOTP}\n        firebaseAuth={FirebaseConfirm}\n        setErrors={setErrors}\n        removeErrors={removeErrors}\n        onConfirm={verificationSuccess}\n        onReject={verificationCancelled}\n      />\n      <div >\n        <div id=\"recaptcha-container-register\" ref={recaptchaBlock}></div>\n      </div>\n    </section>)\n};\n\n\n\nRegister.proTypes = {\n  errorList: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  loadUser: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  loading: state.auth.loading,\n  citySearch: state.citySearch,\n  errorList: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  custom_alert,\n  checkUserExistence,\n  loadUser,\n  loadPage,\n  setErrors,\n  removeErrors,\n})(withRouter(Register));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/Login.js",["1102","1103","1104","1105"],"import React, { useState, useRef, useMemo, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { login, checkUserExistence, loadUser, loadPage, setErrors, removeErrors, custom_alert } from \"actions/auth\";\nimport Loader from \"views/Spinner\";\nimport * as Constants from \"constants/index\";\nimport Errors from \"views/Notifications/Errors\";\nimport { validateForm, validatePhoneNumber, validateCountryCode } from \"utils/validation\";\nimport { auth } from \"utils/firebase\";\nimport VerifyOTP from \"./VerifyOTP\";\nimport { FaPhone } from \"react-icons/fa\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Tab,\n  Form,\n  Button,\n  Nav,\n} from \"react-bootstrap\";\n\nimport {\n  Spinner\n} from 'reactstrap';\n\n// auth().settings.appVerificationDisabledForTesting = true;\n// Default Browser language\nauth().useDeviceLanguage();\nlet onlyOnce = true;\n\nconst Login = ({\n  login,\n  checkUserExistence,\n  loadUser,\n  loadPage,\n  loading,\n  errorList,\n  isAuthenticated,\n  history,\n  setErrors,\n  custom_alert,\n  removeErrors,\n}) => {\n  const [formData, setFormData] = useState({\n    ccode: \"+91\",\n    mobile: \"\",\n    phone: \"\",\n    userType: Constants.CUSTOMER_ROLE,\n  });\n\n  const [FirebaseConfirm, setFirebaseConfirm] = useState(null);\n  const [verifyMobile, setVerifyMobile ] = useState(false);\n  const [verifyOTP, setVerifyOTP] = useState(false);\n  const [resendOtpFlag, setResendOtpFlag] = useState(false);\n\n  const recaptchaBlock = useRef(null);\n\n  const { phone, ccode } = formData;\n  const onChange = e => {\n    setFormData({ ...formData, [e.target.name]: e.target.value, mobile: \"\" });\n  }\n\n  const createAuthObject = async (phone, captchaObject) => {\n    const confirmSignIn = await auth().signInWithPhoneNumber(phone, captchaObject);\n    setFirebaseConfirm(confirmSignIn);\n  }\n\n  const onCaptchaPass = () => {\n    setVerifyMobile(false);\n    setVerifyOTP(true);\n  }\n\n  const renderCaptcha = async (phone , resendOtpFlag) => {\n    console.log(resendOtpFlag)\n    setResendOtpFlag(resendOtpFlag);\n    const captchaObj = window.recaptchaVerifier;\n    captchaObj.render().then((res) => {\n      createAuthObject(phone, captchaObj);\n    }).catch(err => {\n      // console.log(\"unable to render the captcha\", err.code, err.message);\n    }); \n  }\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(formData, [{\n      \"msg\": \"Please provide a valid 10 digits mobile number with country code\",\n      \"param\": \"phone\"\n    }], setErrors);\n    if(!noErrors) return;\n    // const splitContact = phone.split(\"-\");\n    // if(splitContact.length === 2) {\n    // const ccode = splitContact[0].trim();\n    const contact = phone; //splitContact[1].trim();\n    if(!validateCountryCode(ccode))\n      return setErrors([{\n        param: \"phone\",\n        msg: \"Please use a valid country code. Currently we are only serving in India\",\n      }]);\n    if(!validatePhoneNumber(contact)) \n      return setErrors([{\n        param: \"phone\",\n        msg: \"Please provide a valid 10 digits mobile number\",\n      }]);\n    const iute164_phone = ccode+contact;\n    setFormData({ ...formData, mobile: contact });\n    try {\n      setVerifyMobile(true);\n      const is_user_exists = await checkUserExistence(iute164_phone);\n      if(is_user_exists) {\n        if(!window.recaptchaVerifier || window.recaptchaVerifier.m.id !== \"recaptcha-container-login\") {\n          window.recaptchaVerifier = new auth.RecaptchaVerifier(recaptchaBlock.current, {\n            'size': 'invisible',\n            'render': 'explicit',\n            'callback': (response) => {\n              onCaptchaPass();\n            }\n          });\n        }\n        renderCaptcha(iute164_phone);      \n      } else {\n        setVerifyMobile(false);\n        return setErrors([{\n          param: \"phone\",\n          msg: \"Provided phone number is not associated with any account.\",\n        }]);\n      }\n    }\n    catch(err) {\n      console.log('error', err);\n      setVerifyMobile(false);\n      // throw err;\n    }\n  };\n\n  const verificationCancelled = () => { setVerifyOTP(false); window.recaptchaVerifier?.reset(); };\n  const verificationSuccess = (auth) => { \n    setVerifyOTP(false);\n    // Login User\n    auth.getIdToken().then((token) => {\n      login({ ccode, phone: formData.mobile, token, userType: formData.userType });\n    }).catch(err => { \n      console.log(\"err\", err); \n      custom_alert(\"Unable to verify your identify. Please try again later\")\n    });\n  };\n  return loading ? (\n    <Loader />\n  ) : (\n    <section className=\"sptb home_login\">\n      <Container className=\"customerpage\">\n        <Row>\n          <Col xl={4} lg={5} md={6} className=\"d-block mx-auto\">\n            <Row>\n              <Col xl={12} md={12} className=\"register-right\">\n                <h4 className=\"text-dark mx-auto\">Login to your Account</h4>\n                <Tab.Content>\n                  <Tab.Pane className=\"fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                    <div className=\"single-page w-100 p-0\">\n                      <div className=\"wrapper wrapper2 log\">\n                        <Form onSubmit={onSubmit}  id=\"login\" tabIndex=\"500\">\n                          <Form.Group controlId=\"phone\" style={{ textAlign: \"left\" }}>\n                            <i className=\"mail\">\n                              <FaPhone className=\"rY-180\"/>\n                            </i>\n                            <Form.Control \n                              type=\"text\"\n                              placeholder=\"Enter your phone number\"\n                              autoComplete=\"phone\"\n                              name=\"phone\"\n                              maxLength=\"10\"\n                              disabled={verifyMobile}\n                              value={phone}\n                              onChange={e => onChange(e)}\n                              style={{ paddingLeft: 61, borderRadius: 30 }}\n                              required\n                              isInvalid={errorList.phone ? true : false}\n                            />\n                            <Errors current_key=\"phone\" key=\"phone\" />\n                          </Form.Group>\n                          {\n                            verifyMobile ?\n                            (\n                              <div className=\"mt-7 mb-2\">\n                                <Spinner\n                                  color=\"warning\"\n                                />\n                              </div>\n                            )\n                            :\n                            (\n                              <div className=\"mt-7 mb-2\">\n                                <div className=\"submit\">\n                                  <Button \n                                    color=\"primary\"\n                                    className=\"btn-block\"\n                                    id=\"login-btn\"\n                                    type=\"submit\"\n                                  >\n                                    Continue\n                                  </Button>\n                                </div>\n                                <p className=\"text-dark mb-0 mt-2\">New Member? \n                                  <Link \n                                    to=\"register\"\n                                    className=\"text-primary ml-1\"\n                                  >Sign Up\n                                  </Link>\n                                </p>\n                              </div>\n                            )\n                          }\n                        </Form>\n                      </div>\n                    </div>\n                  </Tab.Pane>\n                </Tab.Content>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n      {verifyOTP && <VerifyOTP \n        show={verifyOTP}\n        resenOtpTimer = {30}\n        firebaseAuth={FirebaseConfirm}\n        renderCaptcha = { () => renderCaptcha( ccode+ phone , true  )}\n        resendOtpFlag = {resendOtpFlag}\n        setErrors={setErrors}\n        removeErrors={removeErrors}\n        onConfirm={verificationSuccess}\n        onReject={verificationCancelled}\n      />}\n      <div id=\"recaptcha-container-login\" ref={recaptchaBlock}></div>\n    </section>)\n};\n\n\n\nLogin.proTypes = {\n  errorList: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  loadUser: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  loading: state.auth.loading,\n  errorList: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  custom_alert,\n  checkUserExistence,\n  loadUser,\n  loadPage,\n  setErrors,\n  removeErrors,\n})(Login);\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/TransactionHistory.js",["1106","1107","1108","1109"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory,  { \n  PaginationProvider, \n  PaginationTotalStandalone,\n} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport { getWalletTransactions } from \"actions/customer/wallet\";\nimport * as Constants from \"constants/index\";\nimport moment from \"moment\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport Moment from \"react-moment\";\n\nconst statusMsg = {\n  0: \"Failed\",\n  1: \"Success\",\n  2: \"Pending\"\n};\n\nconst TransactionHistory = ({\n  getWalletTransactions,\n  transactions: { page, data, count },\n  sortingParams,\n  loading,\n  currency,\n}) => {\n  const initialSortingParams = {\n    limit: 10,\n    page: 1\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n\n  const columns = [\n    {\n      dataField: \"transaction\",\n      text: \"Transaction\",\n      formatter: (col, row) => {\n        const { _id, transactionID, orderID, description, payment_at } = row;\n        // const time = moment(payment_at, unix).format(\"LLLL\"); // 3 Nov, 7:27 PM\n        const timeinS = Math.ceil(payment_at/1000);\n        return (\n          <div className=\"full_list\">\n\t\t\t\t\t\t<h5>{description}<span><Moment unix format=\"Do MMM YYYY, hh:mm A\">{timeinS}</Moment></span></h5>\n            { transactionID && <p>Transaction ID: <span>{transactionID}</span></p> }\n            <p>Order ID: <span>#{orderID}</span></p>\n          </div>\n        )\n      }\n    },\n    {\n      dataField: \"amount\",\n      text: \"Amount\",\n      classes: \"font-weight-semibold fs-16\",\n      formatter: (col, row) => {\n        const type = row.type;\n        const symbol = type === \"CR\" ? \"+\":\"-\";\n        const amount = type === \"DR\" ? -col: col;\n        return (\n          <span className={type === \"CR\"? 'text-success': 'text-danger'}>\n            {`${symbol} ${CURRENCY_SYMBOL[currency]} ${amount}`}\n          </span>\n        )\n      }\n    },\n    // {\n    //   dataField: \"status\",\n    //   text: \"Status\",\n    //   formatter: (col) => statusMsg[col]\n    // }\n  ];\n\n  // useMemo(() => {\n  //   getWalletTransactions(listParams)\n  // }, [getWalletTransactions, listParams]);\n\n  useEffect(() => {\n    getWalletTransactions(listParams)\n  }, [getWalletTransactions, listParams]);\n\n  const options = {\n    page: parseInt(listParams.page),\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    lastPageText: 'Last',\n    withFirstAndLast: true,\n    hideSizePerPage: true, // Hide the sizePerPage dropdown always\n    hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n    hideSizePerPageRenderer: true,\n    showTotal: true,\n    totalSize: count,\n    paginationTotalRenderer: () => { return null },\n    sizePerPage: listParams.limit || data.length,\n  };\n\n  const handleTableChange = (\n    type,\n    { page }\n  ) => {\n    let params = {\n      ...sortingParams,\n      page: type === \"search\" ? 1 : page,\n    };\n    setListParams(params);\n  };\n\n  return (\n    <Card className=\"mb-0\">\n      <Card.Header>\n        <h3 className=\"card-title\">\n          Transaction History\n        </h3>\n      </Card.Header>\n      <Card.Body className=\"wall_table\">\n        <PaginationProvider\n          pagination={paginationFactory(options) }\n          keyField=\"_id\"\n          columns={columns}\n          data={data}\n        >\n        {\n          ({\n            paginationProps,\n            paginationTableProps,\n          }) => \n            <ToolkitProvider\n              keyField=\"_id\"\n              data={data}\n              columns={columns}\n              search\n            >\n              {\n                toolkitprops => (\n                <>\n                  <PaginationTotalStandalone  \n                    {...paginationProps}\n                  />\n                  <BootstrapTable\n                    {...toolkitprops.baseProps}\n                    bootstrap4\n                    remote={{ pagination: count > 0 }}\n                    keyField=\"_id\"\n                    data={data}\n                    columns={columns}\n                    loading={loading}\n                    {...paginationTableProps}\n                    onTableChange={handleTableChange}\n                    noDataIndication={Constants.NO_RECORD}\n                    bordered={false}\n                    overlay={ overlayFactory({ \n                        spinner: true, \n                        styles: { overlay: (base) => ({...base, background: 'rgba(192,192,192,0.7)'}) } \n                      }) \n                    }\n                  />\n                </>\n              )}\n            </ToolkitProvider>\n        }\n        </PaginationProvider>\n      </Card.Body>\n    </Card>\n  )\n}\n\nTransactionHistory.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  transactions: PropTypes.object.isRequired,\n  getWalletTransactions: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.wallet.loadingTransactions,\n  transactions: state.wallet.transactionsList,\n  sortingParams: state.wallet.sortingParams,\n  currency: state.wallet.currency,\n});\n\nexport default connect(mapStateToProps, {\n  getWalletTransactions\n})(TransactionHistory);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/Balance.js",["1110","1111"],"import React, { useEffect, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Image } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { getWalletBalance } from \"actions/customer/wallet\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport wallet from \"assets/images/wallet.png\";\n\nconst Balance = ({\n  loading,\n  getWalletBalance,\n  balance,\n  currency,\n}) => {\n  \n  // useMemo(() => {\n  //   getWalletBalance();\n  // }, []);\n\n  useEffect(() => {\n    getWalletBalance();\n  }, []);\n\n  const loadingBlock = () => {\n    return <div className=\"linear-loading\"></div>\n  }\n\n  return (\n    <Col md={12}>\n      <div className=\"pay_book\">\n        <Image src={wallet} alt=\"wallet\" />\n        { loading ? loadingBlock(): (<h4>Wallet Amount <span>{ `${CURRENCY_SYMBOL[currency]} ${balance}` }</span></h4>) }\n      </div>\n    </Col>\n  )\n}\n\nBalance.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  balance: PropTypes.number.isRequired,\n  getWalletBalance: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.wallet.loadingWalletBalance,\n  balance: state.wallet.walletBalance,\n  currency: state.wallet.currency\n});\n\nexport default connect(mapStateToProps, {\n  getWalletBalance\n})(Balance);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Wallet/AddMoney.js",["1112","1113"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Form, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { addMoney, resetComponentStore } from \"actions/customer/wallet\";\nimport { verifyPayment, failedPayment} from \"actions/order/order\";\nimport { withRouter } from \"react-router-dom\";\nimport Spinner from \"views/Spinner\";\n\nconst AddMoney = ({\n  loading,\n  addMoney,\n  verifyPayment,\n  failedPayment,\n  history,\n  resetComponentStore,\n}) => {\n  const [amount, setAmount] = useState(\"\");\n  // useMemo(() => {\n  //   const script = document.createElement('script');\n  //   script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n  //   script.async = true;\n  //   document.body.appendChild(script);\n  // }, []);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n    script.async = true;\n    document.body.appendChild(script);\n  }, []);\n\n  const onChange = (e) => {    \n    \n    const { name, value } = e.target;\n\n    switch(name) {\n      case \"amount\":\n        setAmount(value);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const paymentHandler = (callback_url) => (res) => {\n    if(callback_url) {\n      verifyPayment(callback_url, res, history);\n    }\n  }\n\n  const failHandler = (rzp) => (response) => {\n    if(response.error) {\n      if(rzp) {\n        rzp.close();\n        failedPayment(response.error, history);\n      }\n    }\n  }\n\n  const add = (e) => {\n    e.preventDefault();\n    addMoney({ amount, currency: \"INR\" }).then(res => {\n      // Implement Razor Pay\n      if(res && res.status) {\n        const options = res.response.options;\n        const handler = paymentHandler(options.callback_url);\n        const rzp_options = {\n          ...options,\n          handler,\n        };\n        const rzp = new window.Razorpay(rzp_options);\n        rzp.open();\n        rzp.on('payment.failed', failHandler(rzp));\n      }\n    });\n  }\n\n  const stopDefault = (e) => {\n    if(e.target.value == '0'){\n       setAmount('');\n    }\n  }\n  return (\n    <Col md={12}>\n      <h3 className=\"headtext\">Add Money To Wallet</h3>\n      <div className=\"add_money\">\n        <Form onSubmit={add}>\n          <Form.Group>\n            <Form.Control \n              placeholder=\"Enter Amount\"\n              name=\"amount\"\n              id=\"amount\"\n              type=\"text\"\n              onKeyUp={ e =>  stopDefault(e)  }\n              onChange={onChange}\n              value={amount}\n            />\n            <Form.Text className=\"text-muted\">\n              Amount must be in multiple of 10 (Ex: 10, 50, 100,...).\n            </Form.Text>\n          </Form.Group>\n          { loading ? <Spinner />: (<Button\n            size=\"sm\"\n            type=\"submit\"\n          >\n            Add Money\n          </Button>)\n          }\n        </Form>\n      </div>\n    </Col>\n  )\n}\n\nAddMoney.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  addMoney: PropTypes.func.isRequired,\n  verifyPayment: PropTypes.func.isRequired,\n  failedPayment: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.wallet.loadingMoney\n});\n\nexport default connect(mapStateToProps, {\n  addMoney,\n  verifyPayment,\n  failedPayment,\n  resetComponentStore\n})(withRouter(AddMoney));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/Failed.js",["1114"],"import React from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { useLocation, withRouter, Link } from \"react-router-dom\";\nimport { FaTimesCircle } from \"react-icons/fa\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\n\nconst Failed = () => {\n\n\n  const location = useLocation();\n  const {\n    orderID,\n    transactionID,\n    paymentStatus,\n    amount,\n    currency,\n  } = location.state.payment;\n  const amountString = CURRENCY_SYMBOL[currency] + \" \" + amount;\n\n  return (\n    <section className=\"sptb\">\n      <Container>\n        <Row>\n          <Col>\n            <Card className=\"pay-success\">\n              <div className=\"p-3 text-center mt-5\">\n                <h3>Order Failed!</h3>\n              </div>\n              <div className=\"mt-5 mb-5 ml-auto mr-auto\">\n                <FaTimesCircle size={80} color=\"#df4131\"/>\n              </div>\n              <Container className=\"p-0\">\n                <Row className=\"m-0\">\n                  <Col className=\"p-3 pl-md-6\">\n                    <p className=\"mb-0\">Order ID</p>\n                    <p className=\"mb-0\"><b>#{orderID}</b></p>\n                  </Col>\n                  { transactionID && <Col className=\"p-3 pl-md-6\">\n                    <p className=\"mb-0\">Transaction ID</p>\n                    <p className=\"mb-0\"><b>{transactionID}</b></p>\n                  </Col> }\n                  <Col className=\"p-3 pl-md-6\">\n                    <p className=\"mb-0\">Payment Amount</p>\n                    <p className=\"mb-0\"><b>{amountString}</b></p>\n                  </Col>\n                </Row> \n                <div className=\"mb-5 text-center\" style={{ marginTop: \"15%\" }}>\n                  <Link \n                    to=\"/lab-tests\" \n                    className=\"btn btn-primary w-50\"\n                  >Back To Home</Link>\n                </div>\n              </Container>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\nexport default withRouter(Failed);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Rating.js",["1115","1116"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { IoMdStar, IoMdStarHalf } from \"react-icons/io\";\nimport uuid from \"uuid\";\n\nconst Rating = ({ ratings, fontSize = 12, ratingClass=\"text-success\" }) => {\n  const [stars, setStars] = useState([]);\n\n  const drawStars = () => {\n    const data = [];\n    const whole = Math.floor(ratings);\n    const half = Math.round(ratings*10)%10;\n    for(let i=0; i < 5; i++){\n      let className = `fs-${fontSize} `;\n      if(i < whole) {\n        className += ratingClass;\n        data.push(<IoMdStar className={`${className}`} key={`star_${uuid.v4()}`}/>);\n      }\n      else if(i === whole && half > 4) {\n        className += ratingClass;\n        data.push(<IoMdStarHalf className={`${className}`}  key={`star_${uuid.v4()}`}/>);\n      }\n      else data.push(<IoMdStar className={`${className}`}  key={`star_${uuid.v4()}`}/>);\n    }\n    // if(half > 4) data.push(<IoMdStarHalf />)\n    setStars([...data]);\n  }\n  \n  // useMemo(() => drawStars(), []);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe) {\n          drawStars();\n        }\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, []);\n  return stars.map(star => star);\n}\n\nexport default React.memo(Rating);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/Prescription.js",["1117","1118","1119","1120"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { Col, Card, Image, Container, Row, Modal, Form, Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"views/Spinner\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\nimport {\n\tgetPrescriptionList,\n\tdeletePrescription,\n  setErrors,\n  removeErrors,\n  uploaded,\n  } from \"actions/customer/prescription\";\nimport Errors from \"views/Notifications/Errors\";\n\nconst Prescription = ({\n\tauth : {user},\n\tloading,\n\tperformDelete,\n\tprescriptionList,\n\tgetPrescriptionList,\n\tdeletePrescription,\n  setErrors,\n  removeErrors,\n  uploaded,\n  history,\n  }) => {\nconst parseExtension = (filename) => {\n  const extensionsList = filename.split('.');\n  const extLen = extensionsList.length;\n  return extensionsList[extLen - 1];\n}\nconst initialSortingParams = {\n  limit: 100,\n  page: 1,\n  orderBy: 'created_at',\n  ascending: 'desc'\n};\nconst [prescriptionParams, setPrescriptionParams] = useState(initialSortingParams);\n\n// useMemo(() => {\n// \tgetPrescriptionList(prescriptionParams);\n// },[prescriptionParams,performDelete])\n\nuseEffect(() => {\n\tgetPrescriptionList(prescriptionParams);\n},[prescriptionParams])\n\nuseEffect(() => {\n  setSelectedPrescription(null);\n},[loading]);\n\nconst handleImageRemove = (removedImageId) => {\n\tif (\n\t\twindow.confirm(\n\t\t  `Are you sure you want to delete?`\n\t\t)\n\t  ) {\n\t\tdeletePrescription(removedImageId);\n\t  }\n  };\n\nconst [imageDisplay, setImageDisplay] = useState(null);\nconst [show, setShow] = useState(false);\nconst [selectedPrescription, setSelectedPrescription] = useState(null);\n\nconst handleClose = () => {\n  setImageDisplay(null);\n  setShow(false);\n}\nconst handleShow = (src) => {\n  // setImageDisplay(e.target.src);\n  setImageDisplay(src);\n  setShow(true);\n}\n\nconst onChange = (e) => {\n  setSelectedPrescription(e.target.value);\n};\n\nconst validateForm = (form, requireFields) => {\n  const errors = [];\n  if (form === null) {\n    errors.push({\n      param: requireFields.param,\n      msg: requireFields.msg,\n    });\n  }\n  if (errors.length) {\n    setErrors(errors);\n  }\n  return !errors.length;\n};\n\nconst onSubmit = e => {\n  e.preventDefault();\n  removeErrors();\n    if(!validateForm(selectedPrescription,\n      {\n        param:\"link\",\n        msg: 'Please Select Prescription',\n      }\n    )) return;\n    uploaded(history,selectedPrescription).then((res) => {if(res) history.push({\n      pathname: \"/prescription-upload-success\", \n      state: { prescription: {\n        orderRefId: res,\n      }}\n    });\n   }\n   //  {if(res) getPrescriptionList(prescriptionParams)}\n     );\n};\n\nreturn loading ?\n  <Spinner /> : (\n  <section className=\"sptb\">\n    <Container className=\"container\">\n    <Row className=\"row \">\n      <Col className=\"col-lg-12 col-md-12 col-md-12\">\n        <Card className=\"card overflow-hidden\">\n          <div className=\"\">\n            <Row className=\"row\">\n              <Col className=\"col-md-12\">\n                <Card className=\"card border-0 mb-0\">\n                  <Card.Body className=\"card-body\">\n                    <div className=\"item-card9 blo\">\n                      <div className=\"upload-prescription-banner\">\n                        <h3>Upload Prescription</h3>\n                        <p>Upload prescription and tell us what you</p>\n                        <p>need.</p>\n                        <Link to=\"/upload-prescription\" className=\"uppage btn btn-primary\" >Upload</Link>\n                      </div>\n                      <ul className=\"pras upload_pra\">\n                        <h3>Uploaded Prescriptions </h3>\n                          {\n                            prescriptionList.data.length > 0 ?\n                              prescriptionList.data.map( (item,index) => {\n                              return(\n                                <li>\n                                  <label for={index+1} onChange={(e)=>onChange(e)}>\n                                      <Form.Check\n                                        type = \"radio\"\n                                        id={index+1}\n                                        checked = {item._id === selectedPrescription}\n                                        value = {item._id}\n                                        className=\"pull-left\"\n                                      />\n                                      <span>\n                                        <Link \n                                          to = \"#\" \n                                          onClick= {()=> handleShow(\n                                            process.env.REACT_APP_SERVER_URL +\n                                            `/documents/user-prescription/${user.user._id}/` +\n                                            item.prescription)\n                                          }\n                                        >\n                                          <i className=\"fa fa-search-plus\" aria-hidden=\"true\"></i>\n                                        </Link>\n                                      </span>\n                                      {\n                                      \"pdf\" === parseExtension(item.prescription) ? (\n                                        <i className=\"fa fa-5x fa-file-pdf-o\"></i>\n                                        ) : (\n                                          <Image src={ process.env.REACT_APP_SERVER_URL +\n                                            `/documents/user-prescription/${user.user._id}/` +\n                                            item.prescription} alt=\"\" />\n                                        )\n                                      }\n                                      <h5 className=\"uploaded\">Uploaded: <span><Moment format=\"DD/MM/YYYY\">{item.created_at}</Moment></span></h5>\n                                    </label>\n                                  </li>\n                                )\n                              })\n                              : \n                              <h5>No Prescription Uploaded</h5>\n                          }\n                        <Errors current_key=\"link\" key=\"link\" />\n                        </ul>\t\n                    </div>            \n                  </Card.Body>\n                </Card>\n              </Col>\n            </Row>\n            {\n              selectedPrescription  &&  (\n              <Row className=\"bottom-continue\">\n                  <Col md={12}>\n                    <div className=\"text-center text-wrap\">\n                      <div className=\"btn-list\">\n                      <Button \n                        color=\"primary\"\n                        type=\"submit\" \n                        className=\"btn-outline-light w-30 p-2 border-left border-right-0 border-top-0 border-bottom-0 btn btn-primary\"\n                        onClick = {(e)=> onSubmit(e)}>\n                          Continue\n                        </Button>\n                      </div>\n                    </div>\n                  </Col>\n              </Row>)\n            }\n          </div>\n        </Card>\n      </Col>\n    </Row>\n    <Modal show={show} onHide={handleClose} >\n        <Modal.Header closeButton>\n          <Modal.Title>Prescription</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <embed className = \"modal-image\" src={ imageDisplay } alt=\"\" />\n            {/* <Image className = \"modal-image\" src={ imageDisplay } alt=\"\" /> */}\n        </Modal.Body>\n    </Modal>\n  </Container>\n  </section>\n)}\n\nPrescription.propTypes = {\n\tgetPrescriptionList: PropTypes.func.isRequired,\n\tdeletePrescription: PropTypes.func.isRequired,\n\tloading: PropTypes.bool.isRequired,\n\tperformDelete: PropTypes.bool.isRequired,\n\tprescriptionList: PropTypes.object.isRequired,\n\tauth: PropTypes.object.isRequired,\n  uploaded: PropTypes.func.isRequired,\n  };\n  const mapStateToProps = state => ({\n\tloading: state.prescription.loadingPrescriptionList,\n\tperformDelete: state.prescription.performDelete,\n\tprescriptionList: state.prescription.prescriptionList,\n\tauth: state.auth,\n  });\n  \n  export default connect(mapStateToProps, {\n\tgetPrescriptionList,\n\tdeletePrescription,\n  uploaded,\n  setErrors,\n  removeErrors\n  })(Prescription);\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/Success.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Payment/Payment.js",["1121"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Button, Image } from \"react-bootstrap\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport PriceLoader from \"assets/loader.gif\";\nimport UpdateEmail from \"../Cart/UpdateEmail\";\n\nexport default function Payment({ \n    placeOrder,\n    grossAmount, \n    reserved = 0,\n    isAuthenticated,\n    onEmailUpdateCb,\n    loading,\n    penalty = 0,\n    getWalletBalance = () => {},\n    deductWallet = () => {},\n    balance,\n    disabled,\n  }) {\n  const [active, setActive] = useState(null);\n  const [fromWallet, setWallet] = useState(false);\n  const [disablePayment, setDisablePayment] = useState(disabled);\n  const [hideNextButton , setHideNextButton] = useState(false); \n\n  const selectPayment = (e) => {\n    setActive(e.target.value);\n    if(balance >= grossAmount + reserved) {\n      setWallet(false);\n      deductWallet(false);\n    }\n  };\n  \n  const completeCheckout = () => {\n    setHideNextButton(true);\n    placeOrder(active);\n    setTimeout(() => {\n      setHideNextButton(false);\n    }, 5000);\n  };\n  \n  const deductFromWallet = (e) => {\n    const checked = e.target.checked;\n    setWallet(checked);\n    if(balance >= grossAmount + reserved) setActive(e.target.value);\n    deductWallet(checked);\n  }\n\n  const onEmailUpdate = (status) => {\n    if(status){\n      setDisablePayment(false);\n      typeof onEmailUpdateCb == 'function' && onEmailUpdateCb(true);\n    } \n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if(subscribe) {\n          getWalletBalance();\n        }\n      }\n      catch(err) {\n        //throw err;\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, []);\n\n  return (\n    <Card.Body>\n      <div className=\"card-pay\">\n        <ul className=\"payment_list\">\n          { disablePayment && <UpdateEmail onUpdate={onEmailUpdate} /> }\n          {!(penalty > 0) && <li>\n            <input\n              type=\"radio\"\n              name=\"paymentType\"\n              value=\"COD\"\n              onChange={(e) => selectPayment(e)}\n              id=\"COD\"\n              checked={active === \"COD\"}\n              disabled={disablePayment}\n            />{\" \"}\n            Cash on Delivery\n          </li>}\n          <li>\n            <input\n              type=\"radio\"\n              name=\"paymentType\"\n              value=\"Online\"\n              onChange={(e) => selectPayment(e)}\n              id=\"Online\"\n              checked={active === \"Online\"}\n              disabled={disablePayment}\n            />{\" \"}\n            Online Payment\n          </li>\n          <li className={balance <= 0 && \"light-gray\"}>\n            <input\n              type={ balance >= grossAmount + reserved ? \"radio\":\"checkbox\" }\n              name={ balance >= grossAmount + reserved ? \"paymentType\": \"Wallet\" }\n              value=\"Wallet\"\n              onChange={(e) => deductFromWallet(e)}\n              id=\"Wallet\"\n              disabled={balance <= 0 || disabled }\n              checked={balance >= grossAmount + reserved ? active === \"Wallet\":fromWallet}\n            />{\" \"}\n            Pay using your <b>{`Health Kangaroo Balance ${CURRENCY_SYMBOL.INR} ${balance}`}</b>\n          </li>\n        </ul>\n        <div className=\"pal\">\n          <p className=\"tsc\">By Placing order you are agree to our <Link \n            to=\"/terms-conditions\"\n            title=\"Terms and Conditions\"\n            className=\"ml-1\"\n            target=\"_blank\"\n            style={{ float: \"none\", \"textDecoration\": \"underline\" }}\n          >Terms & Conditions</Link></p>\n          <div className=\"item-card9-desc mb-2 mt-1 totalam\">\n            <span className=\"mr-4\">\n              Total Amount{\" \"}\n              { loading ? \n                <span><Image height={38} src={PriceLoader} alt=\"loding\" /></span>:\n                <span>{`${CURRENCY_SYMBOL.INR} ${grossAmount ?? \"0\"}`} </span>\n              }\n              {isAuthenticated ? (\n                <u>\n                  <Button\n                    variant={hideNextButton ? \"disable\" : \"primary\"}\n                    className=\"font-weight-bold btn\"\n                    onClick={completeCheckout}\n                    disabled={!active || loading || disablePayment}\n                  >\n                    { grossAmount === 0 || active === \"COD\" ? \"Place Order\": \"Pay Now\" }\n                  </Button>\n                </u>\n              ) : null}\n            </span>\n          </div>\n        </div>\n      </div>\n    </Card.Body>\n  );\n}\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/profile.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/LabsList.js",["1122","1123","1124"],"import React, { Suspense, useState, useEffect } from \"react\";\nimport { Col, Card, Image, Container, Row, Button } from \"react-bootstrap\";\nimport { withRouter, useLocation } from \"react-router-dom\"\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {\n  getLabsList,\n} from \"actions/customer/prescription\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory,  { \n  PaginationProvider, \n  PaginationTotalStandalone,\n} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport * as Constants from \"constants/index\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport { FaCartPlus, FaShoppingCart } from \"react-icons/fa\";\nimport slugify from \"react-slugify\";\nimport Rating from \"utils/Rating\";\nimport { addLabToCart } from 'actions/cart/cart';\nimport {\n  resetComponentStore,\n} from \"actions/customer/prescription\";\nimport { LocalityFilter, RatingFilter, PriceFilter } from 'utils/Filters';\nimport { getLocalityList } from \"actions/customer/locality\";\n\nconst LabsList = ({\n  getLabsList,\n  history,\n  addLabToCart,\n  labsList:{ data, count },\n  sortingParams,\n  loading,\n  resetComponentStore,\n  currentCity,\n  getLocalityList,\n}) => {\n\n  const variables = useLocation()?.state?.variables;\n\n  const prescription_id_value = variables?.prescription;\n  \n  const initialData = {\n    disabled: '',\n  };\n  const [Data, setData] = useState(initialData);\n  const { disabled } = Data;\n\nconst initialSortingParams = {\n  limit: 10,\n  page: 1,\n  orderBy: 'totalReviews',\n  ascending: 'desc',\n  query: {},\n  filters: []\n};\nconst [labsParams, setLabsParams] = useState(initialSortingParams);\n\nconst handleSorting = (e) => {\n  const { value } = e.target;\n  const params = {\n    ...labsParams,\n    orderBy: 'listing_price',\n    ascending: 'desc',\n    page: 1,\n    limit: 5,\n  };\n  switch(value) {\n    case \"0\": params.orderBy = \"listing_price\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n    case \"1\": params.orderBy = \"averageRating\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n    default: break;\n  }\n  setLabsParams(params);\n}\nconst onFilterChange = (name, value, newParams) => {\n  setLabsParams((params) => ({...params, ...newParams}));\n};\n\nconst [onlyOnce, setOnce] = useState(true);\nconst [defaultLocality, setDefaultLocality] = useState([]);\n\nuseEffect(() => {\n  let subscribe = true;\n  const asyncCall = async () => {\n    try {\n      if(subscribe) {\n        if(onlyOnce) {\n          resetComponentStore();\n          if (currentCity) {\n            getLocalityList(currentCity.value, { \n              limit: 2,\n              page: 1,\n              orderBy: 'city',\n              ascending: 'desc',\n              query: \"\",\n              filters: []\n            }).then((res) => {\n              if (res && res.status) {\n                const { data } = res.response[0];\n                const result = data.map(list => ({\n                  value: list._id,\n                  label: list.locality_name,\n                }));\n                if(subscribe) setDefaultLocality([...result])\n              }\n            });\n          }\n          setOnce(false);\n        }\n        getLabsList(labsParams, prescription_id_value);\n      }\n    } catch (err) {\n      // throw err;\n    }\n  };\n  asyncCall();\n  return () => {\n    subscribe = false;\n  };\n}, [getLabsList, prescription_id_value, currentCity, resetComponentStore, setOnce, labsParams]);\n\nuseEffect(() => {\n  let subscribe = true;\n  const asyncCall = async () => {\n    try {\n      if (subscribe && prescription_id_value) {\n        \tgetLabsList(labsParams, prescription_id_value);\n      }\n    } catch (err) {\n      // throw err;\n    }\n  };\n  asyncCall();\n  return () => {\n    subscribe = false;\n  };\n}, [prescription_id_value, Data.labs]);\n\nconst handleTableChange = (\n    type,\n    { page }\n  ) => {\n    let params = {\n      ...sortingParams,\n      page: type === \"search\" ? 1 : page,\n    };\n    setLabsParams(params);\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && data) {\n          setData((prevData) => ({\n            ...prevData,\n            ...data,\n          }));\n        }\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [data]);\n// console.log(data)\n  const addItem = (e, order_id, lab_id, pack, changeLab) => {\n    e.preventDefault();\n    // if(!loginStatus) history.push(\"/login\");\n    // let labs = Data.labs;\n    let labs = data;\n    const productData = { order_id, lab_id };\n    if(changeLab) productData.changeLab = changeLab;\n    setData((Data) => ({ ...Data, disabled: lab_id }));\n    // if (loginStatus) {\n      addLabToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          labs = labs.map((item) => ({ ...item, isInCart: item._id === lab_id ? 1: item.isInCart }));\n          setData((Data) => ({ ...Data, labs }));\n        }\n      });\n    // } else {\n    //   createGuestCart(productData, pack);\n    // }\n  };\n  \nconst defaultSorted = [\n    {\n      dataField: \"labName\",\n      order: \"desc\"\n    }\n  ];\n\n  const columns = [\n    {\n      dataField: \"labName\",\n      text: '',\n      formatter: (col, row) => {\n        // const { lab, name, price, testsIncluded, isInCart, _id } = row;\n        const {\n          listing_price,\n          discount,\n          MRP,\n          prescription,\n          order,\n          address,\n          listing_price_currency,\n          MRP_currency,\n          isInCart,\n          _id,\n          labName,\n          labImage,\n          averageRating,\n          totalReviews,\n          certificates \n        } = row;\n                \n        const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n\n        return (\n          <div className=\"tab-content\">\n            <div className=\"tab-pane active\" id=\"tab-11\">\n          <Card className=\"card overflow-hidden\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"d-md-flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"item-card9-img\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"item-card9-imgs\">\n                              <Link \n                                to={{\n\t\t\t\t\t\t                   \t  pathname:`/lab-tests/labs/${slugify(labName)}`,\n\t\t\t\t\t\t\t                    search: `?search_type=labs&search_value=${_id}`\n\t\t\t\t\t\t                    }}\n                              >\n                              </Link>\n                              <Image \n                                className=\"cover-image\"\n                                alt={labName}\n                                src={labImageURL}\n                              />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"card border-0 mb-0\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Card.Body className=\"card-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"item-card9\">\n                              <Link \n                                to={{\n\t\t\t\t\t\t                   \tpathname:`/lab-tests/labs/${slugify(labName)}`,\n\t\t\t\t\t\t\t                  search: `?search_type=labs&search_value=${_id}`\n                                }}\n                                className=\"text-dark\"\n                              >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 className=\"font-weight-bold mt-1 mb-2\">{labName}\n                                <i className=\"ion-checkmark-circled  text-success fs-14 ml-1\"></i></h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                </Link>\n                                { address.locality ? \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-muted fs-13 mt-0\">\n                                  {address.locality } <br></br></span>: \"\"}\n                                  <span className=\"text-muted fs-13 mt-0\">\n                                  { currentCity.label }\n                                  </span> \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"new01 lab_list\">\n                                <div title=\"lab ratings\" className=\"changed\">\n                                 <Rating ratings={averageRating} />\n                                </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"allcomant\">{`(${totalReviews})`}  | {`${certificates.map((cert) => cert.certificateName).join(\", \")}`} </span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"item-card9-desc mb-2 mt-1\">\n                                  <span className=\"mr-4\">Price: <b>{CURRENCY_SYMBOL[listing_price_currency]}{listing_price} <s>{CURRENCY_SYMBOL[MRP_currency]}{MRP}</s></b></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n                              { discount && discount > 0 ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"spans\">\n                                  {`Flat ${discount}% Off`} </div>\n                                :null\n                              }\n                      {\n                        isInCart === 1 ? (\n                          <Button \n                            onClick={()=>history.push({\n                                      pathname:`/cart`,\n                                      hash:\"#content\",\n                                    })}\n                            className=\"btn btn-primary\">\n                            <FaShoppingCart className=\"mr-1\" />\n                            Go To Cart\n                          </Button>\n                        ): (\n                          <Button\n                            // className=\"add_cart\"\n\t\t\t\t\t\t\t              onClick={ (e) => addItem(e, order, _id, row, disabled === prescription ? 0 : 1) }\n\t\t\t\t\t\t              \tdisabled={disabled === _id}\n                          >\n                            <FaCartPlus className=\"mr-1\" />\n                            Add To Cart\n                          </Button>\n                        )\n                      }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n                      </Card>\n                      </div>\n                      </div>\n        )\n      }\n\n    },\n  ];\n\nconst customTotal = function (from, to, size) {\n  return (\n\t<div className=\" mb-0\">\n\t  <div className=\"\">\n\t\t<div className=\"p-5 bg-white item2-gl-nav d-flex\">\n\t\t  <h6 className=\"mb-0 mt-2\">Showing {from} to {to} of {size} Labs</h6>\n\t\t\t<ul className=\"nav item2-gl-menu ml-auto\">\n        \n\t\t\t</ul>\n\t\t\t<div className=\"d-flex select2-sm\">\n\t\t\t\t<label className=\"mr-2 mt-1 mb-sm-1\">Sort By:</label>\n\t\t\t\t         <select \n                    name=\"sortBy\" \n                    className=\"form-control select2\"\n                    onChange={handleSorting}\n                  >\n                    <option value=\"0\" key=\"sort_price\" >Price</option>\n                    <option value=\"1\" key=\"sort_rating\" >Rating</option>\n                    <option value=\"999\" key=\"sort_none\" >None</option>\n                  </select>\n\t\t\t</div>\n\t\t</div>\n\t  </div>\n\t</div>\n  )\n}\n\nconst options = {\n  page: parseInt(labsParams.page),\n  pageStartIndex: 1,\n  firstPageText: 'First',\n  lastPageText: 'Last',\n  withFirstAndLast: true,\n  hideSizePerPage: true, // Hide the sizePerPage dropdown always\n  hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n  hideSizePerPageRenderer: true,\n  showTotal: true,\n  totalSize: count,\n  paginationTotalRenderer: () => { return null },\n  sizePerPage: labsParams.limit || data.length,\n};\n\nreturn (\n// loading ? <Spinner /> : \n<section className=\"sptb\">\n  <Container className=\"container\">\n\t<Row className=\"row\">\n\t\t<Col  xl={3} lg={12} md={12}>\n\t\t\t<Card className=\"card\">\n              <div>\n                <Card.Header className=\"justify-content-center\">\n                  <h3 className=\"card-title\"> Lab Filters</h3>\n                </Card.Header>\n              </div>\n              <LocalityFilter\n                type=\"checkbox\"\n                filter=\"locality=localityServings\"\n                filterType=\"String\"\n                filterName=\"Location\"\n                filterParams={labsParams}\n                onFilterChange={onFilterChange}\n                loadFilterMethod={getLocalityList}\n                loadFilterFollowedBy={currentCity.value}\n                loadFilterName=\"locality_name\"\n                loadFilterType=\"String\"\n                selectFilterOptions={defaultLocality}\n              />\n              <PriceFilter \n                type=\"range\"\n                filter=\"price=listing_price\"\n                filterType=\"object\"\n                filterName=\"Price (INR)\"\n                filterParams={labsParams}\n                onFilterChange={onFilterChange}\n                rangeValue={[0, 10000, 50]}\n                rangeType=\"price\"\n                marks={[{\n                  value: 0,\n                  label: CURRENCY_SYMBOL[\"INR\"] + 0,\n                },\n                {\n                  value: 10000,\n                  label: CURRENCY_SYMBOL[\"INR\"] + 10000,\n                }]}\n              />\n              <RatingFilter\n                type=\"textSelect\"\n                filter=\"rating=averageRating\"\n                filterType=\"Number\"\n                filterName=\"Rating\"\n                filterParams={labsParams}\n                onFilterChange={onFilterChange}\n                selectFilterOptions={[{\n                  value: 4,\n                  label: \"4 Star and Higher\",\n                },{\n                  value: 3,\n                  label: \"3 Star and Higher\",\n                },{\n                  value: 2,\n                  label: \"2 Star and Higher\",\n                }, {\n                  value: 1,\n                  label: \"1 Star and Higher\",\n                }]}\n              />\n\t\t\t</Card>\n\t\t</Col>\n\t  <Col xl={9} lg={12} md={12}>\n\t\t<div className=\"mb-lg-0\">\n\t\t  <div className=\"item2-gl\">\n\t\t\t<div className=\"list-content\">\n\t\t\t  <div id=\"list-products\">\n\t\t\t\t<PaginationProvider\n\t\t\t\t  pagination={paginationFactory(options) }\n\t\t\t\t  keyField=\"_id\"\n\t\t\t\t  columns={columns}\n\t\t\t\t  data={data}\n\t\t\t\t>\n\t\t\t\t{\n\t\t\t\t  ({\n\t\t\t\t\tpaginationProps,\n\t\t\t\t\tpaginationTableProps,\n\t\t\t\t  }) => \n\t\t\t\t\t<ToolkitProvider\n\t\t\t\t\t  keyField=\"_id\"\n\t\t\t\t\t  data={data}\n\t\t\t\t\t  columns={columns}\n\t\t\t\t\t  search\n\t\t\t\t\t>\n\t\t\t\t\t  {\n\t\t\t\t\t\ttoolkitprops => (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t  <PaginationTotalStandalone  \n\t\t\t\t\t\t\t{...paginationProps}  \n\t\t\t\t\t\t\tpaginationTotalRenderer={customTotal}\n\t\t\t\t\t\t  />\n\t\t\t\t\t\t  <BootstrapTable\n\t\t\t\t\t\t\t{...toolkitprops.baseProps}\n\t\t\t\t\t\t\tbootstrap4\n\t\t\t\t\t\t\tremote={{ pagination: count > 0 }}\n\t\t\t\t\t\t\tkeyField=\"_id\"\n\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\t{...paginationTableProps}\n\t\t\t\t\t\t\tonTableChange={handleTableChange}\n\t\t\t\t\t\t\tdefaultSorted={defaultSorted}\n\t\t\t\t\t\t\tnoDataIndication={Constants.NO_RECORD}\n\t\t\t\t\t\t\tbordered={false}\n\t\t\t\t\t\t\toverlay={ overlayFactory({ \n\t\t\t\t\t\t\t\tspinner: true, \n\t\t\t\t\t\t\t\tstyles: { overlay: (base) => ({...base, background: 'rgba(192,192,192,0.7)'}) } \n\t\t\t\t\t\t\t  }) \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  />\n\t\t\t\t\t\t</>\n\t\t\t\t\t  )}\n\t\t\t\t\t</ToolkitProvider>\n\t\t\t\t}\n\t\t\t\t</PaginationProvider>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </div>\n\t\t</div>\n\t  </Col>\n\t</Row>\n  </Container>\n</section>\n)\n}\n\nLabsList.propTypes = {\n  getLabsList: PropTypes.func.isRequired,\n  labsList: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\nconst mapStateToProps = state => ({\n  loading: state.prescription.loadingLabsList,\n  labsList: state.prescription.labsList,\n  sortingParams: state.prescription.labsSortingParams,\n  // labTests: state.labTests.labTestsList,\n  currentCity: state.citySearch.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  getLabsList,\n  addLabToCart,\n  getLocalityList,\n  // getLabTestsPage,\n  // createGuestCart,\n  resetComponentStore,\n})(withRouter(LabsList));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/labs.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/wallet.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Prescription/Upload.js",["1125","1126","1127","1128","1129","1130","1131"],"import React, { Suspense, useState, useMemo, useEffect } from \"react\";\nimport { Col, Card, Image, Container, Row, Button, Modal, Form } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Input } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"views/Spinner\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\nimport {\n  upload,\n  uploaded,\n  getPrescriptionList,\n  setErrors,\n  removeErrors,\n} from \"actions/customer/prescription\";\nimport Errors from \"views/Notifications/Errors\";\nimport checkValidPrescriptionImg from \"assets/images/validate_rx.svg\";\n\nconst Upload = ({\n\tauth : {user},\n\tprescriptionList,\n\tgetPrescriptionList,\n  upload,\n  uploaded,\n  history,\n  loadingPrescription,\n  loadingUploadedPrescription,\n  loadingPrescriptionList,\n  errorList,\n  setErrors,\n  removeErrors,\n}) => {\n\nconst parseExtension = (filename) => {\n  const extensionsList = filename.split('.');\n  const extLen = extensionsList.length;\n  return extensionsList[extLen - 1];\n}\nconst initialSortingParams = {\n  limit: 10,\n  page: 1,\n  orderBy: 'created_at',\n  ascending: 'desc'\n};\nconst [prescriptionParams, setPrescriptionParams] = useState(initialSortingParams);\n\n// useMemo(() => {\n// \tgetPrescriptionList(prescriptionParams);\n// },[prescriptionParams])\n\nuseEffect(() => {\n  getPrescriptionList(prescriptionParams);\n},[prescriptionParams])\n\nuseEffect(() => {\n  setImageArray([]);\n  setImage(null);\n  setShowUploaded(false);\n  setSelectedPrescription(null);\n  setImageDisplay(null);\n},[loadingPrescription,loadingPrescriptionList,loadingUploadedPrescription])\n\n//############################ set image url array to previes images ######################\nconst [imageArray, setImageArray] = useState([]);\nconst [image, setImage] = useState(null);\n\nconst [showUploaded, setShowUploaded] = useState(false);\nconst [selectedPrescription, setSelectedPrescription] = useState(null);\n\nconst handleImageSelect = (e) => {\n  setShowUploaded(false);\n  let image_file = e.target.files[0];\n  let image_url = image_file ? URL.createObjectURL(image_file) : '';\n  if (image_url !== '') {\n    setImageArray([...imageArray,{ [image_url] : image_file }]);\n    setImage({ [image_url] : image_file });\n    setSelectedPrescription(null)\n  }\n  // setFormData({ ...formData, [e.target.name]: image_file });\n};\n\nconst handleUploadedImageSelect = (e) => {\n  setShowUploaded(true);\n  setImageArray([...imageArray]);\n  setImage(null);\n};\n\nconst handleImageRemove = (removedImageIndex) => {\n  imageArray.splice(removedImageIndex,1);\n  setImageArray([...imageArray]);\n  setImage(null);\n};\n\nconst onChange = (e) => {\nsetSelectedPrescription(e.target.value);\n};\n\n// const onSubmit = e => {\n//   e.preventDefault();\n//   removeErrors();\n//   if(!validateForm(selectedPrescription,\n//     {\n//       param:\"prescription\",\n//       msg: 'Please Select Prescription To Continue...',\n//     }\n//   )) return;\n// //   Continue\n// };\n\nconst validateForm = (form, requireFields) => {\n  const errors = [];\n  if (form === null) {\n    errors.push({\n      param: requireFields.param,\n      msg: requireFields.msg,\n    });\n  }\n  if (errors.length) {\n    setErrors(errors);\n  }\n  return !errors.length;\n};\n\nconst onSubmit = e => {\n  e.preventDefault();\n  removeErrors();\n  if(!showUploaded){\n     if(!validateForm(image,\n        {\n          param:\"prescription\",\n          msg: 'Please Add Prescription',\n        }\n     )) return;\n     upload(history,image).then((res) => {if(res) history.push({\n      pathname: \"/prescription-upload-success\", \n      state: { prescription: {\n        orderRefId: res,\n      }}\n    });\n   }\n    //  {if(res) getPrescriptionList(prescriptionParams)}\n     );\n  }\n  else {\n    if(!validateForm(selectedPrescription,\n      {\n        param:\"link\",\n        msg: 'Please Select Prescription',\n      }\n    )) return;\n    uploaded(history,selectedPrescription).then((res) => {if(res) getPrescriptionList(prescriptionParams)});\n  }\n};\n\nconst [show, setShow] = useState(false);\n\nconst handleClose = () => setShow(false);\nconst handleShow = () => setShow(true);\n\nconst [imageDisplay, setImageDisplay] = useState(null);\nconst [showImage, setShowImage] = useState(false);\n\nconst handleCloseImage = () => {\n  setImageDisplay(null);\n  setShowImage(false);\n}\nconst handleShowImage = (src) => {\n  setImageDisplay(src);\n  setShowImage(true);\n}\nreturn (\n  <>\n    {/* <Spinner /> */}\n    <section className=\"sptb\">\n      <Container className=\"container\">\n        <Row className=\"row \">\n          <Col className=\"col-lg-12 col-md-12 col-md-12\">\n            <Card className=\"card overflow-hidden\">\n               <div className=\"\">\n                  <Row className=\"row\">\n                    <Col className=\"col-md-12\">\n                      <Card className=\"card border-0 mb-0\">\n                        <Card.Body className=\"card-body\">\n                          <div className=\"item-card9 blo\">\n                            <div className=\"myfroms\">\n                              <div className=\"froms \">\n                                <h5>Have a Prescription? Upload here</h5>\n                                  <p>Your attached prescription will be secure and private with us. </p>\n                                    </div>\n                                      <div className=\"upload_type\">\n                                        <ul>\n                                          <li>\n                                            <div className=\"form-group\">\n                                              <Input\n                                                type=\"file\"\n                                                accept=\"image/jpeg, image/png, image/jpg, application/pdf\"\n                                                id=\"prescription\"\n                                                name=\"prescription\"\n                                                onClick={() => setSelectedPrescription(null)}\n                                                onChange={(e) => handleImageSelect(e)}\n                                                invalid={errorList.file ? true : false}\n                                                className=\"input-file\"\n                                              />\n                                                <label for=\"prescription\" className=\"btn btn-tertiary js-labelFile\">\n                                                  <i className=\"fa fa-image\"></i><h5>Gallery</h5>\n                                                </label>\n                                            </div>\n                                          </li>\n                                          <li>\n                                            <div className=\"form-group\">\n                                                <Input \n                                                    type=\"submit\"\n                                                    // onClick={(e)=> handleUploadedImageSelect(e)}\n                                                    onClick={()=> history.push(\"/prescription\")}\n                                                    id = \"link\"\n                                                    name = \"link\"\n                                                    // to=\"/prescription\"\n                                                    className=\"input-file\"\n                                                  />\n                                                <label for=\"link\" className=\"btn btn-tertiary js-labelFile\">\n                                                  <i className=\"fa fa-folder\"></i><h5>Uploaded</h5>\n                                                </label>\n                                            </div>\n                                          </li>\n                                        </ul>\n                                    </div>\n                                    <Link\n                                      to=\"#\"\n                                      onClick={()=>handleShow()}\n                                      style={{ \"color\": \"red\" }}\n                                    >\n                                      <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i> &nbsp;\n                                      Check Valid Prescription Guide\n                                    </Link>\n                                    <Modal show={show} onHide={handleClose} >\n                                       <Modal.Header closeButton>\n                                         <Modal.Title>Valid Prescription Guide</Modal.Title>\n                                       </Modal.Header>\n                                       <Modal.Body>\n                                         <Row>\n                                           <Col>\n                                            <img\n                                                className=\"mr-3\"\n                                                src={checkValidPrescriptionImg}\n                                                alt=\"Generic placeholder\"\n                                             />\n                                             </Col>\n                                             <Col>\n                                              <ul>\n                                                <li>\n                                                Don’t crop out any part of the image.\n                                                </li>\n                                                <li>\n                                                Avoid blurred image.\n                                                </li>\n                                                <li>\n                                                Include details of doctor and patient + clinic visit date.\n                                                </li>\n                                                <li>\n                                                Medicines will be dispensed as per prescription.\n                                                </li>\n                                                <li>\n                                                Supported files type: jpeg , jpg , png , pdf.\n                                                </li>\n                                                <li>\n                                                Maximum allowed file size: 1MB\n                                                </li>\n                                              </ul>\n                                              </Col>\n                                              </Row>\n                                       </Modal.Body>\n                                    </Modal>\n                              </div>\n                            </div>\n                            {!showUploaded ? (\n                              <ul className={` ${image !== null ? \"pras upload_pra\" : \"\"}`}>\n                                {image !== null ?\n                                <li>\n                                  <h5>Preview <span><Link to=\"#\" onClick= {()=>handleImageRemove()}>x</Link></span></h5>\n                                    {/* <Image src= {Object.keys(image)} alt=\"\" /> */}\n                                    {\"pdf\" === parseExtension(Object.values(image)[0].name) ? (\n                                    <a href={Object.keys(image)} title=\"preview pdf\" target=\"_blank\">\n                                    <i className=\"fa fa-5x fa-file-pdf-o\"></i>\n                                    </a>\n                                    ) : (\n                                      <Image src= {Object.keys(image)} alt=\"\" />\n                                    )}\n                                </li>\n                                : \"\" \n                                }\n                                <Errors current_key=\"prescription\" key=\"prescription\" />\n                            </ul>) :\n\t\t\t\t\t\t\t              (<ul className=\"pras upload_pra\">\n\t\t\t\t\t\t\t                {prescriptionList.data.length > 0 ?\n\t\t\t\t\t\t\t\t               prescriptionList.data.map( (item,index) => {\n\t\t\t\t\t\t\t\t               return(\n                                 <li>\n                                 <span>\n                                   <Link to = \"#\" onClick= {()=>handleShowImage(\n                                        process.env.REACT_APP_SERVER_URL +\n                                        `/documents/user-prescription/${user.user._id}/` +\n                                        item.prescription)}>\n                                     <i className=\"fa fa-search-plus\" aria-hidden=\"true\"></i>\n                                    </Link>\n                                 </span>\n                                   <label for={index+1} onChange={(e)=>onChange(e)}>\n                                   <Form.Check\n\t\t\t\t\t\t\t\t\t                    type = \"radio\"\n\t\t\t\t\t\t\t\t\t                    id={index+1}\n\t\t\t\t\t\t\t\t\t                    checked = {item._id === selectedPrescription}\n\t\t\t\t\t\t\t\t\t                    value = {item._id}\n\t\t\t\t\t\t\t\t\t                    // onChange={(e)=>onChange(e)}\n                                      />\n                                      {\"pdf\" === parseExtension(item.prescription) ? (\n                                    // <a href={ process.env.REACT_APP_SERVER_URL +\n                                    //     `/documents/user-prescription/${user.user._id}/` +\n                                    //     item.prescription} title=\"preview pdf\" target=\"_blank\">\n                                    <i className=\"fa fa-5x fa-file-pdf-o\"></i>\n                                    // </a>\n                                    ) : (\n                                      <Image src={ process.env.REACT_APP_SERVER_URL +\n                                        `/documents/user-prescription/${user.user._id}/` +\n                                        item.prescription} alt=\"\" />\n                                    )}\n                                      {/* <Image src={ process.env.REACT_APP_SERVER_URL +\n                                                `/documents/user-prescription/${user.user._id}/` +\n                                                item.prescription} alt=\"\" /> */}\n                                      <h5>Uploaded <span><Moment format=\"DD-MM-YYYY\">{item.created_at}</Moment></span></h5>\n                                  </label>\n                                  </li>\n\t\t\t\t\t\t\t\t                )\n\t\t\t\t\t\t\t\t              })\n\t\t\t\t\t\t\t\t              : <h5>No Prescription Uploaded</h5>\n                             }\n                             <Errors current_key=\"link\" key=\"link\" />\n                            </ul>)\n                            }  \t\n                        </Card.Body>\n                      </Card>\n                    </Col>    \n                  </Row>\n      {selectedPrescription || image ?  (\n        <Row>\n            <Col md={12}>\n              <div className=\"text-center text-wrap\">\n                <div className=\"btn-list\">\n                <Button \n                  color=\"primary\"\n                  type=\"submit\" \n                  className=\"btn-outline-light w-30 p-2 border-left border-right-0 border-top-0 border-bottom-0 btn btn-primary\"\n                  onClick = {(e)=> onSubmit(e)}>\n                    Continue\n                  </Button>\n                </div>\n              </div>\n            </Col>\n        </Row>) : \"\"\n      }\n                </div>\n              </Card>\n          </Col>\n        </Row>\n                  <Modal show={showImage} onHide={handleCloseImage} >\n                     <Modal.Header closeButton>\n                       <Modal.Title>Prescription</Modal.Title>\n                     </Modal.Header>\n                     <Modal.Body>\n                          <embed className = \"modal-image\" src={ imageDisplay } alt=\"\" />\n                     </Modal.Body>\n                  </Modal>\n      </Container>\n    </section>\n  </>\n)\n}\n\nUpload.propTypes = {\n  upload: PropTypes.func.isRequired,\n  uploaded: PropTypes.func.isRequired,\n  errorList: PropTypes.object.isRequired,\n  loadingPrescription: PropTypes.bool.isRequired,\n  loadingUploadedPrescription: PropTypes.bool.isRequired,\n  loadingPrescriptionList: PropTypes.bool.isRequired,\n\tprescriptionList: PropTypes.object.isRequired,\n\tauth: PropTypes.object.isRequired,\n\tgetPrescriptionList: PropTypes.func.isRequired,\n};\nconst mapStateToProps = state => ({\n  loadingPrescription: state.prescription.loadingPrescription,\n  loadingUploadedPrescription: state.prescription.loadingUploadedPrescription,\n  loadingPrescriptionList: state.prescription.loadingPrescriptionList,\n  errorList: state.errors,\n\tprescriptionList: state.prescription.prescriptionList,\n\tauth: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  upload,\n  uploaded,\n\tgetPrescriptionList,\n  setErrors,\n  removeErrors\n})(Upload);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/HealthRecord/Details.js",["1132","1133","1134","1135","1136","1137","1138"],"import React, { useMemo, useEffect, useState, Suspense, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Card, Col, Row, Container } from \"react-bootstrap\";\nimport { getOrdersListByPatient as getOrdersList, getHealthRecordByID, resetComponentStore } from \"actions/customer/health_record\";\nimport Spinner from \"views/Spinner\";\nimport OrderCard from \"views/Customer/Order/OrderCard\";\nimport { withRouter, Link, useLocation } from \"react-router-dom\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory,  { \n  PaginationProvider\n} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport * as Constants from \"constants/index\";\n\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop);\n\nconst Details = ({\n  loading,\n  loadingOrders,\n  history,\n  currentHealthRecord,\n  ordersList: { data, page, count },\n  getHealthRecordByID,\n  sortingParams,\n  getOrdersList,\n  resetComponentStore,\n}) => {\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'created_by',\n    ascending: 'desc',\n    query:'',\n    filters: [],\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [healthRecord, setHealthRecord] = useState({\n    name: \"\",\n    health_records: [],\n    created_by: {},\n  });\n  const contentRef = useRef(null)\n  const executeScroll = () => scrollToRef(contentRef)\n\n  const {\n    name,\n    health_records,\n    created_by\n  } = healthRecord;\n\n  let delayTimer;\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const value = query.get(\"search_value\");\n\n  const columns = [\n    {\n      dataField: \"orderID\",\n      text: '',\n      headerAttrs: {\n        hidden: true\n      },\n      formatter: (col, row) => {\n        return (<OrderCard data={row} />)\n      }\n\n    },\n  ];\n\n  const defaultSorted = [\n    {\n      dataField: \"created_at\",\n      order: \"desc\"\n    }\n  ];\n\n  const options = {\n    page: parseInt(listParams.page),\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    lastPageText: 'Last',\n    withFirstAndLast: true,\n    // alwaysShowAllBtns: true, // Always show next and previous button\n    hideSizePerPage: true, // Hide the sizePerPage dropdown always\n    hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n    hideSizePerPageRenderer: true,\n    showTotal: true,\n    totalSize: count,\n    paginationTotalRenderer: () => { return null },\n    sizePerPage: listParams.limit,\n  };\n\n  const handleTableChange = (\n    type,\n    { page }\n  ) => {\n    let params = {\n      ...sortingParams,\n      page,\n    };\n    setListParams(params);\n  };\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getHealthRecordByID(value, history);\n  // }, [getHealthRecordByID, value]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(onlyOnce) {\n          resetComponentStore();\n          setOnce(false);\n        }\n        if(subscribe && value) {\n          getHealthRecordByID(value, history);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getHealthRecordByID, value]);\n\n  // useMemo(() => {\n  //   getOrdersList(value, listParams);\n  // }, [getOrdersList, listParams]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && value) {\n          getOrdersList(value, listParams);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getOrdersList, listParams]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && currentHealthRecord) {\n          const {\n            name,\n            health_records,\n            created_by\n          } = currentHealthRecord;\n          setHealthRecord((data) => ({\n            ...data, \n            name,\n            health_records,\n            created_by,\n          }));\n          executeScroll();\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [currentHealthRecord]);\n\n  return loading ? <Spinner />: (\n    <section className=\"sptb section-bg\" ref={contentRef}>\n      <Container>\n        <Row>\n          <Col xl={9} lg={12} md={12}>\n            <Card>\n              <Card.Body>\n                <div className=\"card-pay\">\n                  <div className=\"single_reco\">\n                    <p className=\"new_add\">\n                      <b>{name}</b> <span>{health_records} Health Records</span>\n                    </p>\n                  </div>\n                  <div className=\"pat_list mypage\">\n                    <h3 className=\"card-title\">Health Records</h3>\n                    <PaginationProvider\n                      pagination={paginationFactory(options) }\n                      keyField=\"_id\"\n                      columns={columns}\n                      data={data}\n                    >\n                    {\n                      ({\n                        paginationTableProps,\n                      }) => \n                        <ToolkitProvider\n                          keyField=\"_id\"\n                          data={data}\n                          columns={columns}\n                          search\n                        >\n                          {\n                            toolkitprops => (\n                            <>\n                              <BootstrapTable\n                                {...toolkitprops.baseProps}\n                                bootstrap4\n                                remote={{ pagination: count > 0 }}\n                                keyField=\"_id\"\n                                data={data}\n                                columns={columns}\n                                loading={loadingOrders}\n                                {...paginationTableProps}\n                                onTableChange={handleTableChange}\n                                defaultSorted={defaultSorted}\n                                noDataIndication={Constants.NO_RECORD}\n                                bordered={false}\n                                overlay={ overlayFactory({ \n                                    spinner: true, \n                                    styles: { overlay: (base) => ({...base, background: 'rgba(192,192,192,0.7)'}) } \n                                  }) \n                                }\n                              />\n                            </>\n                          )}\n                        </ToolkitProvider>\n                      }\n                    </PaginationProvider>\n                  </div>\n                </div>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n} \n\nDetails.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getHealthRecordByID: PropTypes.func.isRequired,\n  getOrdersList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.healthRecord.loadingHealthRecord,\n  loadingOrders: state.customerOrders.loadingOrdersList,\n  ordersList: state.customerOrders.ordersList,\n  sortingParams: state.customerOrders.sortingParams,\n  currentHealthRecord: state.healthRecord.currentHealthRecord,\n});\n\nexport default connect(mapStateToProps, {\n  getHealthRecordByID,\n  getOrdersList,\n  resetComponentStore,\n})(withRouter(Details));\n\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/locality.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LT_Categories/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Tests/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Packages/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Category/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Profile/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Pages/index.js",["1139","1140","1141"],"import React, { Suspense, useState, useEffect, useMemo, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getCMSBySlug, notFound, resetComponentStore } from \"actions/customer/page\";\nimport Spinner from \"views/Spinner\";\nimport Moment from \"react-moment\";\nimport { Helmet } from \"react-helmet\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport HtmlParser from \"utils/HtmlParser\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  Badge,\n  Image\n} from \"react-bootstrap\";\nimport { FaCalendarAlt } from \"react-icons/fa\";\n\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop);\n\nconst Page = ({\n  getCMSBySlug,\n  notFound,\n  currentCMS,\n  loading,\n  history,\n  match,\n  resetComponentStore,\n}) => {\n  const initialState = {\n    category: \"\",\n    page_title: \"\",\n    page_header: \"\",\n    slug: \"\",\n    description: \"\",\n    meta_description: \"\",\n    thumbnail: \"\",\n    imageURL: \"\",\n    category: \"\",\n    created_at: \"\",\n    updated_at: \"\",\n  };\n\n  const [formData, setFormData] = useState(initialState);\n  const [onlyOnce, setOnce] = useState(true);\n  \n  const contentRef = useRef(null)\n  const executeScroll = () => scrollToRef(contentRef)\n\n  const {\n    category,\n    updated_at,\n    page_title,\n    page_header,\n    slug,\n    description,\n    meta_description,\n    imageURL,\n  } = formData;\n\n\n  // useMemo(() => {\n  //   if(onlyOnce){\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getCMSBySlug(match.params.cms_slug, history);\n  // }, [getCMSBySlug, match.params.cms_slug, notFound, history, resetComponentStore]);\n\n  useEffect(() => {\n    let subscribe = true;\n      const asyncCall = async() => {\n        try{\n          if(onlyOnce){\n            resetComponentStore();\n            setOnce(false);\n          }\n          if(subscribe && match.params.cms_slug){\n            getCMSBySlug(match.params.cms_slug, history);\n          }\n        }catch(err){\n          console.error(err.message);\n        }\n      }\n      asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [getCMSBySlug, match.params.cms_slug, notFound, history, resetComponentStore]);\n\n  useEffect(() => {\n    let subscribe = true;\n      const asyncCall = async() => {\n        try{\n          if(subscribe && currentCMS){\n            const { \n              page_title,\n              page_header,\n              slug,\n              description,\n              meta_description,\n              thumbnail,\n              category,\n              created_at,\n              updated_at,\n            } = currentCMS;\n\n            setFormData((form) => ({\n              ...form, \n              category,\n              page_title,\n              page_header,\n              slug,\n              description: HtmlParser(description),\n              meta_description,\n              created_at,\n              updated_at,\n              imageURL:process.env.REACT_APP_SERVER_URL + \"/documents/cms/\"+thumbnail,\n            }));\n            executeScroll();\n          }\n        }catch(err){\n          console.error(err.message);\n        }\n      }\n      asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [currentCMS]);\n\n\n  return loading ? (\n    <Spinner />\n  ) : (<section className=\"sptb\" ref={contentRef}>\n        <Container>\n          <Helmet>\n            <meta charSet=\"utf-8\" />\n            <meta name=\"description\" content={meta_description} />\n            <meta property=\"og:type\" content={category} />\n            <title>{page_title}</title>\n          </Helmet>\n          <Row>\n            <Col lg={8} md={12} className=\"d-block mx-auto\">\n              <Card>\n                <Card.Body>\n                  <div className=\"item7-card-img\">\n                    <Suspense>\n                      <Image className=\"w-100\" alt=\"img\" src={imageURL} rounded/>\n                    </Suspense>\n                    <div className=\"item7-card-text\">\n                      <Badge variant=\"info\">\n                        {category ? category.name : \"\"}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"item7-card-desc d-flex mb-2 mt-3\">\n                    <span>\n                      <FaCalendarAlt className=\"text-muted mr-2\" />\n                      Updated: {' '}\n                      <Moment unix format=\"DD MMM, YYYY\">{Math.ceil(updated_at/1000)}</Moment>\n                    </span>\n                  </div>\n                  <Link to={slug}>\n                    <h2 className=\"font-weight-semibold\">{page_header}</h2>\n                  </Link>\n                  {description}\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </section>\n  );\n};\n\nPage.propTypes = {\n  getCMSBySlug: PropTypes.func.isRequired,\n  notFound: PropTypes.func.isRequired,\n  errorList: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  currentCMS: state.page.currentCMS,\n  errorList: state.errors,\n  loading: state.page.loadingCMS,\n});\n\nexport default connect(mapStateToProps, {\n  getCMSBySlug,\n  notFound,\n  resetComponentStore,\n})(withRouter(Page));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LabTests/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/VerifyOTP.js",["1142","1143","1144","1145"],"import React, { useEffect, useState } from \"react\";\nimport OtpInput from \"react-otp-input\";\n\nimport {\n  Modal,\n  Button,\n  Form,\n} from \"react-bootstrap\";\nimport {\n  Spinner\n} from \"reactstrap\";\n\nimport Errors from \"views/Notifications/Errors\";\nimport { removeErrors } from \"actions/auth\";\n\nconst VerifyOTP = ({\n  show, \n  firebaseAuth,\n  setErrors,\n  resendOtpFlag,\n  resenOtpTimer,\n  renderCaptcha = () => {},\n  onConfirm = () => {}, \n  onReject = () => {} \n}) => {\n  const [OTP , setOTP] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleChange = otp => {\n    setOTP(otp)  \n    if(otp && otp.length == 6){\n      onSubmit(otp)\n    }  \n    \n  };\n\n  const [seconds, setSeconds] = React.useState(resenOtpTimer ? resenOtpTimer : 30);\n  const [showSendOtp, setShowSendOtp] = React.useState(false);\n\n  useEffect( () => {\n    setSeconds(resenOtpTimer ? resenOtpTimer : 30)\n  } , []);\n  useEffect( () => {\n    if (seconds > 0) {\n      setTimeout(() => setSeconds(seconds - 1), 1000);\n      setShowSendOtp(false);\n    } else {\n      setShowSendOtp(true);\n    }\n  });\n\n  useEffect( () => {\n    setSeconds(30);\n  } , [resendOtpFlag]);\n\n  const onSubmit = async (otp) => {\n    // e.preventDefault();\n    removeErrors();\n    setLoading(true);\n    try {\n      if(!new RegExp(/^\\d{6}$/).test(otp)) throw new Error(\"Invalid OTP\");\n      const auth = await firebaseAuth.confirm(otp);\n      onConfirm(auth.user);\n    }\n    catch(err) {\n      console.log(\"error on firebase OTP verify\", err);\n      setErrors([{\n        \"msg\": \"Invalid OTP Provided\",\n        \"param\": \"otp\",\n      }]);\n      setLoading(false);\n    }\n  }\n  const onCancel = () => { \n    removeErrors();\n    setSeconds(resenOtpTimer)\n    // setLoading(false);\n    setOTP(\"\");\n    onReject();\n  }\n  return (\n    <Modal\n      show={show}\n      onHide={onCancel}\n      backdrop=\"static\"\n      keyboard={false}\n      size=\"sm\"\n      className=\"verify-otp\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Verify OTP</Modal.Title>\n      </Modal.Header>\n      {resendOtpFlag && <p style={{color: \"green\" , \"text-align\": \"center\", margin: \"10px 0px -30px 0px\"}}>otp resent successfully</p>}\n      <Modal.Body className=\"align-items-center\" style={{ height: 170 }}>\n        <Form onSubmit={onSubmit}>\n          <div className=\"text-center\">\n            <OtpInput\n              value={OTP}\n              shouldAutoFocus= {true}\n              onChange={handleChange}\n              numInputs={6}\n              containerStyle=\"justify-content-center\"\n              inputStyle={{ \"border\": 0, \"borderBottom\": \"1px solid grey\", \"width\": \"2em\", \"marginTop\": \"28px\", \"marginRight\": \"4px\" }}\n            />\n            <Errors current_key=\"otp\" key=\"otp\" />\n          </div>\n          <div style={{ marginTop: 20, textAlign: \"center\" }}>\n            { \n              loading ? <Spinner color=\"warning\" />: \"\"\n            }\n          </div>\n          {seconds > 0 && <div style={{\"text-align\":\"center\"}}>Resend OTP in {seconds} seconds</div>}\n          {showSendOtp && <div style={{\"text-align\":\"center\"}}><span style={{ \"color\": \"blue\", \"cursor\": \"pointer\" }} onClick={() => renderCaptcha()}>click here</span> to resend otp</div>}\n        </Form>\n      </Modal.Body>\n    </Modal>\n      \n    );\n}\n\nexport default VerifyOTP;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/ApplyCoupon.js",["1146","1147","1148","1149"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { Container, Modal, Form, Button, Row, Col } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  applyCoupon,\n  getCouponDetails,\n  removeCoupon,\n} from \"actions/cart/cart\";\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst loaderCSS = css`\n  position: absolute;\n  top: calc(50% - 30px);\n  left: calc(50% - 30px);\n`;\n\nfunction ApplyCoupon({\n  cart,\n  loading,\n  loadingList,\n  couponDetails: { data, count },\n  getCouponDetails,\n  applyCoupon,\n  removeCoupon,\n  show,\n  handleClose,\n}) {\n  const [code, setCode] = useState(\"\");\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    ascending: \"desc\",\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [hasMore, setMore] = useState(true);\n\n  const loadNextData = () => {\n    const pageNum = 1; // parseInt(page);\n    if (data.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  };\n  \n  const submitCouponCode = (e) => {\n    e && e.preventDefault();\n    applyCouponCode(e, code);\n  };\n\n  const applyCouponCode = (e, code) => {\n    e && e.preventDefault();\n    applyCoupon(cart, code).then((res) => {\n      if(res) handleClose()\n    });\n  };\n\n  const removeCouponCode = (e) => {\n    e && e.preventDefault();\n    removeCoupon(cart).then((res) => {\n      if(res) handleClose()\n    });\n  };\n\n  // useMemo(() => {\n  //   if(show) getCouponDetails(listParams);\n  // }, [getCouponDetails, listParams, show]);\n\n  useEffect(() => {\n    if(show) getCouponDetails(listParams);\n  }, [getCouponDetails, listParams, show]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe) {\n          setMore(data.length !== count);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data, count]);\n\n\n  return (\n    <>\n    {\n      <Container>\n        <Modal show={show} onHide={handleClose}>\n          {\n            loading &&\n            <div className=\"custom_overlay\">\n              <ClipLoader \n                css={loaderCSS}\n                size={60}\n                loading={true}\n              />\n            </div>\n          }\n          <Modal.Header closeButton>\n            <Modal.Title>Apply Coupon</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Row>\n              <Col md={12}>\n                <Form>\n                  <Form.Group controlId=\"coupon\">\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Enter Coupon Code\"\n                      value={code}\n                      className=\"coupon_input pl-0\"\n                      onChange={(e) => setCode(e.target.value)}\n                    />\n                  </Form.Group>\n                </Form>\n              </Col>\n            </Row>\n\n            <InfiniteScroll\n              dataLength={data.length}\n              next={loadNextData}\n              hasMore={data.length == count ? false : hasMore}\n              height={320}\n              loader={\n                <div className=\"text-center\">\n                  <Loader type=\"grow\" color=\"primary\" />\n                </div>\n              }\n            >\n              <Container>\n              {\n                data.map((coupon, index) => {\n                  return (\n                    <Row key={coupon._id}>\n                      <Col md={10} xs={8} className=\"mb-4\">\n                        <span className=\"mr-4 font-weight-semibold\">\n                          {coupon?.code}{\" \"}\n                        </span>\n                        <p>{coupon?.description}</p>\n                      </Col>\n                      <Col md={2} xs={4} className=\"mb-4\">\n                        {\n                          coupon.isInCart ? (\n                              <a\n                                className=\"btn btn-outline-danger original coupon-float\"\n                                href=\"#\"\n                                onClick={(e) => removeCouponCode(e)}\n                              >\n                                Remove\n                              </a>\n                            ) : (\n                              <a\n                                href=\"#\"\n                                className=\"btn btn-outline-primary coupon-float\"\n                                onClick={(e) => applyCouponCode(e, coupon.code)}\n                              >\n                                Apply\n                              </a>\n                            )\n                        }\n                      </Col>\n                    </Row>\n                  );\n                })\n              }\n              </Container>\n            </InfiniteScroll>\n          </Modal.Body>\n          <Modal.Footer className=\"justify-content-center\">\n            <Button \n              className=\"w-75\"\n              variant=\"primary\" \n              onClick={submitCouponCode}\n            >\n              Apply Coupon\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </Container>\n    }\n    </>\n  );\n}\n\nApplyCoupon.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.coupon.loadingCoupon,\n  loadingList: state.coupon.loadingCouponList,\n  couponDetails: state.coupon.couponDetails,\n});\n\nexport default connect(mapStateToProps, {\n  getCouponDetails,\n  removeCoupon,\n  applyCoupon,\n})(ApplyCoupon);\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/UpdateEmail.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/TestPackageList.js",["1150","1151","1152","1153","1154","1155","1156","1157","1158"],"import React, { useMemo, useEffect, useState, Suspense } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, Image, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\nimport { getAllPackages, resetComponentStore } from \"actions/customer/labs\";\nimport * as Constants from \"constants/index\";\nimport Spinner from \"views/Spinner\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { FaEye, FaCartPlus, FaShoppingCart } from \"react-icons/fa\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport slugify from \"react-slugify\";\nimport { addToCart, createGuestCart } from \"actions/cart/cart\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\n\nconst TestPackageList = ({\n  addToCart,\n  createGuestCart,\n  isAuthenticated,\n  getAllPackages,\n  testList: { data, count },\n  loading,\n  loadingList,\n  sortingParams,\n  resetComponentStore,\n  history,\n  city,\n}) => {\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const lab_id = query.get(\"search_value\");\n  const test_type = query.get(\"search_type\");\n\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'test.name',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n  const [packagesData, setPackages] = useState({\n    packs: [],\n    disabled: '',\n  });\n\n  const {\n    packs,\n    disabled,\n  } = packagesData;\n\n\n  const loadNextData = () => {\n    const pageNum = 1; // parseInt(page);\n    if(data.length >= count) return setMore(false);\n    console.log(\"load next\");\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  const addItem = (e, item_id, item_type, lab, pack, changeLab) => {\n    e.preventDefault();\n    // if(!isAuthenticated) history.push(\"/login\");\n    let items = packs;\n    const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n    if(changeLab) productData.changeLab = changeLab;\n    setPackages((data) => ({...data, disabled: item_id }));\n    if (isAuthenticated) {\n      addToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n        }\n        setPackages((data) => ({ ...data, packs: items, disabled: '' }));\n      });  \n    } else {\n      createGuestCart(productData, pack)\n    }\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(onlyOnce) {\n        resetComponentStore();\n        setOnce(false);\n      }\n      if(subscribe &&  lab_id && test_type) {\n        getAllPackages(lab_id,test_type,listParams);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getAllPackages, disabled, city, listParams, resetComponentStore, lab_id, test_type, setOnce])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  data && data.length) {\n        setPackages((packsData) => ({ ...packsData, packs: data }));\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data])\n\n   return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\">\n      <InfiniteScroll\n        dataLength={data.length}\n        next={loadNextData}\n        hasMore={data.length == count ? false : hasMore}\n        loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n      >\n        <Container>\n          <Row>\n          {\n      data.map((row) => {\n        // const { test, price, isInCart, type, _id } = row;\n        const { test, listing_price, MRP, discount, isInCart, type, _id } = row;\n        const listing_price_currency = CURRENCY_SYMBOL[listing_price.currency];\n        const MRP_currency = CURRENCY_SYMBOL[MRP.currency];\n\n        return (\n          <Col md={6} lg={4} className=\"mb-3\">\n            <Card className=\"mb-0\">\n              <Card.Body className=\"mH-225\">\n                <div className=\"item-card2\">\n                        <Link \n                          to={{\n                            pathname:`/lab-tests/${test.type}s/${slugify(test.name)}`,\n                            hash:\"#content\",\n                            search: `?search_type=${test.type}&search_value=${test._id}`\n                          }}\n                          className=\"text-dark\"\n                        >\n                          <h4 className=\"font-weight-bold mt-1 mb-2\">\n                            {test.name}\n                          </h4>\n                        </Link>\n                        <p className=\"text-muted fs-13 mb-1 mt-2\">\n                          <span className=\"mr-4\">\n                            <b>{listing_price_currency}{listing_price.amount} <del><small>{MRP_currency}{MRP.amount}</small></del></b>\n                          </span>\n                        </p>\n                        { discount && discount > 0 ?\n                        <> \n                          <span>\n                            <sup>\n                              <h5\n                              >{`Flat ${discount}% Off`}\n                              </h5>\n                            </sup>\n                          </span>\n                        </>\n                        :null\n                        }\n                        <div className=\"bt_list\">\n                      <Link\n                        to={{\n                            pathname:`/lab-tests/${test.type}s/${slugify(test.name)}`,\n                            hash:\"#content\",\n                            search: `?search_type=${test.type}&search_value=${test._id}`\n                          }}\n                        className=\"atc\"\n                      >\n                          <FaEye className=\"mr-1\"></FaEye>\n                          View Details\n                      </Link>\n                      {\n                        isInCart === 1 ? (\n                          <Link \n                            to={{ \n                              pathname: \"/cart\",\n                              hash: \"#content\"\n                            }}\n                            className=\"btn btn-primary\">\n                            <FaShoppingCart className=\"mr-1\" />\n                            Go To Cart\n                          </Link>\n                        ): (\n                          <Button \n                            onClick={(e) => addItem(e, test._id, test.type, lab_id, row)}\n                            disabled={disabled === test._id}\n                          >\n                            <FaCartPlus className=\"mr-1\" />\n                            Add To Cart\n                          </Button>\n                        )\n                      }\n                </div>\n              </div>\n            </Card.Body>\n          </Card>\n         </Col>\n              )\n            })\n          }\n          </Row>\n        </Container>\n      </InfiniteScroll>\n    </section>\n  )\n}\n\nTestPackageList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  testList: PropTypes.object.isRequired,\n  getAllPackages: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.labs.loadingLabsList,\n  loadingList: state.labs.loadingTestsList,\n  testList: state.labs.testList,\n  sortingParams: state.labs.sortingParams,\n  city: state.citySearch.currentCity,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n  addToCart,\n  getAllPackages,\n  resetComponentStore,\n  createGuestCart,\n})(withRouter(TestPackageList));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/List.js",["1159","1160","1161","1162"],"import React, { useMemo, useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Container, Card, Col, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\nimport { getAddressList, resetComponentStore, getSelectedAddressByCart, updateCartAddress } from 'actions/customer/address';\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport AddressCard from './AddressCard';\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current?.offsetTop);\n\nconst List = ({\n  updateCartAddress,\n  getAddressList,\n  getSelectedAddressByCart,\n  setValidation,\n  resetComponentStore,\n  addressList: { data, count },\n  cartDetails: {\n    _id\n  },\n  selectedAddress,\n  loading,\n  history,\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n  const [selected, setSelected] = useState(selectedAddress);\n  const contentRef = useRef(null)\n  const executeScroll = () => scrollToRef(contentRef)\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const cart = query.get(\"cart\") ? query.get(\"cart\") : _id;\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getAddressList(listParams);\n  // }, [getAddressList, listParams, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getAddressList(listParams);\n  }, [getAddressList, listParams, resetComponentStore, setOnce]);\n\n  // useMemo(() => {\n  //   if(cart) {\n  //     getSelectedAddressByCart(cart);\n  //     executeScroll();\n  //   }\n  // }, [getSelectedAddressByCart, cart, executeScroll]);\n\n  // useMemo(() => {\n  //   if(cart) {\n  //     getSelectedAddressByCart(cart);\n  //     executeScroll();\n  //   }\n  // }, [getSelectedAddressByCart, cart, executeScroll]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && cart) {\n              getSelectedAddressByCart(cart);\n              executeScroll();\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getSelectedAddressByCart, cart, executeScroll])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && selectedAddress) {\n          setSelected(selectedAddress);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selectedAddress])\n\n  const loadNextData = () => {\n    const pageNum = 1; // parseInt(page);\n    if(data.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  const onSelect = (id) => {\n    setSelected(id);\n  }\n\n  const onContinue = (e, id) => {\n    e.preventDefault();\n    if(!id) return alert(\"Please select an address to continue\");\n    updateCartAddress(cart, id).then((status) => {\n      if(status) setValidation('selectAddress');\n    });\n  }\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\" ref={contentRef}>\n      <Container>\n        <Row>\n          <Col>\n            <Card>\n              <Card.Header>\n                <h4 className=\"title\">Do you want to add new address? </h4>\n                <Link\n                  to={{\n                    pathname:`/addresses/create`,\n                    hash:\"#content\",\n                  }}\n                  className=\"btn btn-primary ml-auto\"\n                >\n                  Add\n                </Link>\n                </Card.Header>\n              <Card.Body>\n                <div style={{ minHeight: 300 }}>\n                  <InfiniteScroll\n                    dataLength={data.length}\n                    next={loadNextData}\n                    hasMore={data.length == count ? false : hasMore}\n                    loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n                  >\n                    <Container>\n                      {/* <Row> */}\n                        <AddressCard \n                          data={data}\n                          selectable={!!cart} \n                          selected={selected}\n                          select={onSelect}\n                        />\n                      {/* </Row> */}\n                    </Container>\n                  </InfiniteScroll>\n                </div>\n                {\n                  !!cart && \n                  <Row>\n                    <Col md={4} className=\"text-center ml-auto mr-auto mt-3 p-2\">\n                      <Button\n                        color=\"primary\"\n                        className=\"w-100\"\n                        onClick={(e) => onContinue(e, selected)}\n                      >\n                        Continue\n                      </Button>\n                    </Col>\n                  </Row>\n                }\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  addressList: PropTypes.object.isRequired,\n  getAddressList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  updateCartAddress: PropTypes.func.isRequired,\n  getSelectedAddressByCart: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.address.loadingAddressList,\n  addressList: state.address.addressList,\n  selectedAddress: state.address.selectedAddress,\n  cartDetails: state.cart.cartDetails,\n  sortingParams: state.address.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  updateCartAddress,\n  getAddressList,\n  getSelectedAddressByCart,\n  resetComponentStore\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/Edit.js",["1163","1164","1165","1166","1167","1168","1169","1170","1171","1172"],"import React, { useMemo, useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { useLocation, withRouter } from \"react-router-dom\";\nimport { edit, remove, getAddressByID, resetComponentStore, setErrors, removeErrors, cancelSave, showAlert } from 'actions/customer/address';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport GMaps from \"utils/GMaps\";\nimport ViewMap from \"./ViewMap\";\nimport { FaLocationArrow, FaTimes } from \"react-icons/fa\";\nimport { validateForm } from \"utils/validation\";\n\nfunction roundOff(num, decimalPlaces) {\n  return Math.round((num + Number.EPSILON) * 10**decimalPlaces) / 10**decimalPlaces\n}\n\nconst Edit = ({\n  loading,\n  user,\n  edit,\n  currentAddress,\n  remove,\n  getAddressByID,\n  resetComponentStore,\n  setErrors,\n  removeErrors,\n  cancelSave,\n  history,\n  showAlert,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    type: \"Home\",\n    address:\"\",\n    location: {},\n    current: null,\n    // zip_code:\"\",\n    locality: \"\",\n    locality_name: \"\",\n    zoom: 17,\n    city: {\n      bounds: user?.city?.location,\n      place_id: user?.city.place_id,\n    },\n  };\n\n  const [formData, setFormData] = useState(initialState);\n  const [toggleLocalityBox, setLocalityVisibility] = useState(false);\n  // const [editingZip, setEditingZip] = useState(false);\n  // const contentRef = useRef(null)\n\n  const {\n    type,\n    address,\n    location,\n    current,\n    // zip_code,\n    zoom,\n    city,\n  } = formData;\n\n  let delayTimer;\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  let position = useGEOLocation();\n\n  const value = query.get(\"search_value\");\n\n  const setGMapPlace = location => {\n    const place_id = location.place_id;\n    if (!place_id) return;\n    const city_name = location.name;\n    const addresses = location.address_components;\n    const lat = location.geometry.location ? location.geometry.location.lat() : \"\";\n    const lng = location.geometry.location ? location.geometry.location.lng() : \"\";\n\n    let state = '';\n    let country = '';\n    let short = '';\n\n    addresses.forEach((e) => {\n      switch (e.types[0]) {\n        case 'administrative_area_level_1':\n          state = e.long_name;\n          break;\n        case 'country':\n          country = e.long_name;\n          short = e.short_name;\n          break;\n      }\n    });\n    setFormData((form) => ({\n      ...form,\n      location: { lat, lng },\n      // city: \n    }));\n  }\n\n  const onLocality = loc => {\n    if(loc) {\n      setFormData((form) => ({\n        ...form,\n        locality: loc.place_id,\n        locality_name: loc.locality_name\n      }));\n      setLocalityVisibility(false);\n    } else {\n      setFormData((form) => ({\n        ...form,\n        locality: \"\",\n        locality_name: \"\"\n      }));\n      setLocalityVisibility(true);\n    }\n  }\n\n  const setGMapLocality = v => {\n    if(v && v.place_id) {\n      const place_id = v.place_id;\n      const locality_name = v.name;\n      setFormData((form) => ({ \n        ...form,\n        locality_name,\n        locality: place_id,\n      }));\n      if(!v.place_id) return;\n      if(v.types[0] === \"sublocality_level_1\" || v.types[0] === \"neighborhood\"){\n        removeErrors();\n      }else{\n        const errors = [];\n        errors.push({\n            param:\"g_locality_picker\",\n            msg: \"Please select a valid locality\",\n        });\n        setErrors(errors);\n      }\n    }\n    else {\n      setFormData((form) => ({\n        ...form,\n        locality_name: \"\",\n        locality: \"\",\n      }));\n    }\n  }\n\n  const execWithDelay = (cb, input) => (delay = 750) => {\n    clearTimeout(delayTimer);\n    return new Promise((resolve) => {\n      delayTimer = setTimeout(() => {\n        resolve(cb(input));\n      }, delay);\n    })\n  }\n\n  //########################## change event for all inputs ##############################\n  const onChange = async e => {\n    const { name, value } = e.target;\n    // if(name === \"zip_code\") setEditingZip(true);\n    setFormData({ \n      ...formData, \n      [name]: value,\n    });\n  };\n\n  const currentLocation = () => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setFormData((form) => ({\n        ...form,\n        location: { lat, lng },\n        current: { lat, lng },\n        zoom: 18,\n      }))\n    }\n    function error(err) {\n      console.log(err);\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }\n\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    e.preventDefault();\n    removeErrors();\n    const place_id = city.place_id;\n    if(!place_id) {\n      showAlert(\"Please select your city first to proceed\");\n      return;\n    }\n    const data = {\n      ...formData,\n      location: [location.lng, location.lat],\n      city: place_id,\n    };\n    const noErrors = validateForm(data, [\n      {\n        param:\"type\",\n        msg: 'Please, select the type of address.',\n      },\n      {\n        param:'address',\n        msg:'Please provide the address of customer.',\n      },\n      {\n        param:'location',\n        type:'array',\n        msg:'Please move the marker to pick a location.',\n      },\n      // {\n      //   param:\"zip_code\",\n      //   msg: 'Please provide the zip code of locality',\n      // }\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { zoom: 1 };\n    for(let i in data){\n      if(!data[i] || excludeList[i]) continue;\n      submitData[i] = data[i];\n    }\n    edit(value, submitData, history);\n  };\n\n  const onCancel = (e) => {\n    e.preventDefault();\n    cancelSave(history);\n  }\n\n  const onRemove = (e) => {\n    e.preventDefault();\n    remove(value, history);\n  }\n\n  const onUpdateLoc = (data) => {\n    setFormData((form) => ({\n      ...form,\n      location: data,\n    }));\n  }\n\n  const onInput = value => {\n    setFormData((form) => ({\n      ...form,\n      address: value,\n    }));\n  }\n\n  // useMemo(() => {\n  //   resetComponentStore();\n  //   getAddressByID(value);\n  // }, [getAddressByID, value]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        resetComponentStore();\n        if (subscribe && value) {\n            getAddressByID(value);\n        }\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [getAddressByID, value]);\n\n  // useEffect(() => {\n  //   if(editingZip && zip_code.length > 4 && zip_code.length < 7) {\n  //     execWithDelay(GEOCoder, { zip_code, country: \"IN\" })()\n  //     .then((loc) => {\n  //       if(loc) {\n  //         setFormData((form) => ({\n  //           ...form,\n  //           location: loc,\n  //         }))\n  //       }\n  //     })\n  //   }\n  // }, [zip_code]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe && currentAddress) {\n        try {\n          const { type, address, city, /* zip_code */locality_name, locality, location } = currentAddress;\n          let coords = {};\n          if(location && location.coordinates) {\n            coords = { lat: location.coordinates[1], lng: location.coordinates[0] };\n          } else {\n            currentLocation();\n          }\n          setFormData((form) => ({\n            ...form,\n            type,\n            address: address.indexOf(locality_name) === -1? address + \", \" + locality_name: address,\n            city: {\n              bounds: city.location,\n              place_id: city.place_id,\n            },\n            locality,\n            locality_name,\n            // zip_code,\n            location: coords,\n            zoom: 18,\n          }));\n        }\n        catch(err) {\n          console.log(err);\n        }\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [currentAddress]);\n\n  useEffect(() => {\n    setFormData((form) => ({\n      ...form,\n      current: position,\n    }))\n  }, [position]);\n\n\n  return (\n    loading ? <Spinner />:\n    <section className=\"sptb\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={6}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"address\">\n                        <Form.Label>Address Type <span>*</span></Form.Label>\n                        <Form.Control \n                          as=\"select\"\n                          value={type}\n                          name=\"type\"\n                          onChange={onChange}\n                        >\n                          <option value=\"Home\">Home</option>\n                          <option value=\"Office\">Office</option>\n                          <option value=\"Other\">Others</option>\n                        </Form.Control>\n                        <Errors key=\"type\" current_key=\"type\" />\n                      </Form.Group>\n                      {/* <Form.Group controlId=\"zip_code\">\n                        <Form.Label>Zip Code <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          placeholder=\"XXXXXX\"\n                          value={zip_code}\n                          name=\"zip_code\"\n                          onChange={onChange}\n                        />\n                        <Errors key=\"zip_code\" current_key=\"zip_code\" />\n                      </Form.Group> */}\n                      <Form.Group controlId=\"location\">\n                        <div>\n                          <div className=\"d-flex\">\n                            <div className=\"w-100\">\n                              <GMaps\n                                label=\"Address\"\n                                onChange={setGMapPlace}\n                                onInputChange={onInput}\n                                placeholder={ \"Enter your address here\" }\n                                defaultValue={address}\n                                location={city.bounds}\n                                findLocalityUsingAddress={true}\n                                onLocalityFound={onLocality}\n                              />\n                            </div>\n                            <div className=\"mt-auto ml-3 mb-4\">\n                              <Button \n                                onClick={currentLocation}\n                                type=\"button\"\n                                title=\"My location\"\n                              >\n                                <FaLocationArrow />\n                              </Button>\n                            </div>\n                          </div>\n                          <Errors key=\"address\" current_key=\"address\" />\n                          { \n                            toggleLocalityBox && <>\n                              <GMaps\n                                label=\"Locality\"\n                                onChange={setGMapLocality}\n                                placeholder={ \"Ex: Vaishali Nagar, Mansarovar\" }\n                                location={city.bounds}\n                                localitySearch={true}\n                                name={\"g_locality_picker\"}\n                              />\n                              <Errors key=\"location\" current_key=\"location\" /> \n                            </>\n                          }\n                          <ViewMap position={location} current={current} updateLocation={onUpdateLoc} zoom={zoom}/>\n                        </div>\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup className=\"w-100\">\n                    <Button \n                      type=\"submit\"\n                      variant=\"success\"\n                      className=\"mr-2\"\n                    >\n                      Save\n                    </Button>\n                    <Button \n                      type=\"reset\"\n                      onClick={onCancel}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={onRemove}\n                      variant=\"danger\"\n                      className=\"modified ml-auto\"\n                    >\n                      <FaTimes /> Remove\n                    </Button>\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n  )\n}\n\nconst GEOCoder = ({ zip_code, country }) => {\n  const API_KEY = \"AIzaSyDkYcFk5rZMvW2Sf0JnCZm9YGvG-Zwgb2U\";\n  const ZIP_CODE_API = `https://maps.googleapis.com/maps/api/geocode/json?`;\n  const components = `components=postal_code:${zip_code}|country:${country}&key=${API_KEY}`;\n  let data;\n  return fetch(ZIP_CODE_API+components)\n    .then(res => res.json())\n    .then(result => {\n      const geometry = result.results.filter(d => d[\"geometry\"]);\n      if(geometry && geometry.length === 1) {\n        data = geometry[0].geometry.location;\n      }\n      return data;\n    });\n}\n\nconst useGEOLocation = (position) => {\n  const [coords, setCoords] = useState(null);\n  \n  useEffect(() => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setCoords({lat, lng });  \n    }\n    function error(err) {\n      console.log(err);\n      // setCoords({ ...position });\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n  return coords;\n}\n\n\nEdit.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  edit: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  getAddressByID: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.address.loadingAddress,\n  currentAddress: state.address.currentAddress,\n  user: state.auth.user,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  edit,\n  remove,\n  getAddressByID,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n  showAlert \n})(withRouter(Edit));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LT_Categories/Categories.js",["1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Card, Image, Container } from \"react-bootstrap\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getCategoriesList, getMoreCategories, resetComponentStore } from \"actions/customer/lt_categories\";\nimport slugify from \"react-slugify\";\nimport Spinner from \"views/Spinner\";\nimport radiology from \"assets/images/icon01.png\";\nimport pathology from \"assets/images/icon02.png\";\nimport LoadCategory from \"./LoadCategory\";\n\nconst Categories = ({\n  getCategoriesList,\n  getMoreCategories,\n  loading,\n  loadMore,\n  categoryList: { data, page, count },\n  city,\n  testCategories,\n  resetComponentStore,\n  sortingParams,\n}) => {\n  const initialParams = {    \n    limit: 6,\n    page: 1,\n    orderBy: 'name',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [onlyOnce, setOnce] = useState(true);\n  const cardCols = [\"primary\", \"secondary\", \"info\", \"danger\", \"warning\"];\n  let colNum = 0;\n  let colorSelected = cardCols[0];\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getCategoriesList(initialParams);\n  // }, [resetComponentStore, city, getCategoriesList, setOnce]);\n\n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getCategoriesList(initialParams);\n  }, [resetComponentStore, city, getCategoriesList, setOnce]);\n\n  return (\n    loading ? <Spinner />:\n    <>\n      <section className=\"sptb\">\n        <Container>\n          <div className=\"section-title center-block text-center\">\n            <h2>Habits/Conditions</h2>\n          </div>\n          <LoadCategory \n            loadMoreCallback={getMoreCategories}\n            totalResults={count}\n            loading={loadMore}\n            pageLoaded={page}\n            habits={data}\n            sortingParams={sortingParams}\n          />\n        </Container>\n      </section>\n    </>\n  )\n};\n\n\nCategories.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getCategoriesList: PropTypes.func.isRequired,\n  getMoreCategories: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.ltCategories.loadingCategoryList,\n  loadMore: state.ltCategories.loadMoreCategory,\n  testCategories: state.ltCategories.testCategories,\n  city: state.citySearch.currentCity,\n  categoryList: state.ltCategories.categoryList,\n  sortingParams: state.ltCategories.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  getCategoriesList,\n  getMoreCategories,\n  resetComponentStore\n})(withRouter(Categories));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/Add.js",["1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { create, loadPage, resetComponentStore, setErrors, removeErrors, cancelSave, showAlert } from 'actions/customer/address';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport GMaps from \"utils/GMaps\";\nimport ViewMap from \"./ViewMap\";\nimport { FaLocationArrow } from \"react-icons/fa\";\nimport { validateForm } from \"utils/validation\";\n\nfunction roundOff(num, decimalPlaces) {\n  return Math.round((num + Number.EPSILON) * 10**decimalPlaces) / 10**decimalPlaces\n}\n\n\nconst Add = ({\n  loading,\n  user,\n  create,\n  resetComponentStore,\n  loadPage,\n  setErrors,\n  removeErrors,\n  cancelSave,\n  history,\n  showAlert,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    type: \"Home\",\n    address:\"\",\n    location: {},\n    current: null,\n    // zip_code: \"\",\n    locality: \"\",\n    locality_name: \"\",\n    zoom: 17,\n    city: {\n      bounds: user?.city?.location,\n      place_id: user?.city.place_id,\n    },\n  };\n\n  const [formData, setFormData] = useState(initialState);\n  const [toggleLocalityBox, setLocalityVisibility] = useState(false);\n\n  const {\n    type,\n    address,\n    locality,\n    locality_name,\n    location,\n    current,\n    // zip_code,\n    zoom,\n    city,\n  } = formData;\n\n  let delayTimer;\n\n  let position = useGEOLocation();\n\n  const setGMapPlace = location => {\n    const place_id = location.place_id;\n    if (!place_id) return;\n    const city_name = location.name;\n    const addresses = location.address_components;\n    const lat = location.geometry.location ? location.geometry.location.lat() : \"\";\n    const lng = location.geometry.location ? location.geometry.location.lng() : \"\";\n\n    let state = '';\n    let country = '';\n    let short = '';\n    addresses.forEach((e) => {\n      switch (e.types[0]) {\n        case 'administrative_area_level_1':\n          state = e.long_name;\n          break;\n        case 'country':\n          country = e.long_name;\n          short = e.short_name;\n          break;\n      }\n    });\n    setFormData((form) => ({\n      ...form,\n      location: { lat, lng },\n      // city: \n    }));\n  }\n\n  const onLocality = loc => {\n    if(loc) {\n      setFormData((form) => ({\n        ...form,\n        locality: loc.place_id,\n        locality_name: loc.locality_name\n      }));\n      setLocalityVisibility(false);\n    } else {\n      setFormData((form) => ({\n        ...form,\n        locality: \"\",\n        locality_name: \"\"\n      }));\n      setLocalityVisibility(true);\n    }\n  }\n\n  const setGMapLocality = v => {\n    if(v && v.place_id) {\n      const place_id = v.place_id;\n      const locality_name = v.name;\n      setFormData((form) => ({ \n        ...form,\n        locality_name,\n        locality: place_id,\n      }));\n      if(!v.place_id) return;\n      if(v.types[0] === \"sublocality_level_1\" || v.types[0] === \"neighborhood\"){\n        removeErrors();\n      }else{\n        const errors = [];\n        errors.push({\n            param:\"g_locality_picker\",\n            msg: \"Please select a valid locality\",\n        });\n        setErrors(errors);\n      }\n    }\n    else {\n      setFormData((form) => ({\n        ...form,\n        locality_name: \"\",\n        locality: \"\",\n      }));\n    }\n  }\n\n  const execWithDelay = (cb, input) => (delay = 750) => {\n    clearTimeout(delayTimer);\n    return new Promise((resolve) => {\n      delayTimer = setTimeout(() => {\n        resolve(cb(input));\n      }, delay);\n    })\n  }\n\n  //########################## change event for all inputs ##############################\n  const onChange = async e => {\n    const { name, value } = e.target;\n    setFormData({ \n      ...formData, \n      [name]: value,\n    });\n  };\n\n  const onInput = value => {\n    setFormData((form) => ({\n      ...form,\n      address: value,\n    }));\n  }\n\n  // const onLocalityInput = value => {\n  //   setFormData((form) => ({\n  //     ...form,\n  //     locality_name: value,\n  //   }));\n  // }\n\n  const currentLocation = () => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setFormData((form) => ({\n        ...form,\n        location: { lat, lng },\n        current: { lat, lng },\n        zoom: 18,\n      }))\n    }\n    function error(err) {\n      console.log(err);\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }\n\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    e.preventDefault();\n    removeErrors();\n    const place_id = city.place_id;\n    if(!place_id) {\n      showAlert(\"Please select your city first to proceed\");\n      return;\n    }\n    const data = {\n      ...formData,\n      location: [location.lng, location.lat],\n      city: place_id,\n    };\n    const noErrors = validateForm(data, [\n      {\n        param:\"type\",\n        msg: 'Please, select the type of address.',\n      },\n      {\n        param:'address',\n        msg:'Please provide the address of customer.',\n      },\n      {\n        param:'location',\n        type:'array',\n        msg:'Please move the marker to pick a location.',\n      },\n      // {\n      //   param:\"zip_code\",\n      //   msg: 'Please provide the zip code of locality',\n      // }\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { zoom: 1 };\n    for(let i in data){\n      if(!data[i] || excludeList[i]) continue;\n      submitData[i] = data[i];\n    }\n    create(submitData, history);\n  };\n\n  const onCancel = (e) => {\n    e.preventDefault();\n    cancelSave(history);\n  }\n\n  const onUpdateLoc = (data) => {\n    setFormData((form) => ({\n      ...form,\n      location: data,\n    }));\n  }\n\n  // useMemo(() => {\n  //   loadPage();\n  //   resetComponentStore();\n  // }, []);\n\n  useEffect(() => {\n    loadPage();\n    resetComponentStore();\n  }, []);\n\n  useEffect(() => {\n    setFormData((form) => ({\n      ...form,\n      location: position,\n      current: position,\n      zoom: 17,\n    }))\n  }, [position]);\n\n  // useEffect(() => {\n  //   if(zip_code.length > 4 && zip_code.length < 7) {\n  //     execWithDelay(GEOCoder, { zip_code, country: \"IN\" })()\n  //     .then((loc) => {\n  //       if(loc) {\n  //         setFormData((form) => ({\n  //           ...form,\n  //           location: loc,\n  //         }))\n  //       }\n  //     })\n  //   }\n  // }, [zip_code]);\n\n  return (\n    loading ? <Spinner />:\n    <section className=\"sptb\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={6}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"address\">\n                        <Form.Label>Address Type <span>*</span></Form.Label>\n                        <Form.Control \n                          as=\"select\"\n                          value={type}\n                          name=\"type\"\n                          onChange={onChange}\n                        >\n                          <option value=\"Home\">Home</option>\n                          <option value=\"Office\">Office</option>\n                          <option value=\"Other\">Others</option>\n                        </Form.Control>\n                        <Errors key=\"type\" current_key=\"type\" />\n                      </Form.Group>\n                      {/* <Form.Group controlId=\"zip_code\">\n                        <Form.Label>Zip Code <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          placeholder=\"XXXXXX\"\n                          value={zip_code}\n                          name=\"zip_code\"\n                          onChange={onChange}\n                        />\n                        <Errors key=\"zip_code\" current_key=\"zip_code\" />\n                      </Form.Group> */}\n                      <Form.Group controlId=\"location\">\n                        <div>\n                          <div className=\"d-flex\">\n                            <div className=\"w-100\">\n                              <GMaps\n                                label=\"Address\"\n                                onChange={setGMapPlace}\n                                onInputChange={onInput}\n                                placeholder={ \"Enter your address here\" }\n                                location={city.bounds}\n                                findLocalityUsingAddress={true}\n                                onLocalityFound={onLocality}\n                              />\n                            </div>\n                            <div className=\"mt-auto ml-3 mb-4\">\n                              <Button \n                                onClick={currentLocation}\n                                type=\"button\"\n                                title=\"My location\"\n                              >\n                                <FaLocationArrow />\n                              </Button>\n                            </div>\n                          </div>\n                          <Errors key=\"address\" current_key=\"address\" />\n                          { \n                            toggleLocalityBox && <>\n                              <GMaps\n                                label=\"Locality\"\n                                onChange={setGMapLocality}\n                                placeholder={ \"Ex: Vaishali Nagar, Mansarovar\" }\n                                location={city.bounds}\n                                localitySearch={true}\n                                name={\"g_locality_picker\"}\n                              />\n                              <Errors key=\"location\" current_key=\"location\" /> \n                            </>\n                          }\n                          <ViewMap position={location} current={current} updateLocation={onUpdateLoc} zoom={zoom}/>\n                        </div>\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup>\n                    <Button \n                      type=\"submit\"\n                      variant=\"success\"\n                      className=\"mr-2\"\n                    >\n                      Save\n                    </Button>\n                    <Button \n                      type=\"reset\"\n                      onClick={onCancel}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n  )\n}\n\n// const GEOCoder = ({ zip_code, country }) => {\n//   const API_KEY = \"AIzaSyDkYcFk5rZMvW2Sf0JnCZm9YGvG-Zwgb2U\";\n//   const ZIP_CODE_API = `https://maps.googleapis.com/maps/api/geocode/json?`;\n//   const components = `components=postal_code:${zip_code}|country:${country}&key=${API_KEY}`;\n//   let data;\n//   return fetch(ZIP_CODE_API+components)\n//     .then(res => res.json())\n//     .then(result => {\n//       const geometry = result.results.filter(d => d[\"geometry\"]);\n//       if(geometry && geometry.length === 1) {\n//         data = geometry[0].geometry.location;\n//       }\n//       return data;\n//     });\n// }\n\nconst useGEOLocation = (position) => {\n  const [coords, setCoords] = useState(null);\n  \n  useEffect(() => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setCoords({lat, lng });  \n    }\n    function error(err) {\n      console.log(err);\n      // setCoords({ ...position });\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n  return coords;\n}\n\nAdd.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  create: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.address.loadingAddress,\n  user: state.auth.user,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  loadPage,\n  create,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n  showAlert \n})(withRouter(Add));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/List.js",["1196","1197","1198","1199","1200"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Container, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { getCategoriesList, resetComponentStore } from \"actions/customer/lt_categories\";\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport HabitCard from './HabitCardComponent';\n\nconst List = ({\n  getCategoriesList,\n  resetComponentStore,\n  categoryList: { data, count, page },\n  city,\n  loading\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n\n  const [habitData, setHabits] = useState({\n    habits: []\n  });\n\n  const {\n    habits\n  } = habitData;\n  \n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getCategoriesList(listParams);\n  }, [getCategoriesList, listParams, city, resetComponentStore, setOnce]);\n\n  const loadNextData = () => {\n    const pageNum = parseInt(page);\n    if(habits.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  data) {\n        let habitsList = [];\n        if (data.length > 0) {\n            data.map((item) => {\n              habitsList.push(item);\n            })\n            habitsList = [...habits, ...data];\n        }\n        else if(data.length === 0 && page > 0) habitsList = data;\n        setHabits((habitData) => ({ ...habitData, habits: habitsList }));\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data]);\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\" id=\"content\">\n      \n        <InfiniteScroll\n          dataLength={habits.length}\n          next={loadNextData}\n          hasMore={habits.length == count ? false : hasMore}\n          loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Hey! There is no more habits.</b>\n            </p>\n          }\n        >\n          <Container>\n            <div className=\"item-search-tabs rightsec\">\n              <ul className=\"top_cat banner_sec\">\n\t\t\t\t\t    <Col xl={12} lg={12} md={12}>\n\t\t\t\t\t\t    <div class=\" mb-lg-0\">\n\t\t\t\t\t\t\t    <Row>\n                    <HabitCard data={habits} />\n                   </Row>\n                </div>\n              </Col>\n            </ul>\n            </div>\n          </Container>\n        </InfiniteScroll>\n    </section>\n  )\n}\n\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  habitsData: PropTypes.object.isRequired,\n  getCategoriesList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.ltCategories.loadMoreCategory,\n  categoryList: state.ltCategories.categoryList,\n  sortingParams: state.ltCategories.sortingParams,\n  city: state.citySearch.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  getCategoriesList,\n  resetComponentStore\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/Details.js",["1201","1202","1203","1204","1205","1206","1207"],"import React, { useState, useEffect, Suspense } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, Image, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\nimport { FaCartPlus, FaShoppingCart } from \"react-icons/fa\";\nimport { IoMdStar } from \"react-icons/io\";\nimport { getTestsByHabit, resetComponentStore, getHabitDescription } from \"actions/customer/habits\";\nimport Spinner from \"views/Spinner\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport Rating from \"utils/Rating\";\nimport slugify from \"react-slugify\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { addToCart, createGuestCart, getGuestUserCart } from \"actions/cart/cart\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport HtmlParser from \"utils/HtmlParser\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst HabitDetails = ({\n  addToCart,\n  createGuestCart,\n  getGuestUserCart,\n  isAuthenticated,\n  getTestsByHabit,\n  getHabitDescription,\n  testList: { data, count, page },\n  habitData,\n  cart,\n  loading,\n  loadingList,\n  sortingParams,\n  city,\n  resetComponentStore,\n  history,\n}) => {\n  const initialSortingParams = {\n    limit: 9,\n    page: 1,\n    orderBy: 'test.name',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n  const [habitsData, setHabits] = useState({\n    tests: [],\n    disabled: '',\n  });\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const value = query.get(\"search_value\");\n\n  const {\n    tests,\n    disabled,\n  } = habitsData;\n\n  const loadNextData = () => {\n    const pageNum = parseInt(page);\n    if(tests.length >= count) return setMore(false);\n    if(loading) return;\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  useEffect(() => {\n    getHabitDescription(value);\n  }, [value]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && !isAuthenticated) {\n          getGuestUserCart();\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [isAuthenticated]);\n\n  const addItem = (e, item_id, item_type, lab, listing_price, name, changeLab) => {\n    e.preventDefault();\n    const pack = {\n      price: listing_price,\n      name: name\n    }\n    let items = tests;\n    const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n    if(changeLab) productData.changeLab = changeLab;\n    setHabits((data) => ({...data, disabled: item_id }));\n    if (isAuthenticated) {\n      addToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n        }\n        setHabits((data) => ({ ...data, tests: items, disabled: '' }));\n      });\n    } else {\n      const guestCart = createGuestCart({ \n        productID: productData.productID, \n        productType: productData.productType,\n        lab,\n        ...pack\n      });\n      if (guestCart) {\n        items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n      }\n      else {\n        console.log(\"product not added\");\n      }\n      setHabits((data) => ({ ...data, tests: items, disabled: '' }));\n    }\n  }\n\n\n  const ItemCard = (row) => {\n    // const { lab, name, price, testsIncluded, isInCart, _id, type } = row;\n    const { lab, name, listing_price, MRP, discount, testsIncluded, isInCart, _id, type } = row;\n    const { labName, labImage, averageRating, totalReviews, certificates } = lab;\n    const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n    const listing_price_currency = CURRENCY_SYMBOL[listing_price.currency];\n    const MRP_currency = CURRENCY_SYMBOL[MRP.currency];\n    const certificatesAvailable = !!certificates && certificates.length > 0;\n    const discountLabel = (\n    `\n    <div class=\"container\" style=\"box-shadow: 1px 1px 1px 1px grey; padding:10px; width : 270px; background-color: white;\">\n        <div class=\"row\" style=\"display: flex; width: 260px;\">\n        <div class=\"col-8\">\n          <span>\n            Price(exclusive taxes)\n          </span>\n        </div>\n        <div class=\"col text-left\">\n          <span>\n            ${CURRENCY_SYMBOL[MRP.currency]} ${MRP.amount}\n          </span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"display: flex; width: 260px;\">\n        <div class=\"col-8\">\n          <span>\n            Selling Price\n          </span>\n        </div>\n        <div class=\"col text-left\">\n          <span>\n            ${CURRENCY_SYMBOL[listing_price.currency]} ${listing_price.amount}\n          </span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"border-top: 1px dotted black; display: flex; width: 240px; margin-top : 8px; margin : 8px; margin-left : 2px;\">\n        <div class=\"col text-center\">\n          <span >\n            You Save ${CURRENCY_SYMBOL[listing_price.currency]} ${MRP.amount-listing_price.amount} (${discount}%)\n          </span>\n        </div>\n      </div>\n    </div>`\n  );\n\n\n    return (\n      <Col md={6} lg={4} className=\"mb-3\">\n        <Card className=\"mb-0 box-shadow\" style={{ 'height': '340px'}}>\n          <Card.Body className=\"mH-295\">\n            <div className=\"item-card2\">\n              <Link\n                to={{\n                  pathname:`/lab-tests/${type}s/${slugify(name)}`,\n                  search: `?search_type=${type}&search_value=${_id}`\n                }}\n                className=\"text-dark\"\n              >\n                <h4 className=\"font-weight-bold mt-1 mb-2 ellipses\">\n                  {name}\n                </h4>\n              </Link>\n              <div className={ !testsIncluded ? \"d-flex align-items-end\": \"\" } style={{ minHeight: 75 }}>\n                { !!testsIncluded && <small className=\"text-muted\">{`Include ${testsIncluded} tests`}</small> }\n                <p className=\"text-muted fs-13 mb-1 mt-2\">\n                  Starting From \n                  <span className=\"mr-4\">\n                    <b>{listing_price_currency}{listing_price.amount} <del><small>{MRP_currency}{MRP.amount}</small></del></b>\n                  </span>\n                </p>\n              </div>\n                { discount && discount > 0 ?\n                <> \n                  <span>\n                    <sup>\n                      <h5\n                          data-for=\"helper\"\n                          // data-type=\"light\"\n                          data-tip={discountLabel}\n                          data-html={true}\n                          data-iscapture=\"true\"\n                          data-text-color=\"black\"\n                          data-background-color=\"#fff\"\n                      >{`Flat ${discount}% Off`}\n                      </h5>\n                    </sup>\n                  </span>\n                  <ReactTooltip\n                    className=\"tooltip\"\n                    id=\"helper\"\n                    place=\"right\"\n                    effect=\"float\"\n                    multiline={true}\n                  />\n                </>\n                :null\n                }\n              <Row style={{ marginLeft: 0, marginTop: 15 }}>\n                <div style={{ \n                    height: 65, \n                    width: 65, \n                    padding: 4, \n                    boxShadow: \"2px 1px 4px rgba(0,0,0, 0.3)\",\n                    marginRight: 8 \n                  }}\n                >\n                  <Suspense>\n                    <Image \n                      src={labImageURL}\n                      alt={labName} \n                      style={{ maxHeight: 61, maxWidth: 61 }} \n                      roundedCircle\n                    />\n                  </Suspense>\n                </div>\n                <div>\n                  <span style={{ fontSize: \"12px\" }}>\n                    <Link \n                      to={{\n                        pathname:`/lab-tests/labs/${slugify(lab.labName)}`,\n                        search: `?search_type=labs&search_value=${lab._id}`\n                      }}\n                      className=\"text-dark\"\n                    >\n                      {labName}{\" \"}\n                    </Link>\n                    <br/>\n                    <div title=\"lab ratings\" className=\"rati_icon\"><IoMdStar size=\"14px\" className=\"ml-1\"/>{averageRating}</div>\n                    <div>\n                      <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n                        <span title=\"total reviews\">{certificatesAvailable ? `(${totalReviews}) | `: `(${lab.totalReviews})`}</span>\n                        <span title=\"certification\">{`${certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                      </span>\n                    </div>\n                  </span>\n                </div>\n              </Row>\n              <div className=\"bt_list\">\n                <Link\n                  to={{\n                    pathname:`/lab-tests/${type}s/${slugify(name)}`,\n                    search: `?search_type=${type}&search_value=${_id}`\n                  }}\n                  className=\"atc\"\n                >\n                  View Details\n                </Link>\n                {\n                  isInCart === 1 ? (\n                    <Link \n                      to={{ \n                        pathname: \"/cart\",\n                      }}\n                      className=\"btn btn-primary\">\n                      <FaShoppingCart className=\"mr-1\" />\n                      Go To Cart\n                    </Link>\n                  ): (\n                    <Button \n                      // className=\"atc\"\n                      onClick={(e) => addItem(e, _id, type, lab._id, listing_price, name)}\n                      disabled={disabled === _id}\n                    >\n                      <FaCartPlus className=\"mr-1\" />\n                      Add To Cart\n                    </Button>\n                  )\n                }\n              </div>\n            </div>\n          </Card.Body>\n        </Card>\n      </Col>\n    )\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(onlyOnce) {\n          resetComponentStore();\n          setOnce(false);\n        }\n        if(subscribe && value) {\n          getTestsByHabit(value, listParams);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getTestsByHabit, listParams, value, city, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  data) {\n        let testsList = [];\n        if (data.length > 0) {\n          if(!isAuthenticated && cart && cart.products && cart.products.length > - 1) {\n            data.map((item) => {\n              const foundItem = cart.products.find((product) => product._id === item._id && cart.lab === item.lab._id);\n              item.isInCart = foundItem ? 1: 0;\n              testsList.push(item);\n            })\n          }\n          else testsList = [...tests, ...data];\n        }\n        else if(data.length === 0 && page > 0) testsList = tests;\n        setHabits((habsData) => ({ ...habsData, tests: testsList }));\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data])\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb text-justify\">\n      <Container >\n      { Object.keys(habitData).length > 0 && \n      <div>\n        {/* <h3 className={\"font-weight-bold\"}>{habitData.name}</h3> */}\n        {\n          HtmlParser(\n            habitData.description.slice(0,habitData.description.search(/{{products}}/))\n          )\n        }\n      </div>\n      }\n      <div className=\"pl-3 pr-3\">\n        <InfiniteScroll\n          dataLength={tests.length}\n          next={loadNextData}\n          hasMore={tests.length == count ? false : hasMore}\n          loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n        >\n          <Row>\n            { tests.map(item => ItemCard(item)) }\n          </Row>\n        </InfiniteScroll>\n      </div>\n      { Object.keys(habitData).length > 0 && \n      <div>\n        {\n          HtmlParser(\n            habitData.description.slice(habitData.description.search(/{{products}}/),\n              habitData.description.length).replace(/{{products}}/g,\"\")\n          )\n        }\n      </div>\n      }\n      </Container>\n    </section>\n  )\n}\n\nHabitDetails.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  testList: PropTypes.object.isRequired,\n  habitData: PropTypes.object.isRequired,\n  getTestsByHabit: PropTypes.func.isRequired,\n  getHabitDescription: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.habits.loadingTests,\n  loadingList: state.habits.loadingTestsList,\n  testList: state.habits.testList,\n  habitData: state.habits.habitData,\n  sortingParams: state.habits.sortingParams,\n  city: state.citySearch.currentCity,\n  cart: state.cart.cartDetails,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n  addToCart,\n  getTestsByHabit,\n  getHabitDescription,\n  getGuestUserCart,\n  resetComponentStore,\n  createGuestCart,\n})(withRouter(HabitDetails));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Packages/List.js",["1208","1209","1210","1211"],"import React, { useEffect, useState, Suspense } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, Image, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { getAllPackages, resetComponentStore } from \"actions/customer/packages\";\nimport Spinner from \"views/Spinner\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { FaCartPlus, FaShoppingCart, FaEye } from \"react-icons/fa\";\nimport { IoMdStar } from \"react-icons/io\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport slugify from \"react-slugify\";\nimport { addToCart, createGuestCart } from \"actions/cart/cart\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\n\nconst List = ({\n  addToCart,\n  createGuestCart,\n  isAuthenticated,\n  getAllPackages,\n  testList: { data, count, page },\n  loading,\n  cart,\n  loadingList,\n  sortingParams,\n  resetComponentStore,\n  history,\n  city,\n}) => {\n  const initialSortingParams = {\n    limit: 6,\n    page: 1,\n    orderBy: 'test.name',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n  const [packagesData, setPackages] = useState({\n    packs: [],\n    disabled: '',\n  });\n\n  const {\n    packs,\n    disabled,\n  } = packagesData;\n\n  const loadNextData = () => {\n    const pageNum = parseInt(page);\n    if(packs.length >= count) return setMore(false);\n    if(loading) return;\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n\n\n  // const addItem = (e, item_id, item_type, lab, pack, changeLab) => {\n  //   e.preventDefault();\n  //   // if(!isAuthenticated) history.push(\"/login\");\n  //   let items = packs;\n  //   const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n  //   if(changeLab) productData.changeLab = changeLab;\n  //   setPackages((data) => ({...data, disabled: lab }));\n  //   if (isAuthenticated) {\n  //     addToCart(productData).then((res) => {\n  //       if(!res) {\n  //         console.log(\"product not added\");\n  //       } else {\n  //         items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n  //       }\n  //       setPackages((data) => ({ ...data, packs: items, disabled: '' }));\n  //     });  \n  //   } else {\n  //     createGuestCart(productData, pack)\n  //   }\n  // }\n\n  const addItem = (e, item_id, item_type, lab, listing_price, name, changeLab) => {\n    e.preventDefault();\n    // if(!isAuthenticated) history.push(\"/login\");\n    const pack = {\n      price: listing_price,\n      name: name\n    }\n    let items = packs;\n    const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n    if(changeLab) productData.changeLab = changeLab;\n    setPackages((data) => ({ ...data, disabled: item_id }));\n    if (isAuthenticated) {\n      addToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n        }\n        setPackages({ packages: items, disabled: '' });\n      });  \n    } else {\n      const guestCart = createGuestCart({ \n        ...productData,\n        ...pack\n      });\n      if (guestCart) {\n        items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n      }\n      else {\n        console.log(\"product not added\");\n      }\n      setPackages({ packages: items, disabled: '' });\n    }\n  }\n\n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getAllPackages(listParams);\n  }, [getAllPackages, city, listParams, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  data) {\n        let testsList = [];\n        if (data.length > 0) {\n          if(!isAuthenticated && cart && cart.products && cart.products.length > - 1) {\n            data.map((item) => {\n              const foundItem = cart.products.find((product) => product._id === item._id && cart.lab === item.lab._id);\n              item.isInCart = foundItem ? 1: 0;\n              testsList.push(item);\n            })\n          }\n          else testsList = [...packs, ...data];\n        }\n        else if(data.length === 0 && page > 0) testsList = data;\n        setPackages((packsData) => ({ ...packsData, packs: testsList }));\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data]);\n\n   return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\">\n      <InfiniteScroll\n        dataLength={packs.length}\n        next={loadNextData}\n        hasMore={packs.length == count ? false : hasMore}\n        loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n      >\n        <Container>\n          <Row>\n          {\n            packs.map((row) => {\n              // const { lab, name, price, testsIncluded, isInCart, _id } = row;\n              const { lab, name, listing_price, MRP, discount, testsIncluded, isInCart, _id } = row;\n              const { labName, labImage, averageRating, totalReviews, certificates } = lab;\n              const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n              const listing_price_currency = CURRENCY_SYMBOL[listing_price.currency];\n              const MRP_currency = CURRENCY_SYMBOL[MRP.currency];\n              const certificatesAvailable = !!certificates && certificates.length > 0;\n              \n              return (\n                <Col md={6} lg={4} className=\"mb-3\">\n                  <Card className=\"mb-0 bg-transparent\">\n                    <Card.Body className=\"mH-225 bg-white box-shadow\">\n                      <div className=\"item-card2\">\n                        <Link \n                          to={{\n                            pathname:`/lab-tests/packages/${slugify(name)}`,\n                            search: `?search_type=package&search_value=${_id}`\n                          }}\n                          className=\"text-dark\"\n                        >\n                          <h4 className=\"font-weight-bold mt-1 mb-2\">\n                            {name}\n                          </h4>\n                        </Link>\n                        <small className=\"text-muted\">{`Include ${testsIncluded} tests`}</small>\n                        <p className=\"text-muted fs-13 mb-1 mt-2\">\n                          Starting From \n                          <span className=\"mr-4\">\n                            <b>{listing_price_currency}{listing_price.amount} <del><small>{MRP_currency}{MRP.amount}</small></del></b>\n                          </span>\n                        </p>\n                        { discount && discount > 0 ?\n                        <> \n                          <span>\n                            <sup>\n                              <h5>{`Flat ${discount}% Off`}\n                              </h5>\n                            </sup>\n                          </span>\n                          \n                        </>\n                        :null\n                        }\n                        <Row style={{ marginLeft: 0, marginTop: 15 }}>\n                          <div style={{ \n                              height: 65, \n                              width: 65, \n                              padding: 4, \n                              boxShadow: \"2px 1px 4px rgba(0,0,0, 0.3)\",\n                              marginRight: 8 \n                            }}\n                          >\n                            <Suspense>\n                              <Image \n                                src={labImageURL}\n                                alt={labName} \n                                style={{ maxHeight: 61, maxWidth: 61 }} \n                                roundedCircle\n                              />\n                            </Suspense>\n                          </div>\n                          <div>\n                            <span style={{ fontSize: \"12px\" }}>\n                              <u>\n                                <Link \n                                  to={{\n                                    pathname:`/lab-tests/labs/${slugify(lab.labName)}`,\n                                    search: `?search_type=labs&search_value=${lab._id}`\n                                  }}\n                                  className=\"text-dark\"\n                                >\n                                  {labName}{\" \"}\n                                </Link>\n                              </u><br/>\n                              <div title=\"lab ratings\" className=\"rati_icon\"><IoMdStar size=\"14px\" className=\"ml-1\"/>{averageRating}</div>\n                              <div>\n                                <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n                                  <span title=\"total reviews\">{certificatesAvailable ? `(${totalReviews}) | `: `(${lab.totalReviews})`}</span>\n                                  <span title=\"certification\">{`${certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                                </span>\n                              </div>\n                            </span>\n                          </div>\n                        </Row>\n                        <div className=\"bt_list\">\n                          <Link \n                            to={{\n                              pathname:`/lab-tests/packages/${slugify(name)}`,\n                              search: `?search_type=package&search_value=${_id}`\n                            }}\n                            className=\"fs-12\"\n                          >\n                            <FaEye className=\"mr-1\" />\n                            View Details\n                          </Link>\n                          {\n                            isInCart === 1 ? (\n                              <Link \n                                to={{ \n                                  pathname: \"/cart\",\n                                }}\n                                className=\"btn btn-primary\"\n                              >\n                                <FaShoppingCart className=\"mr-1\" />\n                                Go To Cart\n                              </Link>\n                            ): (\n                              <Button \n                                onClick={(e) => addItem(e, _id, \"package\", lab._id, discount, name)}\n                                disabled={disabled === _id}\n                              >\n                                <FaCartPlus className=\"mr-1\" />\n                                Add To Cart\n                              </Button>\n                            )\n                          }\n                        </div>\n                      </div>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              )\n            })\n          }\n          </Row>\n        </Container>\n      </InfiniteScroll>\n    </section>\n  )\n}\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  testList: PropTypes.object.isRequired,\n  getAllPackages: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.packages.loadingTests,\n  loadingList: state.packages.loadingTestsList,\n  testList: state.packages.testList,\n  sortingParams: state.packages.sortingParams,\n  city: state.citySearch.currentCity,\n  cart: state.cart.cartDetails,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n  addToCart,\n  getAllPackages,\n  resetComponentStore,\n  createGuestCart,\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Tests/Details.js",["1212","1213","1214","1215","1216","1217"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, Tab, Nav, ListGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter, useLocation } from \"react-router-dom\";\nimport { getTestByID, resetComponentStore } from \"actions/customer/tests\";\nimport { addToCart, createGuestCart, getGuestUserCart } from \"actions/cart/cart\";\nimport { getTestBasedLabsList } from \"actions/customer/labs\";\nimport { getLocalityList } from \"actions/customer/locality\"\nimport Spinner from \"views/Spinner\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport HtmlParser from \"utils/HtmlParser\";\nimport LabList from 'utils/LabList';\nimport { LocalityFilter, RatingFilter, PriceFilter } from 'utils/Filters'\nimport ReactTooltip from \"react-tooltip\";\n\nconst groupTest = {\n  \"0\": \"Test\",\n  \"1\": \"Group\",\n  \"2\": \"Package\",\n};\n\nconst Details = ({\n  addToCart,\n  createGuestCart,\n  getGuestUserCart,\n  getTestByID,\n  getTestBasedLabsList,\n  getLocalityList,\n  labList: { data, count, page },\n  cart,\n  loadingLabs,\n  currentTest,\n  loading,\n  labParams,\n  currentCity,\n  resetComponentStore,\n  isAuthenticated,\n  history,\n}) => {\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'listing_price.amount',\n    ascending: 'asc',\n    query: \"\",\n    filters: []\n  };\n\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [defaultLocality, setDefaultLocality] = useState([]);\n  const [testData, setData] = useState({\n    totalTests: 0,\n    testsIncluded: [],\n    specialInstructions: '',\n    _id: '',\n    name: '',\n    // currency: '',\n    listing_price: '',\n    MRP: '',\n    couponDiscount : {},\n    discount: '',\n    description: '',\n    city: {},\n    type: 'Test'\n  });\n\n  const {\n    totalTests,\n    testsIncluded,\n    specialInstructions,\n    _id,\n    name,\n    // currency,\n    listing_price,\n    MRP,\n    couponDiscount,\n    discount,\n    description,\n    type,\n    city,\n  } = testData;\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const value = query.get(\"search_value\");\n\n  const handleSorting = (e) => {\n    const { value } = e.target;\n    const params = {\n      ...labParams,\n      orderBy: 'listing_price.amount',\n      ascending: 'desc',\n      page: 1,\n      limit: 10,\n    };\n    switch(value) {\n      case \"0\": params.orderBy = \"listing_price.amount\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n      case \"1\": params.orderBy = \"averageRating\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n      default: break;\n    }\n    setListParams(params);\n  }\n\n  const onFilterChange = (name, value, newParams) => {\n    setListParams((params) => ({...params, ...newParams}));\n  };\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     getLocalityList(currentCity.value, { \n  //       limit: 4,\n  //       page: 1,\n  //       orderBy: 'city',\n  //       ascending: 'desc',\n  //       query: \"\",\n  //       filters: []\n  //      }).then((res) => {\n  //       if (res && res.status) {\n  //         const { data } = res.response[0];\n  //         const result = data.map(list => ({\n  //           value: list._id,\n  //           label: list.locality_name,\n  //         }));\n  //         setDefaultLocality([...result])\n  //         return result;\n  //       }\n  //     })\n  //     setOnce(false);\n  //   }\n  //   getTestByID(value, listParams);\n  // }, [getTestByID, currentCity, value, resetComponentStore, setOnce, getLocalityList]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n    if(onlyOnce) {\n      resetComponentStore();\n      if(subscribe && currentCity) \n      getLocalityList(currentCity.value, { \n        limit: 4,\n        page: 1,\n        orderBy: 'city',\n        ascending: 'desc',\n        query: \"\",\n        filters: []\n       }).then((res) => {\n        if (res && res.status) {\n          const { data } = res.response[0];\n          const result = data.map(list => ({\n            value: list._id,\n            label: list.locality_name,\n          }));\n          setDefaultLocality([...result])\n          return result;\n        }\n      })\n      setOnce(false);\n    }\n    if(subscribe && value) \n    getTestByID(value, listParams);\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [getTestByID, currentCity, value, resetComponentStore, setOnce, getLocalityList]);\n\n  // useMemo(() => {\n  //   if(value && type) getTestBasedLabsList(value, type.toLowerCase(), listParams);\n  // }, [getTestBasedLabsList, listParams]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && value && type) getTestBasedLabsList(value, type.toLowerCase(), listParams);\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [getTestBasedLabsList, listParams]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && currentTest) {\n        const { testsIncluded, specialInstructions, listing_price, MRP, couponDiscount, discount, name, description, _id, isGroupTest, city} = currentTest;\n        const type = groupTest[isGroupTest.toString()];\n        const totalTests = testsIncluded.length;\n        setData((test) => ({\n          ...test,\n          totalTests,\n          specialInstructions,\n          type,\n          name,\n          _id,\n          description,\n          listing_price,\n          testsIncluded,\n          MRP,\n          discount,\n          couponDiscount,\n          city,\n          // currency: CURRENCY_SYMBOL[currency],\n        }))\n      }\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [currentTest]);\n  const discountLabel = (\n    `\n    <div class=\"container\" style=\"box-shadow: 1px 1px 1px 1px grey; padding:10px; width : 270px; background-color: white;\">\n      <div class=\"row\" style=\"display: flex; width: 260px;\">\n        <h6 style=\"margin:10px;\">Price details</h6>\n        <div class=\"col-8\">\n          <span>\n            Price(exclusive taxes)\n          </span>\n        </div>\n        <div class=\"col text-left\">\n          <span>\n            ${CURRENCY_SYMBOL[MRP.currency]} ${MRP.amount}\n          </span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"display: flex; width: 260px;\">\n        <div class=\"col-8\">\n          <span>\n            Selling Price\n          </span>\n        </div>\n        <div class=\"col text-left\">\n          <span>\n            ${CURRENCY_SYMBOL[listing_price.currency]} ${listing_price.amount}\n          </span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"border-top: 1px dotted black; display: flex; width: 240px; margin-top : 8px; margin : 8px; margin-left : 2px;\">\n        <div class=\"col text-center\">\n          <span >\n            You Save ${CURRENCY_SYMBOL[listing_price.currency]} ${MRP.amount-listing_price.amount} (${discount}%)\n          </span>\n        </div>\n      </div>\n    </div>`\n  );\n\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Row>\n          <Col xl={3} lg={12}>\n            <Card>\n              <div>\n                <Card.Header className=\"justify-content-center\">\n                  <h3 className=\"card-title\">Lab Filters</h3>\n                </Card.Header>\n              </div>\n              <LocalityFilter\n                type=\"checkbox\"\n                filter=\"locality=localityServings\"\n                filterType=\"String\"\n                filterName=\"Location\"\n                filterParams={listParams}\n                onFilterChange={onFilterChange}\n                loadFilterMethod={getLocalityList}\n                loadFilterFollowedBy={currentCity.value}\n                loadFilterName=\"locality_name\"\n                loadFilterType=\"String\"\n                selectFilterOptions={defaultLocality}\n              />\n              <PriceFilter \n                type=\"range\"\n                filter=\"price=listing_price.amount\"\n                filterType=\"object\"\n                filterName=\"Price (INR)\"\n                filterParams={listParams}\n                onFilterChange={onFilterChange}\n                rangeValue={[0, 10000, 50]}\n                rangeType=\"price\"\n                marks={[{\n                  value: 0,\n                  label: CURRENCY_SYMBOL[listing_price.currency] + 0,\n                },\n                {\n                  value: 10000,\n                  label: CURRENCY_SYMBOL[listing_price.currency] + 10000,\n                }]}\n              />\n              <RatingFilter\n                type=\"textSelect\"\n                filter=\"rating=averageRating\"\n                filterType=\"Number\"\n                filterName=\"Rating\"\n                filterParams={listParams}\n                onFilterChange={onFilterChange}\n                selectFilterOptions={[{\n                  value: 4,\n                  label: \"4 Star and Higher\",\n                },{\n                  value: 3,\n                  label: \"3 Star and Higher\",\n                },{\n                  value: 2,\n                  label: \"2 Star and Higher\",\n                }, {\n                  value: 1,\n                  label: \"1 Star and Higher\",\n                }]}\n              />\n            </Card>\n          </Col>\n          <Col xl={9} lg={12}>\n            <Tab.Container \n              defaultActiveKey=\"overview\"\n            >\n              <Card>\n                <Card.Body className=\"item-user\">\n                  <div className=\"profile-pic mb-0\">\n                    <div className=\"d-md-flex\">\n                      <div className=\"ml-4\">\n                        <span className=\"text-dark\">\n                          <h4 className=\"mt-3 mb-1 font-weight-bold\">\n                            {name}\n                          </h4>\n                        </span>\n                        { totalTests ?\n                          <>\n                            <span className=\"text-gray\">\n                              {`Includes ${totalTests} Tests`}\n                            </span>\n                            <br/>\n                          </>: null }\n                        { discount && discount > 0 ? \n                        <div className=\"spac\"\n                                  data-for=\"helper\"\n                                  // data-type=\"light\"\n                                  data-tip={discountLabel}\n                                  data-html={true}\n                                  data-iscapture=\"true\"\n                                  data-text-color=\"black\"\n                                  data-background-color=\"#fff\"\n                          >\n                            {`Flat ${discount}% Off ${couponDiscount && couponDiscount.value ? (\"+ \" + (couponDiscount.in != 'per' ? (couponDiscount.currency + \" \") : \"\") + (couponDiscount.value) +  (couponDiscount.in == 'per' ? \"%\" : \"\") + \" Off\") : \"\"}`}\n                            <ReactTooltip\n                              className=\"tooltip\"\n                              id=\"helper\"\n                              place=\"right\"\n                              effect=\"float\"\n                              multiline={true}\n                            />\n                        </div>\n                        : null\n                        }\n                        <div className=\"offer_to\">\n                          Starting From {CURRENCY_SYMBOL[listing_price.currency]} {listing_price.amount}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </Card.Body>\n                <Card.Footer>\n                  <div className=\"wideget-user-tab\">\n                    <div className=\"tab-menu-heading\">\n                      <div className=\"tabs-menu1\">\n                        <Nav as=\"ul\">\n                          <Nav.Item as=\"li\">\n                            <Nav.Link \n                              eventKey=\"overview\"\n                              data-toggle=\"tab\"\n                              className=\"bg-transparent\"\n                            >Overview</Nav.Link>\n                          </Nav.Item>\n                          { !!totalTests && \n                            <Nav.Item as=\"li\">\n                              <Nav.Link \n                                eventKey=\"tests-included\"\n                                data-toggle=\"tab\"\n                                className=\"bg-transparent\"\n                              >Tests Included</Nav.Link>\n                            </Nav.Item> \n                          }\n                        </Nav>\n                      </div>\n                    </div>\n                  </div>\n                </Card.Footer>\n              </Card>\n              <Card>\n                <Card.Body>\n                  <div className=\"border-0\">\n                    <Tab.Content \n                      className=\"mypans\"\n                    >\n                      <Tab.Pane\n                        eventKey=\"overview\"\n                      >\n                        <div className=\"mb-4 ml-3 mr-4\">\n                          { HtmlParser(description) }\n                        </div>\n                      </Tab.Pane>\n                      <Tab.Pane\n                        eventKey=\"tests-included\"\n                      >\n                        <div className=\"mb-4\">\n                          <ListGroup>  \n                          {\n                            testsIncluded.map(item => {\n                              return (\n                                <ListGroup.Item key={`test_${item._id}`} className=\"panel-title p-2 mb-2\">\n                                  <span>{item.name}</span>\n                                </ListGroup.Item>\n                              )\n                            })\n                          }\n                          </ListGroup>\n                        </div>\n                      </Tab.Pane>\n                    </Tab.Content>\n                  </div>\n                </Card.Body>\n              </Card>\n            </Tab.Container>\n            { \n              !!specialInstructions && (\n              <Card className=\"text-expm\" style={{ backgroundColor: \"#ffcb89\", padding: 24 }}>\n                <Card.Text className=\"ml-3 mr-4 font-weight-semibold\">\n                  <i>{ specialInstructions }</i>\n                </Card.Text>\n              </Card>)\n            }\n            <Card className=\"text-expm\">\n              <Card.Header>\n                <Card.Title>Tests Provided By</Card.Title>\n              </Card.Header>\n              <Card.Body>\n                <LabList \n                  test_id={_id}\n                  test_type={type}\n                  labs={data} \n                  city={city} \n                  cart={cart}\n                  totalResults={count} \n                  pageLoaded={parseInt(page)}\n                  sortingParams={labParams} \n                  loadMoreCallback={getTestBasedLabsList}\n                  loading={loadingLabs}\n                  addToCart={addToCart}\n                  createGuestCart={createGuestCart}\n                  getGuestUserCart={getGuestUserCart}\n                  isLoggedIn={isAuthenticated}\n                  testData={testData}\n                  history={history}\n                />\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\nDetails.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getTestByID: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.tests.loadingTests,\n  currentTest: state.tests.currentTest,\n  loadingLabs: state.labs.loadingLabsList,\n  labList: state.labs.labList,\n  labParams: state.labs.sortingParams,\n  sortingParams: state.tests.sortingParams,\n  currentCity: state.citySearch.currentCity,\n  cart: state.cart.cartDetails,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n  addToCart,\n  createGuestCart,\n  getGuestUserCart,\n  getTestByID,\n  getTestBasedLabsList,\n  getLocalityList,\n  resetComponentStore\n})(withRouter(Details));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/firebase.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Packages/Details.js",["1218","1219","1220","1221","1222","1223","1224"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\"\nimport { Row, Col, Container, Card, Tab, Nav, Badge, ListGroup } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport { withRouter, useLocation } from \"react-router-dom\"\nimport { getPackageByID, resetComponentStore } from \"actions/customer/packages\"\nimport { addToCart, createGuestCart, getGuestUserCart } from \"actions/cart/cart\"\nimport { getLocalityList } from \"actions/customer/locality\"\nimport { getTestBasedLabsList } from \"actions/customer/labs\"\nimport Spinner from \"views/Spinner\"\nimport { CURRENCY_SYMBOL } from \"constants/index\"\nimport HtmlParser from \"utils/HtmlParser\"\nimport Collapsible from 'react-collapsible'\nimport LabList from 'utils/LabList'\nimport { LocalityFilter, RatingFilter, PriceFilter } from 'utils/Filters';\nimport ReactTooltip from \"react-tooltip\";\n\nconst groupTest = {\n  \"0\": \"Test\",\n  \"1\": \"Group\",\n  \"2\": \"Package\",\n};\n\nconst Details = ({\n  addToCart,\n  createGuestCart,\n  getGuestUserCart,\n  getPackageByID,\n  getTestBasedLabsList,\n  getLocalityList,\n  labList: { data, count, page },\n  loadingLabs,\n  currentTest,\n  isAuthenticated,\n  cart,\n  loading,\n  sortingParams,\n  labParams,\n  currentCity,\n  resetComponentStore,\n  history,\n}) => {\n\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'listing_price.amount',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n\n  const [collapse, setCollapse] = useState({ id: null, active: false });\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [defaultLocality, setDefaultLocality] = useState([]);\n  const [testData, setData] = useState({\n    totalTests: 0,\n    testsIncluded: [],\n    groupsIncluded: [],\n    specialInstructions: [],\n    _id: '',\n    name: '',\n    // currency: '',\n    listing_price: '',\n    MRP: '',\n    couponDiscount : {},\n    discount: '',\n    description: '',\n    city: {},\n    type: 'package'\n  });\n\n  const {\n    totalTests,\n    testsIncluded,\n    groupsIncluded,\n    specialInstructions,\n    _id,\n    name,\n    // currency,\n    listing_price,\n    MRP,\n    couponDiscount,\n    discount,\n    description,\n    type,\n    city,\n  } = testData;\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const value = query.get(\"search_value\");\n\n  const handleSorting = (e) => {\n    const { value } = e.target;\n    const params = {\n      ...labParams,\n      orderBy: 'listing_price.amount',\n      ascending: 'desc',\n      page: 1,\n      limit: 10,\n    };\n    switch(value) {\n      case \"0\": params.orderBy = \"listing_price.amount\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n      case \"1\": params.orderBy = \"averageRating\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n      default: break;\n    }\n    setListParams(params);\n  }\n\n  const onFilterChange = (name, value, newParams) => {\n    setListParams((params) => ({...params, ...newParams}));\n  };\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     getLocalityList(currentCity.value, { \n  //       limit: 4,\n  //       page: 1,\n  //       orderBy: 'city',\n  //       ascending: 'desc',\n  //       query: \"\",\n  //       filters: []\n  //      }).then((res) => {\n  //       if (res && res.status) {\n  //         const { data } = res.response[0];\n  //         const result = data.map(list => ({\n  //           value: list._id,\n  //           label: list.locality_name,\n  //         }));\n  //         setDefaultLocality([...result])\n  //         return result;\n  //       }\n  //     })\n  //     setOnce(false);\n  //   }\n  //   getPackageByID(value, initialSortingParams);\n  // }, [getPackageByID, value, currentCity, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n    if(onlyOnce) {\n      resetComponentStore();\n      if(subscribe && currentCity)\n      getLocalityList(currentCity.value, { \n        limit: 4,\n        page: 1,\n        orderBy: 'city',\n        ascending: 'desc',\n        query: \"\",\n        filters: []\n       }).then((res) => {\n        if (res && res.status) {\n          const { data } = res.response[0];\n          const result = data.map(list => ({\n            value: list._id,\n            label: list.locality_name,\n          }));\n          setDefaultLocality([...result])\n          return result;\n        }\n      })\n      setOnce(false);\n    }\n    if(subscribe && value)\n    getPackageByID(value, initialSortingParams);\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [getPackageByID, value, currentCity, resetComponentStore, setOnce]);\n\n  // useMemo(() => {\n  //   if(value && type) getTestBasedLabsList(value, type, listParams);\n  // }, [getTestBasedLabsList, listParams]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && value && type) getTestBasedLabsList(value, type, listParams);\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [getTestBasedLabsList, listParams]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && currentTest) {\n        const { testsIncluded, listing_price, MRP,couponDiscount, discount, groupsIncluded, name, description, _id, isGroupTest, city} = currentTest;\n        const type = groupTest[isGroupTest.toString()];\n        const totalTests = groupsIncluded.reduce((acc, group) => group.testsIncluded.length + acc, testsIncluded.length);\n        let specialInstructions = [];\n        testsIncluded.forEach(element => {\n          if(element.specialInstructions) {\n            console.log(\"instruction found\");\n            specialInstructions.push(element.specialInstructions);\n          }\n        });\n        groupsIncluded.forEach(element => {\n          if(element.specialInstructions) { \n            console.log(\"instruction found\");\n            specialInstructions.push(element.specialInstructions);\n          }\n        });\n        specialInstructions = new Set(specialInstructions);\n        setData((test) => ({\n          ...test,\n          testsIncluded,\n          groupsIncluded,\n          specialInstructions,\n          totalTests,\n          type,\n          name,\n          _id,\n          description,\n          listing_price,\n          MRP,\n          couponDiscount,\n          discount,\n          city,\n          // currency: CURRENCY_SYMBOL[currency],\n        }))\n      }\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [currentTest]);\n\n  const discountLabel = (\n    `\n    <div class=\"container\" style=\"box-shadow: 1px 1px 1px 1px grey; padding:10px; width : 270px; background-color: white;\">\n      <div class=\"row\" style=\"display: flex; width: 260px;\">\n        <div class=\"col-8\">\n          <span>\n            Price(exclusive taxes)\n          </span>\n        </div>\n        <div class=\"col text-left\">\n          <span>\n            ${CURRENCY_SYMBOL[MRP.currency]} ${MRP.amount}\n          </span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"display: flex; width: 260px;\">\n        <div class=\"col-8\">\n          <span>\n            Selling Price\n          </span>\n        </div>\n        <div class=\"col text-left\">\n          <span>\n            ${CURRENCY_SYMBOL[listing_price.currency]} ${listing_price.amount}\n          </span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"border-top: 1px dotted black; display: flex; width: 240px; margin-top : 8px; margin : 8px; margin-left : 2px;\">\n        <div class=\"col text-center\">\n          <span >\n            You Save ${CURRENCY_SYMBOL[listing_price.currency]} ${MRP.amount-listing_price.amount} (${discount}%)\n          </span>\n        </div>\n      </div>\n    </div>`\n  );\n\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Row>\n          <Col xl={3} lg={12}>\n            <Card>\n              <div>\n                <Card.Header className=\"justify-content-center\">\n                  <h3 className=\"card-title\"> Lab Filters</h3>\n                </Card.Header>\n              </div>\n              <LocalityFilter\n                type=\"checkbox\"\n                filter=\"locality=localityServings\"\n                filterType=\"String\"\n                filterName=\"Location Serving\"\n                filterParams={listParams}\n                onFilterChange={onFilterChange}\n                loadFilterMethod={getLocalityList}\n                loadFilterFollowedBy={currentCity.value}\n                loadFilterName=\"locality_name\"\n                loadFilterType=\"String\"\n                selectFilterOptions={defaultLocality}\n              />\n              <PriceFilter \n                type=\"range\"\n                filter=\"price=listing_price.amount\"\n                filterType=\"object\"\n                filterName=\"Price (INR)\"\n                filterParams={listParams}\n                onFilterChange={onFilterChange}\n                rangeValue={[0, 10000, 50]}\n                rangeType=\"price\"\n                marks={[{\n                  value: 0,\n                  label: CURRENCY_SYMBOL[listing_price.currency] + 0,\n                },\n                {\n                  value: 10000,\n                  label: CURRENCY_SYMBOL[listing_price.currency] + 10000,\n                }]}\n              />\n              <RatingFilter\n                type=\"textSelect\"\n                filter=\"rating=averageRating\"\n                filterType=\"Number\"\n                filterName=\"Rating\"\n                filterParams={listParams}\n                onFilterChange={onFilterChange}\n                selectFilterOptions={[{\n                  value: 4,\n                  label: \"4 Star and Higher\",\n                },{\n                  value: 3,\n                  label: \"3 Star and Higher\",\n                },{\n                  value: 2,\n                  label: \"2 Star and Higher\",\n                }, {\n                  value: 1,\n                  label: \"1 Star and Higher\",\n                }]}\n              />\n            </Card>\n          </Col>\n          <Col xl={9} lg={12}>\n            <Tab.Container \n              defaultActiveKey=\"overview\"\n            >\n              <Card>\n                <Card.Body className=\"item-user\">\n                  <div className=\"profile-pic mb-0\">\n                    <div className=\"d-md-flex\">\n                      <div className=\"ml-4\">\n                        <span className=\"text-dark\">\n                          <h4 className=\"mt-3 mb-1 font-weight-bold\">\n                            {name}\n                          </h4>\n                        </span>\n                        <span className=\"text-gray\">Includes {totalTests} Tests</span><br/>\n                        \n                        { discount && discount > 0 ? \n                        <div className=\"spac\"\n                                  data-for=\"helper\"\n                                  // data-type=\"light\"\n                                  data-tip={discountLabel}\n                                  data-html={true}\n                                  data-iscapture=\"true\"\n                                  data-text-color=\"black\"\n                                  data-background-color=\"#fff\"\n                        >\n                          {`Flat ${discount}% Off ${couponDiscount && couponDiscount.value ? (\"+ \" + (couponDiscount.in != 'per' ? (couponDiscount.currency + \" \") : \"\") + (couponDiscount.value) +  (couponDiscount.in == 'per' ? \"%\" : \"\") + \" Off\") : \"\"}`}\n\n                            <ReactTooltip\n                              className=\"tooltip\"\n                              id=\"helper\"\n                              place=\"right\"\n                              effect=\"float\"\n                              multiline={true}\n                            />\n                        </div>\n                        : null\n                        }\n                        <div className=\"offer_to\">\n                          Starting From {CURRENCY_SYMBOL[listing_price.currency]} {listing_price.amount}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </Card.Body>\n                <Card.Footer>\n                  <div className=\"wideget-user-tab\">\n                    <div className=\"tab-menu-heading\">\n                      <div className=\"tabs-menu1\">\n                        <Nav as=\"ul\">\n                          <Nav.Item as=\"li\">\n                            <Nav.Link \n                              eventKey=\"overview\"\n                              data-toggle=\"tab\"\n                              className=\"bg-transparent\"\n                            >Overview</Nav.Link>\n                          </Nav.Item>\n                          <Nav.Item as=\"li\">\n                            <Nav.Link \n                              eventKey=\"tests-included\"\n                              data-toggle=\"tab\"\n                              className=\"bg-transparent\"\n                            >Test Includes</Nav.Link>\n                          </Nav.Item>\n                        </Nav>\n                      </div>\n                    </div>\n                  </div>\n                </Card.Footer>\n              </Card>\n              <Card>\n                <Card.Body>\n                  <div className=\"border-0\">\n                    <Tab.Content \n                      className=\"mypans\"\n                    >\n                      <Tab.Pane\n                        eventKey=\"overview\"\n                      >\n                        <div className=\"mb-4\">\n                          { HtmlParser(description) }\n                        </div>\n                      </Tab.Pane>\n                      <Tab.Pane\n                        eventKey=\"tests-included\"\n                      >\n                        <div className=\"mb-4\">\n                          <ListGroup>  \n                          {\n                            testsIncluded.map(item => {\n                              return (\n                                <ListGroup.Item key={`test_${item._id}`} className=\"panel-title p-2 mb-2\">\n                                  <span>{item.name}</span>\n                                </ListGroup.Item>\n                              )\n                            })\n                          }\n                          </ListGroup>\n                          {\n                            groupsIncluded.map(item => {\n                              return (\n                                <Collapsible\n                                  key={`group_${item._id}`}\n                                  tabIndex={2}\n                                  className=\"panel panel-default mb-2\"\n                                  openedClassName=\"panel panel-default mb-2\"\n                                  trigger={\n                                    <h4 className=\"panel-title p-2\">\n                                      <span>{ item.name }\n                                        <Badge className=\"badge-pill badge-secondary ml-2\">{item.testsIncluded.length}</Badge>\n                                      </span>\n                                    </h4>\n                                  }\n                                  triggerOpenedClassName=\"panel-heading\"\n                                  triggerClassName=\"panel-heading\"\n                                  triggerTagName=\"div\"\n                                  contentOuterClassName=\"panel-collapse in collapse show\"\n                                  contentInnerClassName=\"panel-body\"\n                                >\n                                  { item.testsIncluded.map((sub_item) => <li key={ sub_item._id } ><span>{ sub_item.name }</span></li>) }\n                                </Collapsible>\n                              )\n                            })\n                          }\n                        </div>\n                      </Tab.Pane>\n                    </Tab.Content>\n                  </div>\n                </Card.Body>\n              </Card>\n            </Tab.Container>\n            { \n              specialInstructions.size > 0 && (\n              <Card className=\"text-expm\" style={{ backgroundColor: \"#ffcb89\", padding: 24 }}>\n                <Card.Text className=\"ml-3 mr-4 font-weight-semibold\">\n                  <i>\n                    { specialInstructions.map((instruction,index) => (<li key={\"instruction_\"+index}>{ instruction }<br/></li>)) }\n                  </i>\n                </Card.Text>\n              </Card>)\n            }\n            <Card className=\"text-expm\">\n              <Card.Header>\n                <Card.Title>Tests Provided By</Card.Title>\n                <div className=\"d-flex align-items-center ml-auto select2-sm\">\n                  <label className=\"mr-2 mt-1 mb-sm-1\" style={{ minWidth: 62 }}>Sort By:</label>\n                  <select \n                    name=\"sortBy\" \n                    className=\"form-control select2\"\n                    onChange={handleSorting}\n                  >\n                    <option value=\"0\" key=\"sort_price\" >Price</option>\n                    <option value=\"1\" key=\"sort_rating\" >Rating</option>\n                    <option value=\"999\" key=\"sort_none\" >None</option>\n                  </select>\n                </div>\n              </Card.Header>\n              <Card.Body>\n                <LabList \n                  testData={testData}\n                  test_id={_id}\n                  test_type={type}\n                  labs={data} \n                  city={city} \n                  cart={cart}\n                  totalResults={count} \n                  pageLoaded={parseInt(page)}\n                  sortingParams={labParams} \n                  loadMoreCallback={getTestBasedLabsList}\n                  loading={loadingLabs}\n                  addToCart={addToCart}\n                  createGuestCart={createGuestCart}\n                  getGuestUserCart={getGuestUserCart}\n                  isLoggedIn={isAuthenticated}\n                  history={history}\n                />\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\nDetails.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getPackageByID: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.packages.loadingTests,\n  currentTest: state.packages.currentTest,\n  loadingLabs: state.labs.loadingLabsList,\n  labList: state.labs.labList,\n  labParams: state.labs.sortingParams,\n  sortingParams: state.packages.sortingParams,\n  currentCity: state.citySearch.currentCity,\n  cart: state.cart.cartDetails,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n  addToCart,\n  createGuestCart,\n  getGuestUserCart,\n  getPackageByID,\n  getTestBasedLabsList,\n  getLocalityList,\n  resetComponentStore\n})(withRouter(Details));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/misc.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Category/List.js",["1225","1226","1227","1228","1229"],"import React, { useState, Suspense, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, Image, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { getTestsByCategory, resetComponentStore } from \"actions/customer/category\";\nimport Spinner from \"views/Spinner\";\nimport { FaCartPlus, FaShoppingCart } from \"react-icons/fa\";\nimport { IoMdStar } from \"react-icons/io\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport Rating from \"utils/Rating\";\nimport slugify from \"react-slugify\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { addToCart, createGuestCart, getGuestUserCart } from \"actions/cart/cart\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\n\nconst List = ({\n  addToCart,\n  createGuestCart,\n  getGuestUserCart,\n  isAuthenticated,\n  getTestsByCategory,\n  testList: { data, count, page },\n  loading,\n  cart,\n  match,\n  resetComponentStore,\n  city,\n}) => {\n  const initialSortingParams = {\n    limit: 9,\n    page: 1,\n    orderBy: 'test.name',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n  const [categoryData, setCategories] = useState({\n    tests: [],\n    disabled: '',\n  });\n\n  const {\n    tests,\n    disabled,\n  } = categoryData;\n\n  const loadNextData = () => {\n    const pageNum = parseInt(page);\n    if(tests.length >= count) return setMore(false);\n    if(loading) return;\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  const addItem = (e, item_id, item_type, lab, listing_price, name, changeLab) => {\n    e.preventDefault();\n    const pack = {\n      price: listing_price,\n      name: name\n    }\n    let items = tests;\n    const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n    if(changeLab) productData.changeLab = changeLab;\n    setCategories((data) => ({...data, disabled: item_id }));\n    if (isAuthenticated) {\n      addToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n        }\n        setCategories((data) => ({ ...data, tests: items, disabled: '' }));\n      });\n    } else {\n      const guestCart = createGuestCart({ \n        ...productData,\n        ...pack\n      });\n      if (guestCart) {\n        items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n      }\n      else {\n        console.log(\"product not added\");\n      }\n      setCategories((data) => ({ ...data, tests: items, disabled: '' }));\n    }\n  }\n\n  const ItemCard = (row) => {\n    // const { lab, name, price, testsIncluded, isInCart, _id, type } = row;\n    const { lab, name, listing_price, MRP, discount, testsIncluded, isInCart, _id, type } = row;\n    const { labName, labImage, averageRating, totalReviews, certificates } = lab;\n    const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n    const listing_price_currency = CURRENCY_SYMBOL[listing_price.currency];\n    const MRP_currency = CURRENCY_SYMBOL[MRP.currency];\n    const certificatesAvailable = !!certificates && certificates.length > 0;\n    \n    return (\n      <Col md={6} lg={4} className=\"mb-3\" key={_id}>\n        <Card className=\"mb-0\" style={{ 'height': '340px'}}>\n          <Card.Body className=\"mH-295\">\n            <div className=\"item-card2\">\n              <Link\n                to={{\n                  pathname:`/lab-tests/${type}s/${slugify(name)}`,\n                  search: `?search_type=${type}&search_value=${_id}`\n                }}\n                className=\"text-dark\"\n              >\n                <h4 className=\"font-weight-bold mt-1 mb-2 ellipses\">\n                  {name}\n                </h4>\n              </Link>\n              <div className={ !testsIncluded ? \"d-flex align-items-end\": \"\" } style={{ minHeight: 75 }}>\n                { !!testsIncluded && <small className=\"text-muted\">{`Include ${testsIncluded} tests`}</small> }\n                <p className=\"text-muted fs-13 mb-1 mt-2\">\n                  Starting From \n                  <span className=\"mr-4\">\n                    <b>{listing_price_currency}{listing_price.amount} <del><small>{MRP_currency}{MRP.amount}</small></del></b>\n                  </span>\n                </p>\n              </div>\n                { discount && discount > 0 ?\n                <> \n                  <span>\n                    <sup>\n                      <h5>{`Flat ${discount}% Off`}\n                      </h5>\n                    </sup>\n                  </span>\n                  \n                </>\n                :null\n                }\n              <Row style={{ marginLeft: 0, marginTop: 15 }}>\n                <div style={{ \n                    height: 65, \n                    width: 65, \n                    padding: 4, \n                    boxShadow: \"2px 1px 4px rgba(0,0,0, 0.3)\",\n                    marginRight: 8 \n                  }}\n                >\n                  <Suspense>\n                    <Image \n                      src={labImageURL}\n                      alt={labName} \n                      style={{ maxHeight: 61, maxWidth: 61 }} \n                      roundedCircle\n                    />\n                  </Suspense>\n                </div>\n                <div>\n                  <span style={{ fontSize: \"12px\" }}>\n                    <Link \n                      to={{\n                        pathname:`/lab-tests/labs/${slugify(lab.labName)}`,\n                        search: `?search_type=labs&search_value=${lab._id}`\n                      }}\n                      className=\"text-dark\"\n                    >\n                      {labName}{\" \"}\n                    </Link>\n                    <br/>\n                    <div title=\"lab ratings\" className=\"rati_icon\"><IoMdStar size=\"14px\" className=\"ml-1\"/>{averageRating}</div>\n                    <div>\n                      <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n                        <span title=\"total reviews\">{certificatesAvailable ? `(${totalReviews}) | `: `(${lab.totalReviews})`}</span>\n                        <span title=\"certification\">{`${certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                      </span>\n                    </div>\n                  </span>\n                </div>\n              </Row>\n              <div className=\"bt_list\">\n                <Link\n                  to={{\n                    pathname:`/lab-tests/${type}s/${slugify(name)}`,\n                    search: `?search_type=${type}&search_value=${_id}`\n                  }}\n                  className=\"atc\"\n                >\n                  View Details\n                </Link>\n                {\n                  isInCart === 1 ? (\n                    <Link \n                      to={{ \n                        pathname: \"/cart\",\n                      }}\n                      className=\"btn btn-primary\">\n                      <FaShoppingCart className=\"mr-1\" />\n                      Go To Cart\n                    </Link>\n                  ): (\n                    <Button \n                      onClick={(e) => addItem(e, _id, type, lab._id, listing_price, name)}\n                      disabled={disabled === _id}\n                    >\n                      <FaCartPlus className=\"mr-1\" />\n                      Add To Cart\n                    </Button>\n                  )\n                }\n              </div>\n            </div>\n          </Card.Body>\n        </Card>\n      </Col>\n    )\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  !isAuthenticated) {\n          getGuestUserCart();\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [isAuthenticated, getGuestUserCart])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(onlyOnce) {\n        resetComponentStore();\n        setOnce(false);\n      }\n      if(subscribe &&  match.params.category_slug) {\n          getTestsByCategory(match.params.category_slug, listParams);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getTestsByCategory, listParams, city, match.params.category_slug, resetComponentStore, setOnce])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  data) {\n        let testsList = [];\n        if (data.length > 0) {\n          if(!isAuthenticated && cart && cart.products && cart.products.length > - 1) {\n            data.map((item) => {\n              const foundItem = cart.products.find((product) => product._id === item._id && cart.lab === item.lab._id);\n              item.isInCart = foundItem ? 1: 0;\n              testsList.push(item);\n            })\n          }\n          else testsList = [...tests, ...data];\n        }\n        else if(data.length === 0 && page > 0) testsList = [];\n        setCategories((catsData) => ({ ...catsData, tests: testsList }));\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data])\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\">\n      <InfiniteScroll\n        dataLength={tests.length}\n        next={loadNextData}\n        hasMore={tests.length == count ? false : hasMore}\n        loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n      >\n        <Container>\n          <Row>\n            { tests.map(item => ItemCard(item)) }\n          </Row>\n        </Container>\n      </InfiniteScroll>\n    </section>\n  )\n}\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  testList: PropTypes.object.isRequired,\n  getTestsByCategory: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.category.loadingTests,\n  loadingList: state.category.loadingTestsList,\n  testList: state.category.testList,\n  sortingParams: state.category.sortingParams,\n  city: state.citySearch.currentCity,\n  cart: state.cart.cartDetails,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n  addToCart,\n  getTestsByCategory,\n  getGuestUserCart,\n  resetComponentStore,\n  createGuestCart,\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/Edit.js",["1230","1231"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { useLocation, withRouter } from \"react-router-dom\";\nimport { edit, remove, getFamilyByID, resetComponentStore, setErrors, removeErrors, cancelSave, showAlert } from 'actions/customer/family';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport { validateForm } from \"utils/validation\";\nimport 'react-phone-number-input/style.css';\nimport {isValidPhoneNumber} from 'react-phone-number-input';\nimport moment from \"moment\";\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport { FaTimes } from \"react-icons/fa\";\nimport validateUtility from \"../../plugins/validateUtility\";\n\nconst Edit = ({\n  remove,\n  currentFamily,\n  loading,\n  edit,\n  getFamilyByID,\n  resetComponentStore,\n  setErrors,\n  removeErrors,\n  cancelSave,\n  history,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    name: \"\",\n    dob: \"\",\n    gender: \"\",\n    email: \"\",\n    ccode:\"+91\",\n    phone: \"\",\n    iute164_phone:\"+91\",\n  };\n\n  const [formData, setFormData] = useState(initialState);\n\n  const {\n    name,\n    gender,\n    dob,\n    email,\n    ccode,\n    phone,\n    iute164_phone,\n  } = formData;\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n  const value = query.get(\"search_value\");\n\n  //########################## change event for all inputs ##############################\n  const onChange =  e => {\n    const { name, value } = e.target;\n    switch(name) {\n      case \"phone\":\n        setFormData({ \n          ...formData, \n          iute164_phone: ccode+value,\n          [name]: value,\n        });\n        break;\n      default:\n        setFormData({ \n          ...formData, \n          [name]: allowOnlyOneSpace(value),\n        });\n    }\n  };\n\n  const onSelectDOB = (e, date_picker) => {\n    const dob = date_picker.startDate.format(\"DD-MM-YYYY\");\n    setFormData((form) => ({\n      ...form,\n      dob,\n    }));\n  }\n  const allowOnlyOneSpace = str => {\n    return str.endsWith(\" \") ? str.trim() + \" \" : str.trim();\n  };\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(formData, [\n      {\n        param:\"name\",\n        msg: 'Please provide the member name.',\n      },\n      {\n        param:'dob',\n        msg:'Please provide the date of birth of member.',\n      },\n      {\n        param:'gender',\n        msg:'Please select the gender of member.',\n      },\n      {\n        param:'ccode',\n        msg:'Please provide a valid phone number',\n        actualParam:'phone'\n      },\n      {\n        param:'phone',\n        cond:isValidPhoneNumber,\n        value: iute164_phone,\n        msg:'Please provide a valid phone number',\n      }\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { };\n    for(let i in formData){\n      if(!formData[i] || excludeList[i]) continue;\n      submitData[i] = formData[i];\n    }\n    edit(value, submitData, history);\n  };\n\n  const onCancel = (e) => {\n    e.preventDefault();\n    cancelSave(history);\n  }\n\n  const onRemove = (e) => {\n    e.preventDefault();\n    remove(value, history);\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      resetComponentStore();\n      if(subscribe && value) {\n        try {\n            getFamilyByID(value);\n        }\n        catch(err) {\n          console.log(err);\n        }\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getFamilyByID, resetComponentStore, value])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe && currentFamily) {\n        try {\n          const { name, gender, dob, email, phone, ccode } = currentFamily;\n          setFormData((form) => ({\n            ...form,\n            name,\n            gender,\n            dob,\n            email,\n            phone,\n            ccode,\n            iute164_phone: ccode + phone,\n          }));\n        }\n        catch(err) {\n          console.log(err);\n        }\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [currentFamily])\n\n\n  return (\n    loading ? <Spinner />:\n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={12}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"name\">\n                        <Form.Label>Name <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          value={name}\n                          name=\"name\"\n                          data-vu-type = \"alphawithspace\"\n                          onChange={onChange}\n                          onKeyDown={ (e) => validateUtility.stopDefault(e)}\n                          maxLength={50}\n                        />\n                        <Errors key=\"name\" current_key=\"name\" />\n                      </Form.Group>\n                      <Form.Group controlId=\"phone\">\n                        <Form.Label>Phone <span>*</span></Form.Label>\n                        <Form.Control\n                          value={phone}\n                          name=\"phone\"\n                          placeholder=\"XXXXXXXXXX\"\n                          onChange={onChange} \n                          maxLength={10}\n                          minLength={10}\n                        />\n                        <Errors current_key=\"phone\" key=\"phone\" />\n                      </Form.Group>\n                      <Row>\n                        <Col>\n                          <Form.Group controlId=\"dob\">\n                            <Form.Label>DOB <span>*</span></Form.Label>\n                            <DateRangePicker\n                              singleDatePicker={true}\n                              showDropdowns={true}\n                              onApply={(e, picker) => onSelectDOB(e, picker)}\n                              minYear={1901}\n                              maxDate={moment(Date.now())}\n                              autoApply={true}\n                              startDate={moment(dob, \"DD-MM-YYYY\")}\n                            >\n                              <Form.Control\n                                className=\"py-2 bg-white border-right-0 border-custom\"\n                                type=\"text\"\n                                maxLength=\"10\"\n                                name=\"dob\"\n                                readOnly\n                                value={dob}\n                                placeholder=\"select date of birth\"\n                              />\n                            </DateRangePicker>\n                          </Form.Group>\n                        </Col>\n                        <Col>\n                          <Form.Group controlId=\"gender\">\n                            <Form.Label>Gender <span>*</span></Form.Label>\n                            <Form.Control \n                              as=\"select\"\n                              value={gender}\n                              name=\"gender\"\n                              onChange={onChange}\n                            >\n                              <option value=\"n\">Select Gender</option>\n                              <option value=\"m\">Male</option>\n                              <option value=\"f\">Female</option>\n                            </Form.Control>\n                            <Errors key=\"type\" current_key=\"type\" />\n                          </Form.Group>\n                        </Col>\n                      </Row>\n                      <Form.Group controlId=\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control\n                          type=\"email\"\n                          name=\"email\"\n                          value={email}\n                          onChange={onChange}\n                          onKeyDown={ (e) => e.which == 32 && e.preventDefault()}\n                          placeholder=\"example@mail.com\"\n                        />\n                        <Form.Text id=\"emailHelpBlock\" muted>\n                          Provided email will be used to send test reports.\n                        </Form.Text>\n                        <Errors current_key=\"email\" key=\"email\" />\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup className=\"w-100\">\n                    <Button \n                      type=\"submit\"\n                      variant=\"success\"\n                      className=\"mr-2\"\n                    >\n                      Save\n                    </Button>\n                    <Button \n                      type=\"reset\"\n                      onClick={onCancel}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={onRemove}\n                      variant=\"danger\"\n                      className=\"modified ml-auto\"\n                    >\n                      <FaTimes /> Remove\n                    </Button>\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n  )\n}\n\nEdit.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  edit: PropTypes.func.isRequired,\n  getFamilyByID: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.family.loadingFamily,\n  currentFamily: state.family.currentFamily,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  edit,\n  remove,\n  getFamilyByID,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n  showAlert \n})(withRouter(Edit));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/CartRegister.js",["1232","1233","1234","1235","1236","1237"],"import React, { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { register, checkUserExistence, loadUser, loadPage, setErrors, removeErrors, custom_alert } from \"actions/auth\";\nimport Loader from \"views/Spinner\";\nimport * as Constants from \"constants/index\";\nimport Errors from \"views/Notifications/Errors\";\nimport { validateForm, validatePhoneNumber, validateCountryCode } from \"utils/validation\";\nimport { auth } from \"utils/firebase\";\nimport VerifyOTP from \"./VerifyOTP\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Tab,\n  Form,\n  Button,\n  Nav,\n} from \"react-bootstrap\";\n\nimport {\n  Spinner\n} from 'reactstrap';\n\n// Default Browser language\nauth().useDeviceLanguage();\n\nconst CartRegister = ({\n  register,\n  checkUserExistence,\n  loading,\n  errorList,\n  setErrors,\n  custom_alert,\n  removeErrors,\n}) => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    ccode: \"+91\",\n    mobile: \"\",\n    phone: \"\",\n    userType: Constants.CUSTOMER_ROLE,\n  });\n\n  const [FirebaseConfirm, setFirebaseConfirm] = useState(null);\n  const [verifyMobile, setVerifyMobile ] = useState(false);\n  const [verifyOTP, setVerifyOTP] = useState(false);\n\n  const recaptchaBlock = useRef(null);\n\n  const { phone, name, ccode } = formData;\n  const onChange = e => {\n    const { name, value } = e.target;\n    switch(name) {\n      case \"phone\":\n        setFormData({ ...formData, [name]: value, mobile: \"\" });\n        break;\n      default:\n        setFormData({ ...formData, [name]: value });\n    }\n  }\n\n  const createAuthObject = async (phone, captchaObject) => {\n    const confirmSignIn = await auth().signInWithPhoneNumber(phone, captchaObject);\n    setFirebaseConfirm(confirmSignIn);\n  }\n\n  const onCaptchaPass = () => {\n    setVerifyMobile(false);\n    setVerifyOTP(true);\n  }\n\n  const renderCaptcha = async (phone) => {\n    const captchaObj = window.recaptchaVerifier;\n    captchaObj.render().then((res) => {\n      createAuthObject(phone, captchaObj);\n    }).catch(err => {\n      // console.log(\"unable to render the captcha\", err.code, err.message);\n    }); \n  }\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(formData, [\n      {\n        \"msg\": \"Please provide a name\",\n        \"param\": \"name\"\n      },\n      {\n        \"msg\": \"Please provide a valid 10 digits mobile number with country code\",\n        \"param\": \"phone\"\n      }], setErrors);\n    if(!noErrors) return;\n    const contact = phone;\n    if(!validateCountryCode(ccode))\n      return setErrors([{\n        param: \"phone\",\n        msg: \"Please use a valid country code. Currently we are only serving in India\",\n      }]);\n    if(!validatePhoneNumber(contact)) \n      return setErrors([{\n        param: \"phone\",\n        msg: \"Please provide a valid 10 digits mobile number\",\n      }]);\n    const iute164_phone = ccode+contact;\n    setFormData((form) => ({ ...form, mobile: contact }));\n    try {\n      setVerifyMobile(true);\n      const is_user_exists = await checkUserExistence(iute164_phone);\n      if(!is_user_exists) {\n        if(!window.recaptchaVerifier || window.recaptchaVerifier.m.id !== \"recaptcha-container-cart-register\") {\n          window.recaptchaVerifier = new auth.RecaptchaVerifier(recaptchaBlock.current, {\n            'size': 'invisible',\n            'callback': (response) => {\n              onCaptchaPass();\n            }\n          });\n        }\n        renderCaptcha(iute164_phone);\n      } else {\n        setVerifyMobile(false);\n        return setErrors([{\n          param: \"phone\",\n          msg: \"Provided phone number is associated with another account.\",\n        }]);\n      }\n    }\n    catch(err) {\n      console.log('error', err);\n      setVerifyMobile(false);\n      // throw err;\n    }\n  };\n\n  const verificationCancelled = () => { setVerifyOTP(false) };\n  const verificationSuccess = (auth) => { \n    setVerifyOTP(false);\n    // Login User\n    auth.getIdToken().then((token) => {\n      register({ \n        first_name: formData.name,\n        ccode: formData.ccode,\n        phone: formData.mobile,\n        token,\n        userType: formData.userType\n      });\n    }).catch(err => { \n      console.log(\"err\", err); \n      custom_alert(\"Unable to verify your identify. Please try again later\")\n    });\n  };\n\n  return loading ? (\n    <Loader />\n  ) : (\n    <section  id=\"content\">\n      <div className=\"mypage\">\n        <div className=\"form-group\">\n          <Form className=\"card-body\" onSubmit={e => onSubmit(e)} id=\"login\" tabIndex=\"500\">\n            <Form.Group controlId=\"name\" style={{ textAlign: \"left\" }}>\n              <Form.Label>\n                Name\n              </Form.Label>\n              <Form.Control \n                type=\"text\"\n                placeholder=\"name\"\n                autoComplete=\"name\"\n                name=\"name\"\n                maxLength=\"50\"\n                disabled={verifyMobile}\n                value={name}\n                onChange={e => onChange(e)}\n                required\n                isInvalid={errorList.name ? true : false}\n              />\n              <Errors current_key=\"name\" key=\"name\" />\n            </Form.Group>\n            <Form.Group controlId=\"phone\" style={{ textAlign: \"left\" }}>\n              <Form.Label>\n                Phone\n              </Form.Label>\n              <Form.Control \n                type=\"text\"\n                placeholder=\"XXXXXXXXXX\"\n                autoComplete=\"phone\"\n                name=\"phone\"\n                maxLength=\"10\"\n                disabled={verifyMobile}\n                value={phone}\n                onChange={e => onChange(e)}\n                required\n                isInvalid={errorList.phone ? true : false}\n              />\n              <Errors current_key=\"phone\" key=\"phone\" />\n            </Form.Group>\n            {\n              verifyMobile ?\n              (\n                <div className=\"mt-7 mb-2\">\n                  <Spinner\n                    color=\"warning\"\n                  />\n                </div>\n              )\n              :\n              (\n                <div className=\"mt-7 mb-2\">\n                  <div className=\"submit\">\n                    <Button \n                      color=\"primary\"\n                      className=\"btn-block\"\n                      type=\"submit\"\n                    >\n                      Continue\n                    </Button>\n                  </div>\n                </div>\n              )\n            }\n          </Form>\n        </div>\n      </div>\n      <VerifyOTP \n        show={verifyOTP}\n        firebaseAuth={FirebaseConfirm}\n        setErrors={setErrors}\n        removeErrors={removeErrors}\n        onConfirm={verificationSuccess}\n        onReject={verificationCancelled}\n      />\n      <div id=\"recaptcha-container-cart-register\" ref={recaptchaBlock}></div>\n    </section>\n  )\n};\n\n\n\nCartRegister.proTypes = {\n  errorList: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  loadUser: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  loading: state.auth.loading,\n  errorList: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  custom_alert,\n  checkUserExistence,\n  loadUser,\n  loadPage,\n  setErrors,\n  removeErrors,\n})(withRouter(CartRegister));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Profile/PageView.js",["1238","1239","1240","1241","1242","1243"],"import React, { useEffect, useMemo, useState, Suspense, useRef } from \"react\";\nimport { Row, Col, Container, Card, Image, Button, InputGroup, Form, FormFile } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  edit,\n  updateMobile,\n  getProfile,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  loadPage,\n  custom_alert,\n} from \"actions/customer/profile\";\nimport { checkUserExistence } from \"actions/auth\";\n// import { Ion } from \"react-icons/ai\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport Spinner from \"views/Spinner\";\nimport { FaPaperPlane, FaCheckCircle, FaMapMarker, FaChild, FaBell, FaFile, FaFileMedical, FaWallet, FaCreditCard } from \"react-icons/fa\";\nimport Errors from \"views/Notifications/Errors\";\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport moment from 'moment';\nimport { validateForm, validatePhoneNumber, validateCountryCode } from \"utils/validation\";\nimport { auth } from \"utils/firebase\";\nimport VerifyOTP from \"views/Auth/VerifyOTP\";\nimport { Spinner as Loader } from \"reactstrap\";\nimport UploadProfile from \"assets/images/users/female/17.jpg\";\nimport validateUtility from \"../../plugins/validateUtility\";\n\nconst PageView = ({\n  checkUserExistence,\n  edit,\n  custom_alert,\n  updateMobile,\n  getProfile,\n  currentProfile,\n  loadPage,\n  loading,\n  loadingMobile,\n  resetComponentStore,\n  setErrors,\n  removeErrors,\n}) => {\n  const initialData = {\n    gender: \"\",\n    dob: \"\",\n    name: \"\",\n    email: \"\",\n    ccode: \"\",\n    phone: \"\",\n    avatar: \"\",\n    contact: \"\",\n    imageURL: UploadProfile,\n    newContact: {\n      \"ccode\":\"\",\n      \"phone\":\"\",\n    }\n  };\n\n  const [onlyOnce, setOnce] = useState(true);\n  const [data, setData] = useState(initialData);\n  const [FirebaseConfirm, setFirebaseConfirm] = useState(null);\n  const [verifyMobile, setVerifyMobile ] = useState(false);\n  const [verifyOTP, setVerifyOTP] = useState(false);\n  const recaptchaBlock = useRef(null);\n\n  const {\n    gender,\n    dob,\n    name,\n    email,\n    ccode,\n    phone,\n    avatar,\n    imageURL,\n    contact,\n  } = data;\n\n  const onChange = (e) => {\n    const { name, value, files } = e.target;\n    switch( name ) {\n      case \"avatar\":\n        let image_file = files[0];\n        let image_url = URL.createObjectURL(image_file);\n        setData((prevData) => ({\n          ...prevData,\n          [name]: image_file,\n          imageURL: image_url\n        }));\n        break;\n      default:\n        setData((prevData) => ({ \n          ...prevData,\n          [name]: allowOnlyOneSpace(value)\n        }));\n    }\n  }\n  const allowOnlyOneSpace = str => {\n    return str.endsWith(\" \") ? str.trim() + \" \" : str.trim();\n  };\n  const onVerifyMobile = async (e) => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(data, [\n      {\n        param: \"contact\",\n        msg: \"Please provide a valid mobile number with country code\",\n      }\n    ], setErrors);\n    if(!noErrors) return;\n\n    const splitContact = contact.split(\"-\");\n    if(splitContact.length === 2) {\n      const ccode = splitContact[0].trim();\n      const phone = splitContact[1].trim();\n      if(!validateCountryCode(ccode))\n        return setErrors([{\n          param: \"phone\",\n          msg: \"Please use a valid country code. Currently we are only serving in India\",\n        }]);\n      if(!validatePhoneNumber(phone)) \n        return setErrors([{\n          param: \"phone\",\n          msg: \"Please provide a valid 10 digits mobile number\",\n        }]);\n      const iute164_phone = ccode+phone;\n      setData((data) => ({ ...data, newContact: { ccode, phone} }));\n      try {\n        setVerifyMobile(true);\n        const is_user_exists = await checkUserExistence(iute164_phone);\n        if(!is_user_exists) {\n          if(window.recaptchaVerifier && recaptchaBlock) {\n            window.recaptchaVerifier.clear();\n            recaptchaBlock.dangerouslySetInnerHTML = { __html: `<div id=\"recaptcha-container\"></div>` };\n          }\n          window.recaptchaVerifier = new auth.RecaptchaVerifier('recaptcha-container', {\n            'size': 'invisible'\n          });\n          const confirmSignIn = await auth().signInWithPhoneNumber(iute164_phone, window.recaptchaVerifier);\n          setFirebaseConfirm(confirmSignIn);\n          setVerifyMobile(false);\n          setVerifyOTP(true);\n        } else {\n          setVerifyMobile(false);\n          return setErrors([{\n            param: \"phone\",\n            msg: \"Provided phone number is already in use.\",\n          }]);\n        }\n      }\n      catch(err) {\n        console.log('error', err);\n        setVerifyMobile(false);\n        // throw err;\n      }\n    }\n  }\n\n  const verificationCancelled = () => { setVerifyOTP(false) };\n  const verificationSuccess = (auth) => { \n    setVerifyOTP(false);\n    // Login User\n    auth.getIdToken().then((token) => {\n      updateMobile(currentProfile._id, { ...data.newContact, token }).then((res) => {\n        if(!res || !res.status) return;\n        setData({ ...data, phone: contact, ccode: data.newContact.ccode, newContact: { \"ccode\": \"\", \"phone\": \"\" } });\n      });\n    }).catch(err => { \n      console.log(\"err\", err); \n      custom_alert(\"Unable to verify your identify. Please try again later\")\n    });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(data, [\n      {\n        param: \"name\",\n        msg: \"Please provide a valid name\",\n      },\n    ], setErrors);\n    if(!validateUtility.email(data.email)){\n      custom_alert(\"Please enter correct email\")\n      return;\n    }\n    if(!noErrors) return;\n    const allowed = [\"name\", \"dob\", \"gender\", \"email\", \"avatar\"];\n    const filteredData = {};\n    for(let i of allowed) {\n      if(data[i]) filteredData[i] = data[i];\n    }\n    filteredData.first_name = filteredData.name;\n    edit(currentProfile._id, filteredData);\n  }\n\n  // useMemo(() => {\n  //   if (onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //     loadPage();\n  //   }\n  //   getProfile();\n  // }, [resetComponentStore]);\n\n  useEffect(() => {\n    if (onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n      loadPage();\n    }\n    getProfile();\n  }, [resetComponentStore]);\n\n  const onSelectDate = (e, date_picker, name) => {\n    const { startDate } = date_picker;\n    setData((form) => ({ ...form, [name]: startDate.format(\"DD-MM-YYYY\") }));\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && currentProfile) {\n          const { user, gender, dob } = currentProfile;\n          if(user) {\n            const { first_name, last_name, email, ccode, phone, avatar } = user;\n            setData((prevData) => ({\n              ...prevData,\n              gender,\n              dob,\n              name: last_name ? first_name + \" \" + last_name : first_name,\n              email,\n              ccode,\n              phone: ccode + \" - \" + phone,\n              contact: ccode + \" - \" + phone,\n              avatar,\n              imageURL: avatar ? `${process.env.REACT_APP_SERVER_URL}/documents/user-avatar/${avatar}`: UploadProfile\n            }));\n          }\n        }\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [currentProfile]);\n\n  return (\n    loading ? <Spinner />:\n    <>\n      <section className=\"sptb\" id=\"content\">\n        <Container>\n          <Row>\n            <Col xl={3} lg={12} md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>Dashboard</Card.Title>\n                </Card.Header>\n                <Card.Body \n                  className=\"text-center item-user border-bottom\"\n                >\n                  <FormFile>\n                    <FormFile.Label>\n                      <div className=\"profile-pic\" style={{ \"cursor\": \"pointer\" }}>\n                        <div className=\"profile-pic-img\">\n                          <Suspense>\n                            <Image src={imageURL} className=\"brround thumbnail fs-10\" style={{ width: 80, height: 80 }} alt={name} roundedCircle/>\n                          </Suspense>\n                        </div>\n                      <Link \n                        to=\"/profile\"\n                        className=\"text-dark\"\n                      >\n                        <h4 className=\"mt-3 mb-0 font-weight-semibold\">\n                          {name}\n                        </h4>\n                      </Link>\n                    </div>\n                    <FormFile.Input \n                        isInvalid \n                        accept=\"image/jpeg,image/png\" \n                        onChange={onChange} \n                        name=\"avatar\"\n                        hidden={true}\n                      />\n                    </FormFile.Label>\n                  </FormFile>\n                </Card.Body>\n                <div className=\"item1-links mb-0\">\n                  <Link \n                    to=\"/prescription\"\n                    // to=\"/upload-prescription\"\n                    className=\"d-flex border-bottom\"\n                  >\n                    <span className=\"icon1 mr-3\">\n                      <FaFile fontSize={16} /> Prescriptions\n                    </span>\n                  </Link>\n                  <Link \n                    to=\"/health-records\"\n                    className=\"d-flex border-bottom\"\n                  >\n                    <span className=\"icon1 mr-3\">\n                      <FaFileMedical fontSize={16} /> Health Records\n                    </span>\n                  </Link>\n                  <Link \n                    to=\"/members\"\n                    className=\"d-flex border-bottom\"\n                  >\n                    <span className=\"icon1 mr-3\">\n                      <FaChild fontSize={16} /> Family\n                    </span>\n                  </Link>\n                  <Link \n                    to=\"/addresses\"\n                    className=\"d-flex border-bottom\"\n                  >\n                    <span className=\"icon1 mr-3\">\n                      <FaMapMarker fontSize={16} /> Addresses\n                    </span>\n                  </Link>\n                  <Link \n                    to=\"/saved-cards\"\n                    className=\"d-flex border-bottom\"\n                  >\n                    <span className=\"icon1 mr-3\">\n                      <FaCreditCard fontSize={16} /> Saved Cards\n                    </span>\n                  </Link>\n                  <Link \n                    to=\"/reminders\"\n                    className=\"d-flex border-bottom\"\n                  >\n                    <span className=\"icon1 mr-3\">\n                      <FaBell fontSize={16} /> Reminders\n                    </span>\n                  </Link>\n                </div>\n              </Card>\n            </Col>\n            <Col xl={9} lg={12} md={12}>\n              <Form onSubmit={onSubmit} encType=\"multipart/form-data\">\n                <Card className=\"mb-0\">\n                  <Card.Header>\n                    <Card.Title>\n                      Profile\n                    </Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                    \n                      <Row>\n                        <Col sm={6} md={6}>\n                          <Form.Group>\n                            <Form.Label>Name <span>*</span></Form.Label>\n                            <Form.Control\n                              type=\"text\"\n                              placeholder=\"name\"\n                              id=\"name\"\n                              name=\"name\"\n                              maxLength={50}\n                              value={name || \"\"}\n                              data-vu-type = \"alphawithspace\"\n                              onChange={onChange}\n                              onKeyDown={ (e) => validateUtility.stopDefault(e)}\n                              required\n                            />\n                            <Errors current_key=\"name\" key=\"name\" />\n                          </Form.Group>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col sm={6} md={6}>\n                          <Form.Group>\n                            <Form.Label>Email <span>*</span></Form.Label>\n                            <Form.Control\n                              type=\"email\"\n                              placeholder=\"email\"\n                              name=\"email\"\n                              id=\"email\"\n                              maxLength={50}\n                              value={email || \"\"}\n                              onKeyDown={ (e) => e.which == 32 && e.preventDefault()}\n                              onChange={onChange}\n                            />\n                            <Errors current_key=\"email\" key=\"email\" />\n                          </Form.Group>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col sm={6} md={6}>\n                          <Form.Group>\n                            <Form.Label>Phone <span>*</span></Form.Label>\n                            <InputGroup>\n                              <Form.Control\n                                type=\"text\"\n                                name=\"contact\"\n                                id=\"contact\"\n                                placeholder=\"+91 - XXXXXXXXXX\"\n                                maxLength={50}\n                                value={contact}\n                                onChange={onChange}\n                                required\n                              />\n                              {\n                                \n                                <InputGroup.Append className=\"pl-3 align-items-center\">\n                                { \n                                  contact !== phone ? (verifyMobile || loadingMobile ?\n                                  <Loader color=\"success\" size=\"sm\" />:\n                                  <Button\n                                    variant=\"success\"\n                                    onClick={onVerifyMobile}\n                                    className=\"rounded-pill\"\n                                  >Verify</Button>): <span className=\"text-success\"><FaCheckCircle /></span>\n                                }\n                                </InputGroup.Append>\n                              }\n                              <Errors current_key=\"phone\" key=\"phone\" />\n                            </InputGroup>\n                          </Form.Group>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col sm={6} md={3}>\n                          <Form.Group>\n                            <Form.Label>Gender</Form.Label>\n                            <Form.Control \n                              as=\"select\" \n                              value={gender}\n                              placeholder=\"Select Gender\"\n                              name=\"gender\"\n                              onChange={onChange}\n                            >\n                              <option \n                                disabled\n                                value=\"\"\n                              >Select Gender</option>\n                              <option \n                                value=\"m\"\n                              >Male</option>\n                              <option \n                                value=\"f\"\n                              >Female</option>\n                            </Form.Control>\n                            <Errors current_key=\"gender\" key=\"gender\" />\n                          </Form.Group>\n                        </Col>\n                        <Col sm={6} md={3}>\n                          <Form.Group>\n                            <Form.Label>DOB</Form.Label>\n                            <DateRangePicker\n                              showDropdowns={true}\n                              onApply={(e, picker) => onSelectDate(e, picker, 'dob')}\n                              startDate={ dob ? moment(dob, 'DD-MM-YYYY'): moment() }\n                              maxDate={moment()}\n                              singleDatePicker={true}\n                              autoApply={true}\n                            >\n                              <Form.Control\n                                value={dob}\n                                name=\"dob\"\n                                type=\"text\"\n                                readOnly\n                                className=\"py-2 bg-white border-right-0 border-custom\"\n                                placeholder=\"DD-MM-YYYY\"\n                                maxLength=\"10\"\n                              />\n                            </DateRangePicker>\n                            <Errors current_key=\"dob\" key=\"dob\" />\n                          </Form.Group>\n                        </Col>\n                      </Row>\n                    \n                  </Card.Body>\n                  <Card.Footer>\n                    <Button\n                      type=\"submit\"\n                      variant=\"primary\"\n                      disabled={false}\n                    >Update Profile</Button>\n                  </Card.Footer>\n                </Card>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </section>\n      <section className=\"sptb section-bg\">\n        <Container>\n          <Row>\n            <Col xl={6} lg={7} md={12}>\n              <div className=\"sub-newsletter\">\n                <h3 className=\"mb-2\">\n                  <FaPaperPlane className=\"mr-2\" /> Subscribe To Our Newsletter\n                </h3>\n                <p className=\"mb-0\">Get notification about latest offers, features and more...</p>\n              </div>\n            </Col>\n            <Col xl={6} lg={5} md={12}>\n              <Form >\n                <InputGroup className=\"sub-input mt-1\">\n                  <Form.Control\n                    className=\"input-lg\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    name=\"email\"\n                    required\n                  />\n                  <InputGroup.Append>\n                    <Button \n                      variant=\"primary\"\n                      size=\"lg\"\n                      style = {{\"border-radius\" : \"6px\"}}\n                      className=\"br-tr-3 br-br-3\"\n                      type=\"submit\"\n                    >\n                      Subscribe\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n        <VerifyOTP \n          show={verifyOTP}\n          firebaseAuth={FirebaseConfirm}\n          setErrors={setErrors}\n          removeErrors={removeErrors}\n          onConfirm={verificationSuccess}\n          onReject={verificationCancelled}\n        />\n        <div ref={recaptchaBlock}>\n          <div id=\"recaptcha-container\"></div>\n        </div>\n      </section>\n    </>\n  );\n};\n\n\n\nconst mapStateToProps = (state) => ({\n  currentProfile: state.profile.currentProfile,\n  loading: state.profile.loadingProfile,\n  loadingMobile: state.profile.loadingMobile,\n});\n\nexport default connect(mapStateToProps, {\n  updateMobile,\n  checkUserExistence,\n  edit,\n  loadPage,\n  getProfile,\n  setErrors,\n  removeErrors,\n  custom_alert,\n  resetComponentStore,\n})(withRouter(PageView));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/sampleCollection/sampleCollection.js",[],["1244","1245"],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Auth/CartLogin.js",["1246","1247","1248","1249","1250","1251"],"import React, { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport {\n  login,\n  checkUserExistence,\n  loadUser,\n  loadPage,\n  setErrors,\n  removeErrors,\n  custom_alert,\n} from \"actions/auth\";\nimport Loader from \"views/Spinner\";\nimport * as Constants from \"constants/index\";\nimport Errors from \"views/Notifications/Errors\";\nimport {\n  validateForm,\n  validatePhoneNumber,\n  validateCountryCode,\n} from \"utils/validation\";\nimport { auth } from \"utils/firebase\";\nimport VerifyOTP from \"./VerifyOTP\";\n\nimport { Container, Row, Col, Tab, Form, Button, Nav } from \"react-bootstrap\";\n\nimport { Spinner } from \"reactstrap\";\n\n// Default Browser language\nauth().useDeviceLanguage();\n\nconst CartLogin = ({\n  login,\n  checkUserExistence,\n  loading,\n  errorList,\n  setErrors,\n  custom_alert,\n  removeErrors,\n}) => {\n  const [formData, setFormData] = useState({\n    ccode: \"+91\",\n    mobile: \"\",\n    phone: \"\",\n    userType: Constants.CUSTOMER_ROLE,\n  });\n\n  const [FirebaseConfirm, setFirebaseConfirm] = useState(null);\n  const [verifyMobile, setVerifyMobile] = useState(false);\n  const [verifyOTP, setVerifyOTP] = useState(false);\n\n  const recaptchaBlock = useRef(null);\n\n  const { phone, ccode } = formData;\n  const onChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value, mobile: \"\" });\n  };\n\n  const createAuthObject = async (phone, captchaObject) => {\n    const confirmSignIn = await auth().signInWithPhoneNumber(phone, captchaObject);\n    setFirebaseConfirm(confirmSignIn);\n  }\n\n  const onCaptchaPass = () => {\n    setVerifyMobile(false);\n    setVerifyOTP(true);\n  }\n\n  const renderCaptcha = async (phone) => {\n    const captchaObj = window.recaptchaVerifier;\n    captchaObj.render().then((res) => {\n      createAuthObject(phone, captchaObj);\n    }).catch(err => {\n      // console.log(\"unable to render the captcha\", err.code, err.message);\n    }); \n  }\n\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(\n      formData,\n      [\n        {\n          msg:\n            \"Please provide a valid 10 digits mobile number with country code\",\n          param: \"phone\",\n        },\n      ],\n      setErrors\n    );\n    if (!noErrors) return;\n    const contact = phone;\n    if (!validateCountryCode(ccode))\n      return setErrors([\n        {\n          param: \"phone\",\n          msg:\n            \"Please use a valid country code. Currently we are only serving in India\",\n        },\n      ]);\n    if (!validatePhoneNumber(contact))\n      return setErrors([\n        {\n          param: \"phone\",\n          msg: \"Please provide a valid 10 digits mobile number\",\n        },\n      ]);\n    const iute164_phone = ccode + contact;\n    setFormData({ ...formData, mobile: contact });\n    try {\n      setVerifyMobile(true);\n      const is_user_exists = await checkUserExistence(iute164_phone);\n      if (is_user_exists) {\n        if(!window.recaptchaVerifier || window.recaptchaVerifier.m.id !== \"recaptcha-container-cart-login\") {\n          window.recaptchaVerifier = new auth.RecaptchaVerifier(recaptchaBlock.current, {\n            'size': 'invisible',\n            'callback': (response) => {\n              onCaptchaPass();\n            }\n          });\n        }\n        console.log(\"reaptcha id\", window.recaptchaVerifier.m.id);\n        renderCaptcha(iute164_phone);\n      } else {\n        setVerifyMobile(false);\n        return setErrors([\n          {\n            param: \"phone\",\n            msg: \"Provided phone number is not associated with any account.\",\n          },\n        ]);\n      }\n    } catch (err) {\n      console.log(\"error\", err);\n      setVerifyMobile(false);\n      // throw err;\n    }\n  };\n\n  const verificationCancelled = () => {\n    setVerifyOTP(false);\n  };\n  const verificationSuccess = (auth) => {\n    setVerifyOTP(false);\n    // Login User\n    auth\n      .getIdToken()\n      .then((token) => {\n        login({\n          ccode,\n          phone: formData.mobile,\n          token,\n          userType: formData.userType,\n        });\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n        custom_alert(\"Unable to verify your identify. Please try again later\");\n      });\n  };\n\n  return loading ? (\n    <Loader />\n  ) : (\n    <section id=\"content\">\n      <div className=\"mypage\">\n        <div className=\"form-group\">\n          <Form\n            className=\"card-body\"\n            onSubmit={(e) => onSubmit(e)}\n            id=\"login\"\n            tabIndex=\"500\"\n          >\n            <Form.Group\n              controlId=\"phone\"\n              style={{ textAlign: \"left\" }}\n            >\n              <Form.Label>Phone</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"XXXXXXXXXX\"\n                autoComplete=\"phone\"\n                name=\"phone\"\n                maxLength=\"10\"\n                disabled={verifyMobile}\n                value={phone}\n                onChange={(e) => onChange(e)}\n                required\n                isInvalid={errorList.phone ? true : false}\n              />\n              <Errors current_key=\"phone\" key=\"phone\" />\n            </Form.Group>\n            {verifyMobile ? (\n              <div className=\"mt-7 mb-2\">\n                <Spinner color=\"warning\" />\n              </div>\n            ) : (\n              <div className=\"mt-7 mb-2\">\n                <div className=\"submit\">\n                  <Button color=\"primary\" className=\"btn-block\" type=\"submit\">\n                    Continue\n                  </Button>\n                </div>\n                \n              </div>\n            )}\n          </Form>\n          <VerifyOTP\n            show={verifyOTP}\n            firebaseAuth={FirebaseConfirm}\n            setErrors={setErrors}\n            removeErrors={removeErrors}\n            onConfirm={verificationSuccess}\n            onReject={verificationCancelled}\n          />\n          <div id=\"recaptcha-container-cart-login\" ref={recaptchaBlock}></div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nCartLogin.proTypes = {\n  errorList: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  loadUser: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  loading: state.auth.loading,\n  errorList: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  custom_alert,\n  checkUserExistence,\n  loadUser,\n  loadPage,\n  setErrors,\n  removeErrors,\n})(CartLogin);\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/order/order.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/collectionCenters.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/prescription.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Billing/BillingDetails.js",["1252","1253","1254","1255","1256","1257","1258","1259","1260","1261"],"import React, { useState, Suspense } from \"react\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { placeOrder } from \"actions/order/order\";\nimport { connect } from \"react-redux\";\nimport { Container, Image, Row, Col, Alert } from \"react-bootstrap\";\nimport Rating from \"utils/Rating\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport moment from \"moment\";\nimport { EditAddress } from \"views/Customer/Cart/Address\";\nimport { EditFamily } from \"views/Customer/Cart/Family\";\nimport {\n  removeCoupon,\n  removeProductFromCart,\n  emptyCart,\n} from \"actions/cart/cart\";\n\nconst loaderCSS = css`\n  position: absolute;\n  top: calc(50% - 30px);\n  left: calc(50% - 30px);\n`;\n\nconst scheduleToText = ({ \n  slot,\n  day,\n}) => {\n  const startLabel = moment(slot[0], \"HH:mm\").format(\"hh:mm A\");\n  const endLabel = moment(slot[1], \"HH:mm\").format(\"hh:mm A\");\n  const dayLabel = moment(day, \"DD-MM-YYYY\").format(\"Do MMM\");\n  const scheduleString = `${dayLabel}, ${startLabel} - ${endLabel}`;\n  return scheduleString;\n}\n\nconst dobToAge = (dob) => {\n  return moment().diff(moment(dob, \"DD-MM-YYYY\"), 'years');\n}\n\nexport function BillingDetails({\n  loading,\n  auth: { isAuthenticated },\n  cart,\n  subTotal,\n  homeCollectionCharges,\n  setApplyCoupon,\n  sampleDetails,\n  patientDetails,\n  addressDetails,\n  collectionCenter,\n  removeCoupon,\n  removeProductFromCart,\n  emptyCart,\n  appliedCoupon,\n  walletDeduction = 0,\n  discount,\n  tax,\n  penalty = 0,\n  grossAmount,\n  products,\n  lab,\n  onEdit,\n  onScheduleEdit,\n  onCenterEdit,\n  currentCity,\n  prescription,\n  prescriptionNeeded\n}) {\n  let totalDiscount =\n    discount?.in === \"per\"\n      ? Math.round(\n          (((subTotal * discount.value) / 100 + Number.EPSILON) * 100) / 100\n        )\n      : discount?.value;\n\n  const [ show, setShow ] = useState(null); \n    \n  const edit = (e, type, _id) => {\n    e.preventDefault();\n    if(type === \"schedule\") onScheduleEdit();\n    else if(type === \"collectionCenter\") onCenterEdit();\n    else setShow({ type, id: _id });\n  }\n\n  const removeCouponCode = (e) => {\n    e && e.preventDefault();\n    removeCoupon(cart).then((res) => {\n      if(res) onEdit();\n    });\n  };\n\n  const removeProduct = (productId, productType) => {\n    removeProductFromCart(cart, productId, productType, isAuthenticated).then((res) => {\n      if (res) {\n        onEdit();\n      }\n    });\n  };\n\n  const closeModal = () => {\n    setShow(null);\n    onEdit();\n  }\n\n  return (\n    <div className=\"right_bill card\" style={{ backgroundColor: \"#ecedf7\" }}>\n      {loading && (\n        <div className=\"custom_overlay\">\n          <ClipLoader css={loaderCSS} size={60} loading={true} />\n        </div>\n      )}\n      <div className=\"item-card9-desc mb-2 mt-1\">\n        <>\n          {lab && lab.labName && (\n            <div className=\"pack p-3 bg-white test_list dats\">\n              <div className=\"d-flex\">\n                <div>\n                  <Suspense>\n                    <Image\n                      src={\n                        lab.labImage\n                          ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${lab.labImage}`\n                          : DefaultLabImage\n                      }\n                      alt={lab.labName}\n                      roundedCircle\n                      width={45}\n                      height={45}\n                    />\n                  </Suspense>\n                </div>\n                <div>\n                  <div className=\"d-flex flex-column\">\n                    <div title=\"lab name\">\n                      <span className=\"font-weight-semibold\">\n                        {lab.labName}\n                      </span>\n                    </div>\n                    <div title=\"lab ratings\">\n                      <Rating ratings={lab.averageRating} />\n                      &nbsp;\n                      <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n                        <span title=\"total reviews\">{`(${lab.totalReviews}) | `}</span>\n                        <span title=\"certification\">{`${lab.certificates\n                          .map((cert) => cert.certificateName)\n                          .join(\", \")}`}</span>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"ml-auto\">\n                  <Link\n                    to=\"/cart/change-lab\"\n                    className=\"rightpart font-weight-bold\"\n                  >\n                    Change Lab\n                  </Link>\n                </div>\n              </div>\n            </div>\n          )}\n          <div\n            className=\"bg-white dats item-card9-desc mb-2 mt-1 pt-0 pack test_list\"\n            style={{ marginTop: \"1px !important\" }}\n          >\n            {products &&\n              products.length &&\n              products?.map((product, index) => {\n                return (\n                  <div\n                    className=\"item-card9-desc mb-2 mt-1 test_list\"\n                    key={index}\n                  >\n                    <span className=\"mr-4\">\n                      {product.title}{\" \"}\n                      <span\n                        style={{ float: \"right\" }}\n                      >{`${CURRENCY_SYMBOL.INR} ${product.price}`}</span>\n                    </span>\n                    <p className=\"pb-0\">\n                      {product.type}\n                      <a\n                        href=\"#\"\n                        className=\"rightpart\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          removeProduct(product._id, product.type);\n                        }}\n                      >\n                        {prescription ? null : \"Remove\"}\n                      </a>\n                    </p>\n                  </div>\n                );\n              })}\n            <div className=\"text-center\">\n              {prescription ? (\n                <>\n                  <Link\n                    to=\"#\"\n                    className=\"btn btn-danger w-75\"\n                    // style={{backgroundColor:\"#d90404\", borderColor:\"#d90404\"}}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      emptyCart(cart);\n                    }}\n                  >\n                    Empty Cart\n                  </Link>\n                </>\n              ) : (\n                <>\n                  <Link to=\"/lab-tests\" className=\"btn btn-primary w-75\">\n                    Add More Test\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        </>\n        <div className=\"bill_new p-0 bg-white mb-4\">\n          {isAuthenticated && appliedCoupon && (\n            <div className=\"mb-2 mt-1 pt-2 pb-2 pl-3 pr-3\">\n              <span className=\"mr-4 fs-16 font-weight-bold\">\n                {appliedCoupon.code}{\" \"}\n              </span>\n              <a\n                className=\"applyCustomCoupon rightpart\"\n                href=\"#\"\n                onClick={(e) => removeCouponCode(e)}\n              >\n                Remove\n              </a>\n              <p className=\"float-none pb-0\">{appliedCoupon.description}</p>\n            </div>\n          )}\n          {isAuthenticated && products && products.length && (\n            <div className=\"text-center pt-2 pb-2 border-top\">\n              <span>Have another Coupon? </span>\n              <a\n                href=\"#\"\n                className=\"applyCustomCoupon\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  setApplyCoupon(true);\n                }}\n              >\n                Apply\n              </a>\n            </div>\n          )}\n        </div>\n        <div className=\"bill_new p-0 bg-white mb-4\">\n          {sampleDetails && sampleDetails.collectionType && (\n            <div className=\"d-flex mb-2 mt-1 p-3 align-items-center justify-content-between\">\n              <div>\n                <span className=\"mr-4 fs-14 text-gray\">\n                  {sampleDetails.collectionType === \"home\"\n                    ? \"Home collection pickup time\"\n                    : sampleDetails.collectionType === \"ambulatory\"\n                    ? \"Ambulatory collection pickup time\"\n                    : \"Walk-in collection time\"}\n                </span>\n                <div className=\"float-none p-0\">\n                  {scheduleToText(sampleDetails.schedule)}\n                </div>\n              </div>\n              <div>\n                <a\n                  className=\"rightpart\"\n                  href=\"#\"\n                  onClick={(e) => edit(e, \"schedule\")}\n                >\n                  Edit\n                </a>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"bill_new p-0 bg-white mb-4\">\n          {patientDetails && (\n            <div className=\"d-flex mb-2 mt-1 p-3 align-items-center justify-content-between\">\n              <div>\n                <span className=\"mr-4 fs-14 text-gray\">Patient Details</span>\n                <div className=\"float-none p-0\">{`${patientDetails.name}, ${\n                  dobToAge(patientDetails.dob)\n                }`}</div>\n              </div>\n              <div>\n                <a\n                  className=\"rightpart\"\n                  href=\"#\"\n                  onClick={(e) => edit(e, \"patient\", patientDetails._id)}\n                >\n                  Edit\n                </a>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"bill_new p-0 bg-white mb-4\">\n          {addressDetails && (\n            <div className=\"d-flex mb-2 mt-1 p-3 align-items-center justify-content-between\">\n              <div>\n                <span className=\"mr-4 fs-14 text-gray\">Address Details</span>\n                <div className=\"float-none p-0\">{`${addressDetails.address.indexOf(addressDetails.locality_name) === -1 ? addressDetails.address + \", \" + addressDetails.locality_name: addressDetails.address }`}</div>\n              </div>\n              <div>\n                <a\n                  className=\"rightpart\"\n                  href=\"#\"\n                  onClick={(e) => edit(e, \"address\", addressDetails._id)}\n                >\n                  Edit\n                </a>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"bill_new p-0 bg-white mb-4\">\n          {sampleDetails?.collectionType === \"walkin\" && collectionCenter && (\n            <div className=\"d-flex mb-2 mt-1 p-3 align-items-center justify-content-between\">\n              <div>\n                <span className=\"mr-4 fs-14 text-gray\">Collection Center</span>\n                <div className=\"float-none p-0\">{collectionCenter.name}</div>\n              </div>\n              <div>\n                <a\n                  className=\"rightpart\"\n                  href=\"#\"\n                  onClick={(e) => edit(e, \"collectionCenter\")}\n                >\n                  Edit\n                </a>\n              </div>\n            </div>\n          )}\n        </div>\n        {prescriptionNeeded && (\n          <div>\n            <Alert variant=\"warning\" className=\"font-weight-semibold\">\n              Note: Please, carry your prescription with you.\n            </Alert>\n          </div>\n        )}\n        <div className=\"bill_new pack bg-white\">\n          <h3 className=\"remove-lr-margins\">Bill Details</h3>\n\n          <ul>\n            <li>\n              Sub Total{\" \"}\n              <span>{`${CURRENCY_SYMBOL.INR} ${subTotal ?? \"0\"}`}</span>\n            </li>\n            {homeCollectionCharges > 0 && (\n              <li>\n                Home Collection Charges.{\" \"}\n                <span>{`${CURRENCY_SYMBOL.INR} ${\n                  homeCollectionCharges ?? \"0\"\n                }`}</span>\n              </li>\n            )}\n            {totalDiscount > 0 && (\n              <li>\n                Discount\n                <span>{`- ${CURRENCY_SYMBOL.INR} ${\n                  totalDiscount ?? \"0\"\n                }`}</span>\n              </li>\n            )}\n            <li>\n              Tax & Charges<span>{`${CURRENCY_SYMBOL.INR} ${tax ?? \"0\"}`}</span>\n            </li>\n            {penalty > 0 && <li>\n              Penalty<span>{`${CURRENCY_SYMBOL.INR} ${penalty ?? \"0\"}`}</span>\n            </li>}\n            {walletDeduction > 0 && (\n              <li>\n                <b>\n                  Total{\" \"}\n                  <span>{`${CURRENCY_SYMBOL.INR} ${\n                    subTotal + homeCollectionCharges - totalDiscount + tax ??\n                    \"0\"\n                  }`}</span>\n                </b>\n              </li>\n            )}\n            {walletDeduction > 0 && (\n              <li>\n                Wallet{\" \"}\n                <span>{`- ${CURRENCY_SYMBOL.INR} ${walletDeduction.toFixed(\n                  2\n                )}`}</span>\n              </li>\n            )}\n          </ul>\n\n          {/* <p className=\"tsc\">By Placing order you are agree to our T&C</p> */}\n          <div className=\"item-card9-desc mb-2 mt-1 totalam\">\n            <span className=\"mr-4\">\n              Payable Amount{\" \"}\n              <span>\n                <b>{`${CURRENCY_SYMBOL.INR} ${grossAmount ?? \"0\"}`}</b>\n              </span>{\" \"}\n            </span>\n          </div>\n        </div>\n      </div>\n      {show && show.type === \"address\" && (\n        <EditAddress show={true} handleClose={closeModal} value={show.id} />\n      )}\n      {show && show.type === \"patient\" && (\n        <EditFamily show={true} handleClose={closeModal} value={show.id} />\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.cart.loadingCartDetails,\n  cartDetails: state.cart.cartDetails,\n  couponDetails: state.cart.couponDetails,\n  auth: state.auth,\n  currentCity: state.citySearch.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  placeOrder,\n  removeCoupon,\n  removeProductFromCart,\n  emptyCart,\n})(withRouter(BillingDetails));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LabTests/PageView.js",["1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276"],"import React, { useEffect, useState, useRef, Suspense } from \"react\";\nimport { Row, Col, Container, Card, Image, Accordion, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  getLabTestsPage,\n  resetComponentStore,\n} from \"actions/customer/lab-tests\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport slugify from \"react-slugify\";\nimport Spinner from \"views/Spinner\";\nimport radiology from \"assets/images/radiology.png\";\nimport pathology from \"assets/images/pathology.png\";\nimport CropImg from \"utils/CropImg\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport { IoMdShareAlt, IoMdCalendar, IoMdEye, IoMdStar, IoMdCart } from \"react-icons/io\";\nimport { getMoreCategories } from \"actions/customer/lt_categories\";\nimport HtmlParser from \"utils/HtmlParser\";\nimport Moment from \"react-moment\";\nimport { AiFillAndroid, AiFillApple } from \"react-icons/ai\";\nimport { FaCartPlus, FaShoppingCart, FaEye } from \"react-icons/fa\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { addToCart, createGuestCart } from 'actions/cart/cart';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\n\nconst package_slide_settings = {\n  dots: false,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 3,\n  slidesToScroll: 1,\n  autoplaySpeed: 2000,\n  prevArrow: <PrevArrow height=\"3rem\" width=\"3rem\" lineHeight=\"3rem\" fontSize=\"24px\"/>,\n  nextArrow: <NextArrow height=\"3rem\" width=\"3rem\" lineHeight=\"3rem\" fontSize=\"24px\"/>,\n  responsive: [\n    {\n      breakpoint: 1024,\n      settings: {\n        slidesToShow: 3,\n        slidesToScroll: 1,\n        infinite: true,\n        dots: false\n      }\n    },\n    {\n      breakpoint: 600,\n      settings: {\n        slidesToShow: 2,\n        slidesToScroll: 1,\n        initialSlide: 1\n      }\n    },\n    {\n      breakpoint: 480,\n      settings: {\n        slidesToShow: 1,\n        slidesToScroll: 1\n      }\n    }\n  ]\n};\n\nconst habit_slide_settings = {\n  dots: false,\n  infinite: true,\n  // speed: 500,\n  slidesToShow: 3,\n  slidesToScroll: 1,\n  autoplay:true,\n  autoplaySpeed: 2000,\n  prevArrow: <PrevArrow height=\"2rem\" width=\"2rem\" lineHeight=\"2rem\" fontSize=\"24px\" small={true}/>,\n  nextArrow: <NextArrow height=\"2rem\" width=\"2rem\" lineHeight=\"2rem\" fontSize=\"24px\" small={true}/>,\n  responsive: [\n    {\n      breakpoint: 1024,\n      settings: {\n        slidesToShow: 3,\n        slidesToScroll: 1,\n        infinite: true,\n        dots: false\n      }\n    },\n    {\n      breakpoint: 600,\n      settings: {\n        slidesToShow: 2,\n        slidesToScroll: 1,\n      }\n    },\n    {\n      breakpoint: 480,\n      settings: {\n        slidesToShow: 1,\n        slidesToScroll: 1\n      }\n    }\n  ]\n};\n\nconst lab_slide_settings = {\n  dots: false,\n  // arrows:false,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 4,\n  slidesToScroll: 1,\n  autoplay:true,\n  autoplaySpeed: 2000,\n  prevArrow: <PrevArrow height=\"3rem\" width=\"3rem\" lineHeight=\"3rem\" fontSize=\"24px\"/>,\n  nextArrow: <NextArrow height=\"3rem\" width=\"3rem\" lineHeight=\"3rem\" fontSize=\"24px\"/>,\n  // responsive: [\n  //   {\n  //     breakpoint: 1024,\n  //     settings: {\n  //       slidesToShow: 4,\n  //       slidesToScroll: 2,\n  //       infinite: true,\n  //       dots: false\n  //     }\n  //   },\n  //   {\n  //     breakpoint: 600,\n  //     settings: {\n  //       slidesToShow: 3,\n  //       slidesToScroll: 2,\n  //       initialSlide: 1\n  //     }\n  //   },\n  //   {\n  //     breakpoint: 480,\n  //     settings: {\n  //       slidesToShow: 1,\n  //       slidesToScroll: 1\n  //     }\n  //   }\n  // ]\n};\n\nfunction PrevArrow(props) {\n  const { className, style, onClick, height, width, lineHeight, fontSize, small } = props;\n  return (\n    <div\n      className={className + (small ? \" small\": \"\")}\n      style={{ \n        ...style, \n        boxShadow: \"0 4px 15px rgba(67,67,67,.15)\",\n        borderRadius: \"50%\",\n        zIndex: 99,\n        height,\n        width,\n        lineHeight,\n        color: \"#32ad6b\",\n        background: \"#ffffff\",\n      }}\n      onClick={onClick}\n    >\n      <span aria-label=\"Previous\" style={{ fontSize }}>{\"‹\"}</span>\n    </div>\n  );\n}\n\nfunction NextArrow(props) {\n  const { className, style, onClick, height, width, lineHeight, fontSize, small } = props;\n  return (\n    <div\n      className={className + (small ? \" small\": \"\")}\n      style={{ \n        ...style, \n        boxShadow: \"0 4px 15px rgba(67,67,67,.15)\",\n        borderRadius: \"50%\",\n        zIndex: 99,\n        height,\n        width,\n        lineHeight,\n        color: \"#32ad6b\",\n        background: \"#ffffff\"\n      }}\n      onClick={onClick}\n    >\n      <span className={ small ? \"small\": \"\" } aria-label=\"Next\" style={{ fontSize }}>{\"›\"}</span>\n    </div>\n  );\n}\n\nconst PageView = ({\n  getLabTestsPage,\n  getMoreCategories,\n  resetComponentStore,\n  labTests,\n  loading,\n  createGuestCart,\n  auth: { isAuthenticated },\n  habitsData,\n  addToCart,\n  city,\n}) => {\n  const initialData = {\n    habits: [],\n    testsCategories: [],\n    labs: [],\n    packages: [],\n    articles: [],\n    loginStatus: 0,\n    disabled: '',\n  };\n\n  const initialParams = {    \n    limit: 200,\n    page: 1,\n    orderBy: 'name',\n    ascending: 'desc',\n  };\n\n  let imageURL = null;\n  const imageRef = useRef(null);\n  const [onlyOnce, setOnce] = useState(true);\n  const [cartOption, setCartOption] = useState(true);\n  const [data, setData] = useState(initialData);\n  const [toggleHabits, setToggleHabits] = useState(false);\n  const { habits, testsCategories, labs, packages, loginStatus, articles, disabled } = data;\n\n  // useMemo(() => {\n  //   if (onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getLabTestsPage();\n  // }, [getLabTestsPage, city, resetComponentStore]);\n\n  const setPackages = (packs) => setData((data) => ({\n    ...data,\n    ...packs\n  }))\n\n  useEffect(() => {\n    if (onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getLabTestsPage();\n  }, [getLabTestsPage, city, resetComponentStore]);\n\n  useEffect(() => {\n    let packages = [];\n    if (data.packages.length > 0 && cartOption && localStorage.getItem('dummyCart')) {\n      data.packages.map((item) => {\n        const foundItem = JSON.parse(localStorage.getItem('dummyCart')).find((product) => product.productID === item._id);\n        item.isInCart = foundItem ? item.isInCart = 1: item.isInCart\n        packages.push(item);\n      })\n      setCartOption(false);\n      setData((data) => ({ ...data, packages }));\n    }\n  }, [data.packages]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if (subscribe && labTests) {\n          setData((prevData) => ({\n            ...prevData,\n            ...labTests,\n          }));\n        }\n      } catch (err) {\n        // throw err;\n      }\n    };\n    asyncCall();\n    return () => {\n      subscribe = false;\n    };\n  }, [labTests]);\n\n  const addItem = (e, item_id, item_type, lab, listing_price, name, changeLab) => {\n    e.preventDefault();\n    // if(!isAuthenticated) history.push(\"/login\");\n    const pack = {\n      price: listing_price,\n      name: name\n    }\n    let items = packages;\n    const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n    if(changeLab) productData.changeLab = changeLab;\n    setPackages({ packages, disabled: item_id });\n    if (isAuthenticated) {\n      addToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n        }\n        setPackages({ packages: items, disabled: '' });\n      });  \n    } else {\n      const guestCart = createGuestCart({ \n        ...productData,\n        ...pack\n      });\n      if (guestCart) {\n        items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n      }\n      else {\n        console.log(\"product not added\");\n      }\n      setPackages({ packages: items, disabled: '' });\n    }\n  }\n\n  const cardCols = [\"primary\", \"secondary\", \"info\", \"danger\", \"warning\"];\n  let colNum = 0;\n  let colorSelected = cardCols[0];\n  let habitsID = new Set();\n  return (\n    loading ? <Spinner />:\n    <>\n      <section className=\"sptb section-bg\">\n        <Container>\n          <div className=\"section-title center-block text-center\">\n            <h2>Tests By Categories</h2>\n            <p>Purchase Tests By Selected Category</p>\n          </div>\n          <div className=\"item-search-tabs rightsec\">\n            <ul className=\"top_cat banner_sec\">\n              {\n                testsCategories.map((category, idx) => {\n                  colorSelected = cardCols[colNum % cardCols.length];\n                  colNum++;\n                  return (\n                    <li key={category.slug}>\n                      <div className=\"cat-item text-center\">\n                        <Link to={`/lab-tests/categories/${category.slug}#content`} />\n                        <Image\n                          src={\n                            category.slug === \"radiology\"\n                              ? radiology\n                              : pathology\n                          }\n                        />\n                        <div className=\"pat_part\">\n                          <h2>\n                            {category.title}\n                          </h2>\n                          <p>{category.description}</p>\n                          <Link to={`/lab-tests/categories/${category.slug}`}>Explore Now</Link>\n                        </div>\n                      </div>\n                    </li>\n                  );\n                })\n              }\n            </ul>\n          </div>\n        </Container>\n      </section>\n      <section className=\"sptb\">\n        <Container>\n          <div className=\"section-title center-block text-center\">\n            <h2>Tests By Habits/ Conditions</h2>\n            <p>Purchase Tests By Selected Habit</p>\n          </div>\n          {\n            !!habits && habits.length > 0 ? \n            // <div className=\"item-search-tabs rightsec\">\n            //   <ul className=\"top_cat banner_sec\">\n            <><Slider {...habit_slide_settings}>\n            {habits.map((habit, idx) => {\n              habitsID.add(habit._id);\n              colorSelected = cardCols[colNum % cardCols.length];\n              colNum++;\n              return (\n                <div key={habit._id} className=\"item pr-5 no-shadow\">\n\n                  <Card className=\"mb-0 bg-transparent border-0\">\n                    <Card.Body className=\"mH-225\">\n                      <div className=\"text-center\" style={{ height: 240 }}>\n                        <Link\n                          to={{\n                            pathname:`/lab-tests/habits/${slugify(habit.habit_name)}`,\n                            search: `?search_type=habit&search_value=${habit._id}`\n                          }}\n                        >\n                          <Suspense>\n                            <Image\n                              src={`${process.env.REACT_APP_SERVER_URL}/documents/habits/${habit.icon}`}\n                              style={{ display:\"inline\", width: 100, height: 100, marginBottom: 25 }}\n                            />\n                          </Suspense>\n                          <h2>\n                            {habit.name}\n                          </h2>\n                        </Link>\n                        <div className=\"pat_part\">\n                          { HtmlParser(habit.description) }\n                        </div>\n                      </div>\n                      <div className=\"text-center\">\n                        <Link\n                          to={{\n                            pathname:`/lab-tests/habits/${slugify(habit.habit_name)}`,\n                            search: `?search_type=habit&search_value=${habit._id}`\n                          }}\n                          className=\"view_more_link\"\n                        >\n                          View More\n                        </Link>\n                      </div>\n                    </Card.Body>\n                  </Card>\n                </div>\n              );\n            })}\n          \n          </Slider>\n          \n          <div className=\"text-center\">\n            <Link\n              to=\"/lab-tests/habits\"\n              title=\"View all Habits\"\n              className=\"viewalls\"\n            >\n              { !!habits && !!habits.length ? \"View All\": null }\n            </Link>\n          </div> </> : <div className=\"text-center\"> No Tests By Habits/ Conditions available in your city</div>}\n        </Container>\n      </section>\n      <section className=\"sptb section-bg\">\n        <Container>\n          <div className=\"section-title center-block text-center\">\n            <h2>Packages</h2>\n          </div>\n          {\n            !!packages && packages.length > 0 ? \n            <><Slider {...package_slide_settings}>\n              {\n              packages.map((pack) => {\n                const currency_symbol = CURRENCY_SYMBOL[pack.listing_price.currency];\n                const discount = pack.discount;\n                const MRP = pack.MRP.amount\n                const lab = pack.lab;\n                const certificatesAvailable = !!lab.certificates && lab.certificates.length > 0;\n                const labImage = lab.labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${lab.labImage}`: DefaultLabImage;\n                const discountLabel = (\n                  `\n                    <div class=\"remove-p-m\">\n                      <div class=\"row border-bottom mb-3\">\n                        <div class=\"col text-center\">\n                          <span> Price Details </span>\n                        </div>\n                      </div>\n                      <div class=\"row\">\n                        <div class=\"col-md-8\">\n                          <span>\n                            Price\n                          </span>\n                        </div>\n                        <div class=\"col-md-4 text-right\">\n                          <span>\n                            ${currency_symbol} ${MRP}\n                          </span>\n                        </div>\n                      </div>\n                      <div class=\"row border-bottom mb-3 p-0\">\n                        <div class=\"col-md-8\">\n                          <span>\n                            Selling Price\n                          </span>\n                        </div>\n                        <div class=\"col-md-4 text-right\">\n                          <span>\n                            ${currency_symbol} ${pack.listing_price.amount}\n                          </span>\n                        </div>\n                      </div>\n                      <div class=\"row p-0\">\n                        <div class=\"col text-center\">\n                          <span>\n                            You Save ${currency_symbol} ${MRP-pack.listing_price.amount} (${discount}%)\n                          </span>\n                        </div>\n                      </div>\n                    </div>`\n                )\n                return (\n                  <div key={pack._id} className=\"item pr-5\">\n                    <Card className=\"mb-0 bg-transparent box-shadow\" >\n                      <Card.Body className=\"mH-225 bg-white\">\n                        <div className=\"item-card2\">\n                          <Link \n                            className=\"text-dark\"\n                            to={{\n                              pathname:`/lab-tests/packages/${slugify(pack.name)}`,\n                              search: `?search_type=package&search_value=${pack._id}`\n                            }}\n                          >\n                            <h4 className=\"font-weight-bold mt-1 mb-1\">\n                              {pack.name}{\" \"}\n                            </h4>\n                          </Link>\n                          <small className=\"text-muted\">{`Include ${pack.testsIncluded} tests`}</small>\n                          <p className=\"text-muted fs-12 mb-1 mt-2\">\n                            Starting From\n                            <span>\n                              {` ${currency_symbol}${pack.listing_price.amount}`} <del><small>{` ${currency_symbol}${MRP}`}</small></del>\n                            </span>\n                          </p>\n                          { discount && discount > 0 ? \n                          <>\n                            <span>\n                              <sup>\n                                <h5>{`Flat ${discount}% Off`}\n                                </h5>\n                              </sup>\n                            </span>\n                            </>\n                            : null\n                          }\n                          <Row style={{ marginLeft: 0, marginTop: 15 }}>\n                            <div style={{ \n                                height: 65, \n                                width: 65, \n                                padding: 4, \n                                boxShadow: \"2px 1px 4px rgba(0,0,0, 0.3)\",\n                                marginRight: 8 \n                              }}\n                            >\n                              <Suspense>\n                                <Image src={labImage} alt={lab.labName} style={{ maxHeight: 61, maxWidth: 61 }} roundedCircle/>\n                              </Suspense>\n                            </div>\n                            <div>\n                              <span style={{ fontSize: \"12px\" }}>\n                                <u>\n                                  <Link \n                                    to={{\n                                      pathname:`/lab-tests/labs/${slugify(lab.labName)}`,\n                                      search: `?search_type=labs&search_value=${lab._id}`\n                                    }}\n                                    className=\"text-dark\"\n                                  >\n                                    {lab.labName}{\" \"}\n                                  </Link>\n                                </u><br/>\n                                <div title=\"lab ratings\" className=\"rati_icon\"><IoMdStar size=\"14px\" className=\"ml-1\"/>{lab.averageRating}</div>\n                                <div>\n                                  <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n                                    <span title=\"total reviews\">{certificatesAvailable ? `(${lab.totalReviews}) | `: `(${lab.totalReviews})`}</span>\n                                    <span title=\"certification\">{`${lab.certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                                  </span>\n                                </div>\n                              </span>\n                            </div>\n                          </Row>\n                          <div className=\"bt_list\">\n                            <Link \n                              className=\"fs-12\"\n                              to={{\n                                pathname:`/lab-tests/packages/${slugify(pack.name)}`,\n                                search: `?search_type=package&search_value=${pack._id}`\n                              }}\n                            >\n                              <FaEye className=\"mr-1\" />\n                              View Details\n                            </Link>\n                            {\n                              pack.isInCart === 1 ? (\n                                <Link \n                                  to={{ \n                                    pathname: \"/cart\",\n                                  }}\n                                  className=\"btn btn-primary\"\n                                >\n                                  <FaShoppingCart className=\"mr-1\" />\n                                  Go To Cart\n                                </Link>\n                              ): (\n                                <Button \n                                  onClick={(e) => addItem(e, pack._id, \"package\", lab._id, pack.listing_price, pack.name)}\n                                  disabled={disabled === pack._id}\n                                >\n                                  <FaCartPlus className=\"mr-1\" />\n                                  Add To Cart\n                                </Button>\n                              )\n                            }\n                          </div>\n                        </div>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                )\n              })\n            }\n            </Slider>\n          \n          <div className=\"text-center\">\n            <Link\n              to=\"/lab-tests/packages\"\n              title=\"View all Packages\"\n              className=\"viewalls\"\n            >\n              { !!packages && !!packages.length ? \"View All\": null }\n            </Link>\n          </div></> : <div className=\"text-center\"> No Tests Packages available in your city</div>\n        }\n        </Container>\n      </section>\n      <section className=\"sptb pack_page\">\n        <Container>\n          <div className=\"section-title center-block text-center\">\n            <h2>Partner Labs</h2>\n          </div>\n          { !!labs && labs.length > 0 ? \n            <><Slider {...lab_slide_settings}>\n            {\n              labs.map((lab) => {\n                const address = lab.address;\n                const locality = address.locality;\n                const city = address.city ?? {};\n                const certificatesAvailable = !!lab.certificates && lab.certificates.length > 0;\n                const labImage = lab.labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${lab.labImage}`: DefaultLabImage;\n                return (\n                  <div key={lab._id} className=\"item pr-5\">\n                    <Card className=\"mb-0\" >\n                      <Card.Body className=\"p-2\">\n                        <div className=\"item-card2\">\n                          <Link \n                            to={{\n                              pathname:`/lab-tests/labs/${slugify(lab.labName)}`,\n                              hash:\"#content\",\n                              search: `?search_type=labs&search_value=${lab._id}`\n                            }}\n                            className=\"text-dark\"\n                          >\n                            <h4 className=\"font-weight-semibold mt-1 mb-1\">\n                              {lab.labName}{\" \"}\n                            </h4>\n                          </Link>\n                          <Row style={{ marginLeft: 0, marginTop: 15 }}>\n                            <div \n                              style={{ \n                                height: 65, \n                                width: 65, \n                                padding: 4, \n                                boxShadow: \"2px 1px 4px rgba(0,0,0, 0.3)\",\n                                marginRight: 8 \n                              }}\n                            >\n                              <Suspense>\n                                <Image src={labImage} alt={lab.labName} style={{ height: 61, width: 61 }} roundedCircle/>\n                              </Suspense>\n                            </div>\n                            <div>\n                              <span style={{ fontSize: \"12px\" }}>\n                                <div title=\"lab ratings\" className=\"rati_icon\">\n                                  <IoMdStar size=\"14px\" className=\"ml-1\"/>{lab.averageRating}\n                                </div>\n                                <span className=\"allcomant\" style={{ fontSize: \"10px\", marginLeft: 5 }}>\n                                  <span title=\"total reviews\">{certificatesAvailable ? `(${lab.totalReviews}) | `: `(${lab.totalReviews})`}</span>\n                                  <span title=\"certification\">{`${lab.certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                                </span>\n                                <div title=\"locality\">\n                                  <small>{`${locality ? locality + \", \": \"\"} ${city.name}`}</small>\n                                </div>\n                              </span>\n                            </div>\n                          </Row>\n                          {/* <Row>\n                            <Col><p className=\"test2a\">{`Total Tests Offered: ${lab.testsOffered}`}</p></Col>\n                          </Row> */}\n                        </div>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                )\n              })\n            }\n          </Slider>\n          \n          <div className=\"text-center\">\n            <Link \n              to={{\n                pathname:`/lab-tests/labs`\n              }}\n              title = \"View all labs\"\n              className=\"viewalls\"\n            >\n              { !!labs && !!labs.length ?\"View All\": null }\n            </Link>\n          </div></> : <div className=\"text-center\"> No Tests Partners Labs available in your city</div> }\n        </Container>\n      </section>\n      <section className=\"sptb section-bg\">\n        <Container>\n          <div className=\"section-title center-block text-center\">\n            <h2>Latest Articles</h2>\n          </div>\n          <Row>\n          {\n            articles.map((article) => {\n              const created_by = article.created_by;\n              const created_at = Math.ceil(article.created_at/1000);\n              return (\n                <Col lg={4} md={12} xl={4} key={article._id}>\n                  <Card>\n                    <div className=\"item7-card-img\">\n                      <Link \n                        to={{\n                          pathname:`article/${slugify(article.name)}`,\n                          hash:\"#content\",\n                          search:`?search_type=articles&search_value=${article._id}`\n                        }}\n                      />\n                      <Suspense>\n                        <Image src={`${process.env.REACT_APP_SERVER_URL}/documents/articles/${article.thumbnail}`} alt={article.name} className=\"cover-image article-thumbnail\" />\n                      </Suspense>\n                    </div>\n                    <Card.Body className=\"p-4\" style={{ minHeight: 190 }}>\n                      <span className=\"pull-right\">\n                        <IoMdCalendar className=\"text-muted mr-2\" />\n                        <Moment unix format=\"DD MMM, YYYY\">{created_at}</Moment>\n                      </span>\n                      <Link \n                        to={{\n                          pathname:`article/${slugify(article.name)}`,\n                          search:`?search_type=articles&search_value=${article._id}`\n                        }}\n                        className=\"text-dark\"\n                      >\n                        <h4>{article.name}</h4>\n                      </Link>\n                      <p className=\"fs-13 text-muted\">\n                        { \n                          created_by.name\n                        }\n                      </p>\n                      {HtmlParser(article.description)}\n                      <div className=\"d-flex\" style={{ position: 'absolute', bottom: 0, right: 0 }}>\n                        <div className=\"ml-auto\">\n                          <Link \n                            to={{\n                              pathname:`article/${slugify(article.title)}`,\n                              search:`?search_type=articles&search_value=${article._id}`\n                            }}\n                            data-toggle=\"tooltip\"\n                            data-placement=\"top\"\n                            title={`Share ${article.name}`}\n                          >\n                            <IoMdShareAlt className=\"text-muted mr-2\" />\n                          </Link>\n                        </div>\n                      </div>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              )\n            })\n          }\n          </Row>\n          <div className=\"text-center\">\n            <Link\n              to=\"/article\"\n              title=\"View all Articles\"\n              className=\"viewalls\"\n            >\n              { !!articles && !!articles.length ?\"View All\": null }\n            </Link>\n          </div>\n        </Container>\n      </section>\n      <section className=\"sptb \">\n        <Container>\n          <div className=\"section-title center-block text-center\">\n            <h2>Download Apps</h2>\n            <p>Install Health Kangaroo on your smartphone to access us quickly</p>\n          </div>\n          <Row>\n            <Col md={12}>\n              <div className=\"text-center text-wrap\">\n                <div className=\"btn-list\">\n                  <a href=\"#iphone-app-link\" target=\"_blank\" className=\"btn-lg btn-primary btn mb-sm-0 apple\">\n                    <AiFillApple className=\"fa-1x mr-2\" /> App Store\n                  </a>\n                  <a href=\"#playstore-app-link\" target=\"_blank\" className=\"btn-lg btn-secondary btn mb-sm-0 android\">\n                    <AiFillAndroid className=\"fa-1x mr-2\" /> Google Play\n                  </a>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </section>\n    </>\n  );\n};\n\n\n\nconst mapStateToProps = (state) => ({\n  labTests: state.labTests.labTestsList,\n  loading: state.labTests.loadingLabTestsList,\n  city: state.citySearch.currentCity,\n  habitsData: state.ltCategories.categoryList.data,\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  getLabTestsPage,\n  getMoreCategories,\n  resetComponentStore,\n  createGuestCart,\n  addToCart,\n})(withRouter(PageView));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/CollectionCenter/CollectionCenters.js",["1277"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Container, Card, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { getCollectionCentersList, getSelectedCollectionCenterByCart, updateCartCollectionCenter } from 'actions/customer/collectionCenters';\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport CollectionCenterCard from './CollectionCenterCard';\nimport { FaLongArrowAltRight, FaLongArrowAltLeft } from \"react-icons/fa\";\n\nconst CollectionCenters = ({\n  loading,\n  cart,\n  selectedCollectionCenter,\n  collectionCenterList: { data, count },\n  getCollectionCentersList,\n  getSelectedCollectionCenterByCart,\n  updateCartCollectionCenter,\n  onContinue = () => {},\n  goBack = () => {}\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [hasMore, setMore] = useState(true);\n  const [selected, setSelected] = useState(selectedCollectionCenter);\n  const [action, setAction] = useState(\"deselect\");\n  const [disableBtn, setDisabled] = useState(false);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe) {\n          getCollectionCentersList(listParams);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getCollectionCentersList, listParams]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && cart) {\n          getSelectedCollectionCenterByCart(cart);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getSelectedCollectionCenterByCart, cart])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && selectedCollectionCenter) {\n          setSelected(selectedCollectionCenter);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selectedCollectionCenter])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe) {\n          setMore(data.length !== count);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data, count]);\n\n  const loadNextData = () => {\n    const pageNum = 1; // parseInt(page);\n    if(data.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  const onSelect = (id,action) => {\n    setSelected(id);\n    setAction(action);\n  }\n\n  const onBack = (e) => {\n    e && e.preventDefault();\n    goBack();\n  }\n\n  const onUpdate = (e, id, action) => {\n    e.preventDefault();\n    // if(!id) return onContinue();\n    setDisabled(true);\n    updateCartCollectionCenter(cart, id, action).then((status) => {\n      setDisabled(false);\n      if(status) onContinue();\n    });\n  }\n\n  return (\n    loading ? <Spinner /> : (\n    <section className=\"sptb\">\n      <Card>\n        <Card.Body className=\"pt-0 pr-0 pl-0\">\n          <div id=\"scrollableDiv\" style={{ height: 300, overflow: \"auto\" }}>\n            <InfiniteScroll\n              dataLength={data.length}\n              next={loadNextData}\n              hasMore={data.length == count ? false : hasMore}\n              height={290}\n              loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n            >\n              <Container>\n                {data.length > 0 ?(\n                <CollectionCenterCard \n                  data={data}\n                  listParams = {listParams}\n                  selectable={!!cart} \n                  selected={selected}\n                  select={onSelect}\n                />)\n                : \"No collection Center\"\n                } \n              </Container>\n            </InfiniteScroll>\n          </div>\n        </Card.Body>\n        {\n          !!cart && \n          <div className=\"w-100\">\n            <Col className=\"d-flex justify-content-between mt-3 p-0\">\n              <Button\n                color=\"primary\"\n                className={ \"font-weight-bold\" + (disableBtn ? \"disabled box-shadow \": \"\") }\n                onClick={(e) => onBack(e)}\n              >\n                <FaLongArrowAltLeft /> Back\n              </Button>\n              <Button\n                color=\"primary\"\n                className={ \"font-weight-bold\" + (disableBtn ? \"disabled box-shadow \": \"\")}\n                onClick={(e) => onUpdate(e, selected, action)}\n              >\n                Next <FaLongArrowAltRight />\n              </Button>\n            </Col>\n          </div>\n        }\n      </Card>\n    </section>\n    )\n  )\n}\n\n\nCollectionCenters.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  collectionCenterList: PropTypes.object.isRequired,\n  getCollectionCentersList: PropTypes.func.isRequired,\n  updateCartCollectionCenter: PropTypes.func.isRequired,\n  getSelectedCollectionCenterByCart: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.collectionCenters.loadingCollectionCenterList,\n  collectionCenterList: state.collectionCenters.collectionCenterList,\n  selectedCollectionCenter: state.collectionCenters.selectedCollectionCenter,\n  cartDetails: state.cart.cartDetails,\n  sortingParams: state.collectionCenters.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  updateCartCollectionCenter,\n  getCollectionCentersList,\n  getSelectedCollectionCenterByCart,\n})(withRouter(CollectionCenters));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/List.js",["1278","1279","1280"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Container, Card, Col, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\nimport { \n  getSelectedFamilyByCart,\n  updateCartPatient,\n  getFamilyList, resetComponentStore } from 'actions/customer/family';\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport FamilyCard from './FamilyCard';\n\nconst List = ({\n  getFamilyList,\n  setValidation,\n  getSelectedFamilyByCart,\n  updateCartPatient,\n  resetComponentStore,\n  familyList: { data, count, page },\n  cartDetails: {\n    _id\n  },\n  selectedPatient,\n  loading,\n  history,\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n  const [selected, setSelected] = useState(selectedPatient);\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const cart = query.get(\"cart\") ? query.get(\"cart\") : _id;\n\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getFamilyList(listParams);\n  // }, [getFamilyList, listParams, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getFamilyList(listParams);\n  }, [getFamilyList, listParams, resetComponentStore, setOnce]);\n\n  const loadNextData = () => {\n    const pageNum = 1; // parseInt(page);\n    if(data.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  // useMemo(() => {\n  //   if(cart) {\n  //     getSelectedFamilyByCart(cart);\n  //   }\n  // }, [getSelectedFamilyByCart, cart]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && cart) {\n            getSelectedFamilyByCart(cart);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getSelectedFamilyByCart, cart]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && selectedPatient) {\n          setSelected(selectedPatient);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selectedPatient]);\n\n  const onSelect = (id) => {\n    setSelected(id);\n  }\n\n  const onContinue = (e, id) => {\n    e.preventDefault();\n    if(!id) return alert(\"Please select a patient to continue\");\n    updateCartPatient(cart, id).then((status) => {\n      if(status) setValidation('familyMember');\n    });\n  }\n  \n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Row>\n          <Col>\n            <Card>\n              <Card.Header>\n              <h4 className=\"title\">Do you want to add a new member? </h4>\n                <Link\n                  to={{\n                    pathname:`/members/create`,\n                  }}\n                  className=\"btn btn-primary ml-auto\"\n                >\n                  Add\n                </Link>\n                </Card.Header>\n              <Card.Body>\n                <div style={{ minHeight: 300 }}>\n                  <InfiniteScroll\n                    dataLength={data.length}\n                    next={loadNextData}\n                    hasMore={data.length == count ? false : hasMore}\n                    loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n                  >\n                    <Container>\n                      <FamilyCard \n                        data={data}\n                        selectable={!!cart} \n                        selected={selected}\n                        select={onSelect} \n                      />\n                    </Container>\n                  </InfiniteScroll>\n                </div>\n                {\n                  !!cart && \n                  <Row>\n                    <Col md={4} className=\"text-center ml-auto mr-auto mt-3 p-2\">\n                      <Button\n                        color=\"primary\"\n                        className=\"w-100\"\n                        onClick={(e) => onContinue(e, selected)}\n                      >\n                        Continue\n                      </Button>\n                    </Col>\n                  </Row>\n                }\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  familyList: PropTypes.object.isRequired,\n  getFamilyList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  updateCartPatient: PropTypes.func.isRequired,\n  getSelectedFamilyByCart: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.family.loadingFamilyList,\n  familyList: state.family.familyList,\n  selectedPatient: state.family.selectedPatient,\n  cartDetails: state.cart.cartDetails,\n  sortingParams: state.family.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  updateCartPatient,\n  getSelectedFamilyByCart,\n  getFamilyList,\n  resetComponentStore\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/Details.js",["1281","1282","1283","1284","1285","1286"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter, useLocation } from \"react-router-dom\";\nimport { getOrderByID, resetComponentStore , cancelOrderByID } from \"actions/customer/order\";\nimport Spinner from \"views/Spinner\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport OrderDetails from './OrderDetails';\n\nconst base_url = process.env.REACT_APP_SERVER_URL;\n\nconst Details = ({\n  getOrderByID,\n  currentOrder,\n  loading,\n  history,\n  user,\n  resetComponentStore,\n  cancelOrderByID\n}) => { \n  const [onlyOnce, setOnce] = useState(true);\n  const [data, setData] = useState({\n    _id: '',\n    orderID: '',\n    referredBy: '',\n    lab: '',\n    otp: '',\n    deducted_from_wallet: 0,\n    phlebotomist: '',\n    city: '',\n    customer: '',\n    patient: '',\n    address: '',\n    packages: [],\n    tests: [],\n    locality: '',\n    subTotal: 0,\n    discount: '',\n    tax: 0,\n    homeCollectionCharges: 0,\n    collectionType: \"\",\n    schedule: \"\",\n    totalPayment: 0,\n    paymentMode: \"\",\n    reports: [],\n    invoice: '',\n    products: [],\n    grossAmount: 0,\n    status: 0,\n    addToWallet: 0,\n    created_at: new Date(),\n  });\n\n  const {\n    _id,\n    addToWallet,\n    orderID,\n    referredBy,\n    phlebotomist,\n    city,\n    customer,\n    patient,\n    address,\n    packages,\n    tests,\n    locality,\n    subTotal,\n    discount,\n    tax,\n    homeCollectionCharges,\n    collectionType,\n    schedule,\n    totalPayment,\n    reports,\n    invoice,\n    products,\n    grossAmount,\n    lab,\n    status,\n    created_at,\n    otp,\n    deducted_from_wallet\n  } = data;\n const variables = useLocation()?.state?.variables;\n  const value = variables?._id || window.location.search.split('=')[1];\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getOrderByID(value, history);\n  // }, [getOrderByID, value, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    console.log(onlyOnce , value);\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(onlyOnce) {\n        resetComponentStore();\n        setOnce(false);\n      }\n      if(subscribe && value) {\n        getOrderByID(value, history);\n      }\n    };\n    asyncCall();\n    return () => { subscribe = false; }\n  }, [getOrderByID, value, resetComponentStore, setOnce]);\n\n  const cancelOrder = () => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && value) {\n        cancelOrderByID(orderID);  \n      }\n    };\n    asyncCall();\n    return () => { subscribe = false; }\n  }\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && currentOrder) {\n        const {\n          _id,\n          addToWallet,\n          orderID,\n          reports,\n          invoice,\n          products,\n          grossAmount,\n          status,\n          customerMetadata,\n          cityMetadata,\n          sampleCollection,\n          referredByMetadata,\n          addressMetadata,\n          patientMetadata,\n          phlebotomistMetadata,\n          locality,\n          subTotal,\n          discount,\n          payment,\n          tax,\n          homeCollectionCharges,\n          created_at,\n          deducted_from_wallet,\n          otp,\n        } = currentOrder;\n\n        const lab = {\n          ...currentOrder.lab,\n          ...currentOrder.labMetadata\n        };\n        const packages = [];\n        const tests = [];\n        const { schedule, collectionType } = sampleCollection ?? { \"schedule\": \"\", collectionType: \"\" };\n        const document_path = invoice && invoice.length ? `${base_url}/documents/user/${user?.user._id}/invoice/${invoice[0]}.pdf`: '';\n        products.forEach((item) => {\n          if(item.type === \"package\") {\n            packages.push({\n              _id: item._id,\n              title: item.title,\n              type: item.type,\n              items_included: item.items_included || [],\n              total_items: item.items_included.reduce((acc, test) => acc + test.items.length, item.items_included.length ),\n            });\n          }\n          else if(item.type === \"test\") {\n            tests.push({\n              _id: item._id,\n              title: item.title,\n              type: item.type,\n              items_included: item.items_included || [],\n              total_items: item.items_included.length,\n            });\n          }\n        });\n        setData((order) => ({\n          ...order,\n          _id,\n          orderID,\n          addToWallet,\n          reports,\n          invoice,\n          products,\n          grossAmount,\n          lab,\n          status,\n          currency: CURRENCY_SYMBOL[\"INR\"],\n          invoice: document_path,\n          customer: customerMetadata ?? \"\",\n          patient: patientMetadata ?? \"\",\n          referredBy: referredByMetadata ?? \"\",\n          city: cityMetadata ?? \"\",\n          address: addressMetadata ?? \"\",\n          phlebotomist: collectionType === \"home\" ? phlebotomistMetadata ?? \"\": \"\",\n          totalPayment: grossAmount?? 0,\n          paymentMode: payment? payment?.mode: \"\",\n          packages,\n          tests,\n          locality,\n          subTotal,\n          discount,\n          tax,\n          homeCollectionCharges,\n          collectionType,\n          schedule,\n          created_at,\n          otp,\n          deducted_from_wallet,\n        }));\n      }\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [currentOrder]);\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\">\n      <Container>\n        <Row>\n          <Col>\n            <Card>\n              <Card.Body>\n                <OrderDetails data={{\n                  _id,\n                  user_id: user?.user._id,\n                  orderID,\n                  lab,\n                  status,\n                  grossAmount,\n                  products,\n                  referredBy,\n                  phlebotomist,\n                  cancelOrder : cancelOrder,\n                  city,\n                  customer,\n                  patient,\n                  address,\n                  packages,\n                  tests,\n                  locality,\n                  subTotal,\n                  discount,\n                  tax,\n                  homeCollectionCharges,\n                  addToWallet,\n                  collectionType,\n                  schedule,\n                  totalPayment,\n                  otp,\n                  deducted_from_wallet,\n                  created_at,\n                }} />\n              </Card.Body>\n            </Card>\n            <div className=\"text-center\">\n              <div className=\"w-100\">\n                { !!reports && reports.length > 0 && <a href=\"#\" className=\"order-details-btn m-2 btn btn-primary\" onClick={e => downloadReports(e, _id, lab._id, reports)}>Download Reports</a> }\n              </div>\n              <div className=\"w-100\">\n                { !!invoice && <a \n                  download \n                  className=\"order-details-btn m-2 btn btn-primary\" \n                  href={invoice}\n                >\n                  Download Invoice\n                </a> \n              }\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\nconst downloadReports = (e, order_id, lab_id, reports) => {\n  e.preventDefault();\n  const document_path = `${base_url}/documents/lab/test-reports/${lab_id}/reports/${order_id}/`;\n  reports.map(item => {\n    const end_url = document_path + item;\n    window.open(end_url, \"_blank\");\n  });\n}\n\n\nDetails.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getOrderByID: PropTypes.func.isRequired,\n  cancelOrderByID: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.customerOrders.loadingOrder,\n  user: state.auth.user,\n  currentOrder: state.customerOrders.currentOrder,\n});\n\nexport default connect(mapStateToProps, {\n  getOrderByID,\n  resetComponentStore,\n  cancelOrderByID\n})(withRouter(Details));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/List.js",["1287","1288","1289","1290","1291"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, Tab, Nav } from \"react-bootstrap\";\nimport { Input } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory,  { \n  PaginationProvider,\n} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport { getOrdersList, resetComponentStore } from \"actions/customer/order\";\nimport * as Constants from \"constants/index\";\nimport Spinner from \"views/Spinner\";\nimport OrderCard from \"./OrderCard\";\nimport Filters from \"./Filters\";\n\nconst List = ({\n  getOrdersList,\n  ordersList: { data, count },\n  loading,\n  loadingList,\n  sortingParams,\n  resetComponentStore,\n}) => {\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'created_at',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n\n  const columns = [\n    {\n      dataField: \"orderID\",\n      text: '',\n      formatter: (col, row) => {\n        return (<OrderCard data={row} />)\n      }\n\n    },\n  ];\n\n  const defaultSorted = [\n    {\n      dataField: \"test.name\",\n      order: \"desc\"\n    }\n  ];\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe) {\n        if(onlyOnce) {\n          resetComponentStore();\n          setOnce(false);\n        }\n        getOrdersList(listParams);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getOrdersList, listParams, resetComponentStore, setOnce])\n\n  const options = {\n    page: parseInt(listParams.page),\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    lastPageText: 'Last',\n    withFirstAndLast: true,\n    // alwaysShowAllBtns: true, // Always show next and previous button\n    hideSizePerPage: true, // Hide the sizePerPage dropdown always\n    hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n    hideSizePerPageRenderer: true,\n    showTotal: false,\n    totalSize: count,\n    paginationTotalRenderer: () => { return null },\n    // sizePerPageRenderer,\n    // sizePerPageOptionRenderer: true,\n  };\n\n\n  const handleTableChange = (\n    type,\n    { page }\n  ) => {\n    let params = {\n      ...sortingParams,\n      page: type === \"search\" ? 1 : page,\n    };\n    setListParams(params);\n  };\n\n  const onFilterChange = (name, value, newParams) => {\n    setListParams((params) => ({ ...params, ...newParams }));\n  }\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Row>\n          <Col xl={3} lg={3} md={12}>\n            <Card className=\"card\">\n              <Card.Header className=\"card-header\">\n                <h3 className=\"card-title\">Filter By</h3>\n              </Card.Header>\n              <div className=\"filt_new new_type\">\n                <Filters\n                  type=\"textSelect\"\n                  filter=\"category=category\"\n                  filterType=\"object\"\n                  filterName=\"Category\"\n                  isMulti={false}\n                  filterParams={listParams}\n                  onFilterChange={onFilterChange}\n                  selectFilterOptions={[{\n                    value: \"lab-test\",\n                    label: \"Lab Orders\",\n                  }, {\n                    value: \"medicine\",\n                    label: \"Medicine Orders\",\n                  }, {\n                    value: \"nursing-services\",\n                    label: \"Nursing Services\",\n                  }, {\n                    value: \"health-food\",\n                    label: \"Health & Food Orders\",\n                  }, {\n                    value: \"others\",\n                    label: \"Other Orders\",\n                  }]}\n                />\n                <Filters\n                  type=\"date\"\n                  filter=\"time_range=created_at\"\n                  filterType=\"object\"\n                  filterName=\"Order Date\"\n                  filterParams={listParams}\n                  onFilterChange={onFilterChange}\n                />\n                <Filters\n                  type=\"textSelect\"\n                  filter=\"status=status\"\n                  filterType=\"object\"\n                  filterName=\"Order Status\"\n                  isMulti={false}\n                  filterParams={listParams}\n                  onFilterChange={onFilterChange}\n                  selectFilterOptions={[{\n                    value: \"all\",\n                    label: \"All\",\n                  }, {\n                    value: \"complete\",\n                    label: \"Completed\",\n                  }, {\n                    value: \"pending\",\n                    label: \"Pending\",\n                  }, {\n                    value: \"hold\",\n                    label: \"Hold\",\n                  }, {\n                    value: \"cancelled\",\n                    label: \"Cancelled\",\n                  }]}\n                />\n              </div>\n            </Card>\n          </Col>\n          <Col xl={9} lg={9} md={12}>\n            <Card className=\"mb-0\">\n              <Card.Header>\n                <h3 className=\"card-title\">\n                  Orders\n                </h3>\n              </Card.Header>\n              <Card.Body className=\"order_list\">\n                <PaginationProvider\n                  pagination={paginationFactory(options) }\n                  keyField=\"_id\"\n                  columns={columns}\n                  data={data}\n                >\n                {\n                  ({\n                    paginationProps,\n                    paginationTableProps,\n                  }) => \n                    <ToolkitProvider\n                      keyField=\"_id\"\n                      data={data}\n                      columns={columns}\n                    >\n                      {\n                        toolkitprops => (\n                        <>\n                          <BootstrapTable\n                            {...toolkitprops.baseProps}\n                            bootstrap4\n                            remote={{ pagination: count > 0 }}\n                            keyField=\"_id\"\n                            data={data}\n                            columns={columns}\n                            loading={loadingList}\n                            {...paginationTableProps}\n                            onTableChange={handleTableChange}\n                            defaultSorted={defaultSorted}\n                            noDataIndication={Constants.NO_RECORD}\n                            bordered={false}\n                            overlay={ overlayFactory({ \n                                spinner: true, \n                                styles: { overlay: (base) => ({...base, background: 'rgba(192,192,192,0.7)'}) } \n                              }) \n                            }\n                          />\n                        </>\n                      )}\n                    </ToolkitProvider>\n                }\n                </PaginationProvider>\n              </Card.Body>\n            </Card>\n            \n          </Col>\n        </Row>\n      </Container>\n    </section>\n  )\n}\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getOrdersList: PropTypes.func.isRequired,\n  ordersList: PropTypes.object.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.customerOrders.loadingOrder,\n  loadingList: state.customerOrders.loadingOrdersList,\n  ordersList: state.customerOrders.ordersList,\n  sortingParams: state.customerOrders.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  getOrdersList,\n  resetComponentStore,\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/health_record.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderCard.js",["1292","1293","1294","1295","1296","1297","1298"],"import React , { Suspense } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Rating from \"utils/Rating\";\nimport { Image } from \"react-bootstrap\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport * as Constants from \"constants/index\";\n\nconst OrderCard = ({ data }) => {\n  if(!data || typeof(data) !== \"object\") return null;\n  const {\n    _id,\n    lab,\n    amount,\n    tax,\n    subTotal,\n    homeCollectionCharges,\n    totalDiscount,\n    orderID,\n    testsOrdered,\n    status,\n    reports,\n  } = data;\n\n  const downloadFiles = (e, order_id, lab_id, reports) => {\n    e.preventDefault();\n    const base_url = process.env.REACT_APP_SERVER_URL;\n    const document_path = `${base_url}/documents/lab/${lab_id}/reports/${order_id}/`;\n    reports.map(item => {\n      const end_url = document_path + item._id;\n      window.open(end_url, \"_blank\");\n    });\n  }\n  \n  const currency = CURRENCY_SYMBOL[\"INR\"];\n  return (\n    <div className=\"mb-4\" key={_id} style={{ position: \"relative\" }}>\n      <div className=\"list_new\">\n        <div className=\"item-card2\">\n          <Link \n            className=\"text-dark\"\n            to={{ \n              pathname: `/orders/${orderID}?orderId=${_id}`,\n              state: { variables: { _id } }\n            }}\n          >\n            <h4 className=\"font-weight-semibold mt-1 mb-1\">\n              #{orderID}\n            </h4>\n          </Link>\n          <p className=\"ordered-tests-list\"><small className=\"text-muted\">{\n            !!testsOrdered && testsOrdered.map(test => (\n              test.title + (test.total_tests > 0 ? `(${test.total_tests})`: '')\n              )).join(\", \")\n          }</small></p>\n          <p className=\"text-muted fs-13 mb-1 pricebox\">\n            <span>{isNaN((amount || 0)) ? null: `${currency} ${(amount || 0)}` }</span>\n          </p>\n          <p className=\"order-status\">\n            <span className={`badge badge-pill ${Constants.ORDER_LABEL_COL[status]}`}>{Constants.ORDER_LABEL[status]}</span>\n          </p>\n          { !!lab && \n            <div className=\"part_lat d-flex remove_float\">\n              <div className=\"m-1\">\n                <Suspense>\n                  <Image src={lab.labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${lab.labImage}`: DefaultLabImage } alt={lab.labName} rounded/>\n                </Suspense>\n              </div>\n              <div>\n                <span>\n                  <u>{lab.labName}</u>\n                </span>\n                <div title=\"lab ratings\">\n                  <Rating \n                    ratings={lab.averageRating} \n                    fontSize={14} \n                  />\n                </div>\n                <div>\n                  <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n                    <span title=\"total reviews\">{lab.certificates.length ? `(${lab.totalReviews}) | `: `(${lab.totalReviews})`}</span>\n                    <span title=\"certification\">{`${lab.certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                  </span>\n                  { !!lab.reports && lab.reports.length && <a onClick={(e) => downloadFiles(e, _id, lab._id, lab.reports) }className=\"report\">Report</a> }\n                </div>\n              </div>\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default OrderCard;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/Add.js",["1299","1300"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { create, loadPage, resetComponentStore, setErrors, removeErrors, cancelSave } from 'actions/customer/family';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport { validateForm } from \"utils/validation\";\nimport 'react-phone-number-input/style.css';\nimport {isValidPhoneNumber} from 'react-phone-number-input';\nimport moment from \"moment\";\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport validateUtility from \"../../plugins/validateUtility\";\nconst Add = ({\n  loading,\n  create,\n  resetComponentStore,\n  loadPage,\n  setErrors,\n  removeErrors,\n  cancelSave,\n  history,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    name: \"\",\n    dob: \"\",\n    gender: \"\",\n    email: \"\",\n    ccode:\"+91\",\n    phone: \"\",\n    iute164_phone:\"+91\",\n  };\n\n  const [formData, setFormData] = useState(initialState);\n\n  const {\n    name,\n    gender,\n    dob,\n    email,\n    ccode,\n    phone,\n    iute164_phone,\n  } = formData;\n\n  //########################## change event for all inputs ##############################\n  const onChange =  e => {\n    const { name, value } = e.target;\n    switch(name) {\n      case \"phone\":\n        setFormData({ \n          ...formData, \n          iute164_phone: ccode+value,\n          [name]: value,\n        });\n        break;\n      default:\n        setFormData({ \n          ...formData, \n          [name]: allowOnlyOneSpace(value),\n        });\n    }\n  };\n\n\n  const onSelectDOB = (e, date_picker) => {\n    const dob = date_picker.startDate.format(\"DD-MM-YYYY\");\n    setFormData((form) => ({\n      ...form,\n      dob,\n    }));\n  }\n\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(formData, [\n      {\n        param:\"name\",\n        msg: 'Please provide the member name.',\n      },\n      {\n        param:'dob',\n        msg:'Please provide the date of birth of member.',\n      },\n      {\n        param:'gender',\n        msg:'Please select the gender of member.',\n      },\n      {\n        param:'ccode',\n        msg:'Please provide a valid phone number',\n        actualParam:'phone'\n      },\n      {\n        param:'phone',\n        cond:isValidPhoneNumber,\n        value: iute164_phone,\n        msg:'Please provide a valid phone number',\n      },\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { };\n    for(let i in formData){\n      if(!formData[i] || excludeList[i]) continue;\n      submitData[i] = formData[i];\n    }\n    create(submitData, history);\n  };\n\n  const onCancel = (e) => {\n    e.preventDefault();\n    cancelSave(history);\n  }\n\n  const allowOnlyOneSpace = str => {\n    return str.endsWith(\" \") ? str.trim() + \" \" : str.trim();\n  };\n  useEffect(() => {\n    loadPage();\n    resetComponentStore();\n  }, []);\n\n  return (\n    loading ? <Spinner />:\n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={12}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"name\">\n                        <Form.Label>Name <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          value={name}\n                          name=\"name\"\n                          data-vu-type = \"alphawithspace\"\n                          onChange={onChange}\n                          onKeyDown={ (e) => validateUtility.stopDefault(e)}\n                          maxLength={50}\n                        />\n                        <Errors key=\"name\" current_key=\"name\" />\n                      </Form.Group>\n                      <Form.Group controlId=\"phone\">\n                        <Form.Label>Phone <span>*</span></Form.Label>\n                        <Form.Control\n                          value={phone}\n                          name=\"phone\"\n                          onChange={onChange}\n                          placeholder=\"XXXXXXXXXX\"\n                          maxLength={10}\n                          minLength={10}\n                        />\n                        <Errors current_key=\"phone\" key=\"phone\" />\n                      </Form.Group>\n                      <Row>\n                        <Col>\n                          <Form.Group controlId=\"dob\">\n                            <Form.Label>DOB <span>*</span></Form.Label>\n                            <DateRangePicker\n                              singleDatePicker={true}\n                              showDropdowns={true}\n                              onApply={(e, picker) => onSelectDOB(e, picker)}\n                              minYear={1901}\n                              maxDate={moment(Date.now())}\n                              autoApply={true}\n                            >\n                              <Form.Control\n                                className=\"py-2 bg-white border-right-0 border-custom\"\n                                type=\"text\"\n                                maxLength=\"10\"\n                                name=\"dob\"\n                                readOnly\n                                value={dob}\n                                placeholder=\"select date of birth\"\n                              />\n                            </DateRangePicker>\n                          </Form.Group>\n                        </Col>\n                        <Col>\n                        <Form.Group controlId=\"gender\">\n                          <Form.Label>Gender <span>*</span></Form.Label>\n                          <Form.Control \n                            as=\"select\"\n                            value={gender}\n                            name=\"gender\"\n                            onChange={onChange}\n                          >\n                            <option value=\"n\">Select Gender</option>\n                            <option value=\"m\">Male</option>\n                            <option value=\"f\">Female</option>\n                          </Form.Control>\n                          <Errors key=\"type\" current_key=\"type\" />\n                        </Form.Group>\n                        </Col>\n                      </Row>\n                      <Form.Group controlId=\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control\n                          type=\"email\"\n                          name=\"email\"\n                          value={email}\n                          onChange={onChange}\n                          onKeyDown={ (e) => e.which == 32 && e.preventDefault()}\n                          placeholder=\"example@mail.com\"\n                        />\n                        <Form.Text id=\"emailHelpBlock\" muted>\n                          Provided email will be used to send test reports.\n                        </Form.Text>\n                        <Errors current_key=\"email\" key=\"email\" />\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup>\n                    <Button \n                      type=\"submit\"\n                      variant=\"success\"\n                      className=\"mr-2\"\n                    >\n                      Save\n                    </Button>\n                    <Button \n                      type=\"reset\"\n                      onClick={onCancel}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n  )\n}\n\n\nAdd.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  create: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.family.loadingFamily,\n  user: state.auth.user,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  loadPage,\n  create,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n})(withRouter(Add));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderReview.js",["1301","1302"],"import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { Row, Col, Card, Container, Button } from \"react-bootstrap\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { getCartOrder, placeOrder } from \"actions/order/order\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport { getCartDetails } from \"actions/cart/cart\";\n\nconst OrderReview = ({\n  addShowClass,\n  setValidation,\n  placeOrder,\n  getCartOrder,\n  getCartDetails,\n  loading,\n  orderDetails: {\n    products,\n    subTotal,\n    tax,\n    discount,\n    sampleCollection,\n    homeCollectionCharges,\n    lab,\n    grossAmount,\n    address,\n    patient,\n    coupon,\n  },\n}) => {\n\n  const [cartId, setCartId] = useState(null);\n\n  useEffect(() => {\n     getCartDetails().then((res) => {\n      const cartid = res._id;\n      setCartId(cartid);\n      getCartOrder(cartid);\n    });\n  }, []);\n\n  const averageRatings = () => {\n    const ratingStars = [];\n    for (var i = 0; i < lab?.averageRating; i++) {\n      ratingStars.push(\n        <i className=\"fa fa-star\" aria-hidden=\"true\" key={i}></i>\n      );\n    }\n    return ratingStars;\n  };\n\n  const onContinue = (e) => {\n    e.preventDefault();\n    placeOrder().then((res) => {\n      if(res) setValidation('orderCreated');\n    });\n  }\n  return <>\n      {products ? (\n        <section class=\"sptb\">\n          <Container>\n            <Row>\n              <Col lg={12} md={12}>\n                <Card className=\"overflow-hidden\">\n                  <div className=\"d-md-flex\">\n                    <Row>\n                      <Col md={12}>\n                        <Card.Body>\n                          <div className=\"item-card9 blo\">\n                            <a className=\"text-dark\">\n                              <h4 className=\"font-weight-bold mt-1 mb-2\">\n                                {lab?.labName}\n                                &nbsp;\n                                <i\n                                  class=\"fa fa-check-circle\"\n                                  aria-hidden=\"true\"\n                                ></i>\n                              </h4>\n                            </a>\n                            <div className=\"changed\">\n                              {averageRatings()}&nbsp;\n                              <span>\n                                <span>{lab?.totalReviews} |</span>\n                                {lab?.certificates.map((certificate) => {\n                                  return (\n                                    <span>\n                                      {\" \"}\n                                      {certificate.certificateName},{\" \"}\n                                    </span>\n                                  );\n                                })}\n                              </span>\n                            </div>\n                            <span class=\"text-muted fs-13 mt-0\">\n                              includes 6 Tests\n                            </span>\n                            {products?.map((product) => {\n                              return (\n                                <div className=\"item-card9-desc mb-2 mt-1 test_list\">\n                                  <span class=\"mr-4\">\n                                    {product.title}{\" \"}\n                                    <u>{`${CURRENCY_SYMBOL.INR} ${product.price}`}</u>\n                                  </span>\n                                </div>\n                              );\n                            })}\n                            {coupon ? (\n                              <div className=\"item-card9-desc mb-2 mt-1\">\n                                <span className=\"mr-4\">\n                                  {coupon.code} <u>Applied</u>\n                                </span>\n                                <p>{coupon.description}</p>\n                              </div>\n                            ) : null}\n                            <div class=\"item-card9-desc mb-2 mt-1\">\n                              <span class=\"mr-4\">\n                                {sampleCollection.collectionType} Sample Pick Up\n                                Time <u><Link to=\"#\" onClick={() =>addShowClass('sampleCollection')}>Edit</Link></u>{\" \"}\n                              </span>\n                              <p>\n                                {moment(\n                                  sampleCollection.schedule.slot[0],\n                                  \"hh\"\n                                ).format(\"LT\")}{\" \"}\n                                -{\" \"}\n                                {moment(\n                                  sampleCollection.schedule.slot[1],\n                                  \"hh\"\n                                ).format(\"LT\")}\n                              </p>\n                            </div>\n\n                            <div class=\"item-card9-desc mb-2 mt-1\">\n                              <span class=\"mr-4\">\n                                Patient Details <u><Link to=\"#\" onClick={() => addShowClass('patientDetials')}>Edit</Link></u>{\" \"}\n                              </span>\n                              <p>{patient.name}</p>\n                            </div>\n\n                            <div class=\"item-card9-desc mb-2 mt-1\">\n                              <span class=\"mr-4\">\n                                Address Details{\" \"}\n                                <u>\n                                  <Link to=\"#\" onClick={() =>addShowClass('addressDetails')}>\n                                    Edit\n                                  </Link>\n                                </u>{\" \"}\n                              </span>\n                              <p>\n                                {address.address}\n                                <br /> {address.zip_code}\n                              </p>\n                            </div>\n                          </div>\n                {\n                  !!cartId && \n                  <Row>\n                    <Col md={4} className=\"text-center ml-auto mr-auto mt-3 p-2\">\n                      <Button\n                        color=\"primary\"\n                        className=\"w-100\"\n                        onClick={(e) => onContinue(e)}\n                      >\n                        Continue\n                      </Button>\n                    </Col>\n                  </Row>\n                }\n                        </Card.Body>\n                      </Col>\n                    </Row>\n                  </div>\n                </Card>\n              </Col>\n            </Row>\n          </Container>\n        </section>\n      ) : (\n        <h1> Cart Is Empty </h1>\n      )}\n    </>\n};\n\nOrderReview.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.order.loadingOrderDetails,\n  orderDetails: state.order.orderDetails,\n});\n\nexport default connect(mapStateToProps, {\n  getCartOrder,\n  getCartDetails,\n  placeOrder\n})(withRouter(OrderReview));\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/List.js",["1303","1304","1305"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Container, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { getLabsList, resetComponentStore } from 'actions/customer/labs';\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport LabCard from './LabCardComponent';\n\nconst List = ({\n  getLabsList,\n  resetComponentStore,\n  labList: { data, count, page },\n  city,\n  labCity,\n  loading\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [hasMore, setMore] = useState(true);\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getLabsList(listParams);\n  // }, [getLabsList, listParams, city, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getLabsList(listParams);\n  }, [getLabsList, listParams, city, resetComponentStore, setOnce]);\n\n  const loadNextData = () => {\n    const pageNum = parseInt(page);\n    if(data.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n\n  return (\n    loading ? <Spinner /> : \n    <section className=\"sptb \" id=\"content\">\n      \n        <InfiniteScroll\n          dataLength={data.length}\n          next={loadNextData}\n          hasMore={data.length == count ? false : hasMore}\n          loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Hey! There is no more labs.</b>\n            </p>\n          }\n        >\n          <Container>\n            <div className=\"item-search-tabs rightsec\">\n              <ul className=\"top_cat banner_sec\">\n\t\t\t\t\t    <Col xl={12} lg={12} md={12}>\n\t\t\t\t\t\t    <div class=\" mb-lg-0\">\n\t\t\t\t\t\t\t    <Row>\n              <LabCard data={data} labCity={labCity} />\n                   </Row>\n                </div>\n              </Col>\n            </ul>\n            </div>\n          </Container>\n        </InfiniteScroll>\n    </section>\n  )\n}\n\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  labList: PropTypes.object.isRequired,\n  getLabsList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.labs.loadingLabs,\n  labList: state.labs.labList,\n  sortingParams: state.labs.sortingParams,\n  city: state.citySearch.currentCity,\n  labCity: state.labs.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  getLabsList,\n  resetComponentStore\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/Details.js",["1306","1307","1308","1309","1310","1311","1312","1313","1314","1315"],"import React, { useEffect, useMemo, useState, Suspense } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col, Container, Card, ListGroup, Image, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\nimport { getLabByID, resetComponentStore } from \"actions/customer/labs\";\nimport Spinner from \"views/Spinner\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport HtmlParser from \"utils/HtmlParser\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport Rating from \"utils/Rating\";\nimport slugify from \"react-slugify\";\nimport ISO from \"assets/images/iso.png\";\nimport NABL from \"assets/images/nabl.png\";\nimport CAP from \"assets/images/cap.png\";\nimport { FaEye, FaCartPlus, FaShoppingCart } from \"react-icons/fa\";\nimport { addToCart, createGuestCart } from \"actions/cart/cart\";\nimport Moment from \"react-moment\";\nimport { IoMdStar } from \"react-icons/io\";\nimport ReactTooltip from \"react-tooltip\";\n\n\nconst defaultCertsImg = {\n  \"ISO\": ISO,\n  \"NABL\": NABL,\n  \"CAP\": CAP,\n};\n\nconst Details = ({\n  getLabByID,\n  currentLab,\n  loading,\n  currentCity,\n  resetComponentStore,\n  isAuthenticated,\n  addToCart,\n  createGuestCart,\n}) => {\n\n  const [onlyOnce, setOnce] = useState(true);\n  const [labData, setData] = useState({\n    _id,\n    labName: '',\n    labImage: '',\n    address: {},\n    description: '',\n    averageRating: 0,\n    totalReviews: 0,\n    totalTests: 0,\n    certificates: [],\n    popularTests: [],\n    popularPackags: [],\n    labReviews: [],\n  });\n\n  const {\n    _id,\n    labName,\n    labImage,\n    description,\n    address,\n    averageRating,\n    totalReviews,\n    totalTests,\n    certificates,\n    popularTests,\n    popularPackags,\n    labReviews,\n  } = labData;\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const value = query.get(\"search_value\");\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getLabByID(value);\n  // }, [getLabByID, value, currentCity, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(onlyOnce) {\n        resetComponentStore();\n        setOnce(false);\n      }\n      if(subscribe && value) {\n        getLabByID(value);\n      }\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [getLabByID, value, currentCity, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      if(subscribe && currentLab) {\n        const {\n          _id,\n          labName,\n          labImage,\n          averageRating,\n          totalReviews,\n          certificates,\n          address,\n          testsOffered,\n          description,\n          labTests,\n          labPackages,\n          labReviews,\n        } = currentLab;\n\n        const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n        setData((lab) => ({\n          ...lab,\n          _id,\n          labName,\n          certificates,\n          address,\n          labImage: labImageURL,\n          description,\n          averageRating,\n          totalReviews,\n          totalTests: testsOffered,\n          popularTests: [...labTests],\n          popularPackags: [...labPackages],\n          labReviews,\n        }))\n      }\n    };\n    asyncCall();\n\n    return () => { subscribe = false; }\n  }, [currentLab]);\n\n  const [packagesData, setPackages] = useState({\n    packs: [],\n    disabled: '',\n  });\n\n  const {\n    packs,\n    disabled,\n  } = packagesData;\n\n  // useEffect(() => {\n  //   let subscribe = true;\n  //   async function asyncCall() {\n  //     if(subscribe &&  data && data.length) {\n  //       setPackages((packsData) => ({ ...packsData, packs: data }));\n  //     }\n  //   }\n  //   asyncCall();\n  //   return () => subscribe = false;\n  // }, [data])\n  \n  const addItem = (e, item_id, item_type, lab, pack) => {\n    e.preventDefault();\n    // if(!isAuthenticated) history.push(\"/login\");\n    let items = packs;\n    const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n    // if(changeLab) productData.changeLab = changeLab;\n    setPackages((data) => ({...data, disabled: item_id }));\n    if (isAuthenticated) {\n      addToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n        }\n        setPackages((data) => ({ ...data, packs: items, disabled: '' }));\n      });  \n    } else {\n      const guestCart = createGuestCart({ \n        ...productData, \n        ...pack\n      });\n      if (guestCart) {\n        items = items.map((item) => ({ ...item, isInCart: item._id === item_id ? 1: item.isInCart }));\n      }\n      else {\n        console.log(\"product not added\");\n      }\n      setPackages((data) => ({ ...data, packs: items, disabled: '' }));\n    }\n  }\n  \n  return (\n    /* Section */\n    loading ? <Spinner /> : \n    <section className=\"sptb\">\n      <Container>\n        <Row>\n          <Col xl={3} md={3}>\n            <Card>\n              <Card.Body className=\" item-user\">\n                <div className=\"profile-pic mb-0\">\n                  <div className=\" text-left\">\n                    <div className=\"ml-4\">\n                      <div className=\"lab_single\">\n                        <Image src={labImage} alt={labName} />\n                      </div>\n                      <div className=\"nky\">\n                        <a href=\"#\" className=\"text-dark\">\n                          <h4 className=\"mt-3 mb-1 font-weight-bold\">\n                            {labName}\n                            <i className=\"ion-checkmark-circled  text-success fs-14 ml-1\"></i>\n                          </h4>\n                        </a>\n                        <div\n                          title=\"lab ratings\"\n                          className=\"rati_icon\"\n                          style={{ \"marginRight\": \"5px\" }}\n                        >\n                          <IoMdStar size=\"14px\" className=\"ml-1\" />\n                          {averageRating}\n                        </div>\n                        <span className=\"allcomant\">\n                          {certificates.length\n                            ? `(${totalReviews}) | `\n                            : `(${totalReviews})`}\n                          {`${certificates\n                            .map((cert) => cert.certificateName)\n                            .join(\", \")}`}\n                        </span>\n                        <h5>\n                          <div>\n                            {address.locality\n                              ? `${address.locality}, ${address?.city?.city}`\n                              : address?.city?.city}\n                          </div>\n                          <div>\n                            <span>\n                              {totalTests ? (\n                                <>\n                                  Total Test: <b>{totalTests}</b>\n                                </>\n                              ) : null}{\" \"}\n                            </span>\n                          </div>\n                        </h5>\n                      </div>\n\n                      <ul className=\"certifi\">\n                        {certificates.map((cert, index) => {\n                          const certName = cert.certificateName.toUpperCase();\n                          const certImg = defaultCertsImg[certName];\n                          return (\n                            <li key={`certificate_${index}`}>\n                              <Suspense>\n                                <Image\n                                  style={{ \"marginRight\": \"10px\" }}\n                                  src={certImg}\n                                  alt={certName}\n                                />\n                              </Suspense>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      <div className=\"my_list\">\n                        <p>{HtmlParser(description)}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card.Body>\n            </Card>\n          </Col>\n\n          <Col xl={9} md={9}>\n            {popularTests && popularTests.length > 0 ? (\n              <Card>\n                <Card.Body className=\"labsss\">\n                  <Card.Header>\n                    <Card.Title>Tests offered by {labName}</Card.Title>\n                  </Card.Header>\n\n                  <ul className=\"new_page\" style={{ width: \"100%\" }}>\n                    {popularTests.map((item) => {\n                      // const { test, price, isInCart, type } = item;\n                      // const currency = CURRENCY_SYMBOL[price.currency];\n                      const { test, listing_price, MRP, discount, isInCart, type } = item;\n                      const listing_price_currency = CURRENCY_SYMBOL[listing_price.currency];\n                      const MRP_currency = CURRENCY_SYMBOL[MRP.currency];\n                      const discountLabel = (\n                        `\n                        <div class=\"container\" style=\"box-shadow: 1px 1px 1px 1px grey; padding:10px; width : 270px; background-color: white;\">\n                          <div class=\"row\" style=\"display: flex; width: 260px;\">\n                            <div class=\"col-8\">\n                              <span>\n                                Price(exclusive taxes)\n                              </span>\n                            </div>\n                            <div class=\"col text-left\">\n                              <span>\n                              ${MRP_currency} ${MRP.amount}\n                              </span>\n                            </div>\n                          </div>\n                          <div class=\"row\" style=\"display: flex; width: 260px;\">\n                            <div class=\"col-8\">\n                              <span>\n                                Selling Price\n                              </span>\n                            </div>\n                            <div class=\"col text-left\">\n                              <span>\n                              ${listing_price_currency} ${listing_price.amount}\n                              </span>\n                            </div>\n                          </div>\n                          <div class=\"row\" style=\"border-top: 1px dotted black; display: flex; width: 240px; margin-top : 8px; margin : 8px; margin-left : 2px;\">\n                            <div class=\"col text-center\">\n                              <span >\n                                You Save ${listing_price_currency} ${MRP.amount-listing_price.amount} (${discount}%)\n                              </span>\n                            </div>\n                          </div>\n                        </div>`\n                      );\n                    \n                      return (\n                        <li key={item._id}>\n                          <Link\n                            to={{\n                              pathname: `/lab-tests/${test.type}s/${slugify(\n                                test.name\n                              )}`,\n                              search: `?search_type=${test.type}&search_value=${test._id}`,\n                            }}\n                            className=\"text-dark\"\n                          >\n                            <h4>{test.name}</h4>\n                          </Link>\n                          <span>\n                            {`${listing_price_currency} ${listing_price.amount}`}/-{\" \"}\n                            <del>\n                              {discount ? `${MRP_currency} ${MRP.amount}` : null}\n                            </del>{\" \"}\n                            <br></br>\n                              { discount && discount > 0 ?\n                              <> \n                                <span>\n                                  <sup>\n                                    <h5\n                                        data-for=\"helper\"\n                                        // data-type=\"light\"\n                                        data-tip={discountLabel}\n                                        data-html={true}\n                                        data-iscapture=\"true\"\n                                        data-text-color=\"black\"\n                                        data-background-color=\"#fff\"\n                                    >{`Flat ${discount}% Off`}\n                                    </h5>\n                                  </sup>\n                                </span>\n                                <ReactTooltip\n                                  className=\"tooltip\"\n                                  id=\"helper\"\n                                  place=\"right\"\n                                  effect=\"float\"\n                                  multiline={true}\n                                />\n                              </>\n                              :null\n                              }\n                          </span>\n                          <div className=\"new_cha\">\n                            {isInCart === 1 ? (\n                              <Link\n                                to={{\n                                  pathname: \"/cart\",\n                                  hash: \"#content\",\n                                }}\n                                className=\"btn btn-primary\"\n                              >\n                                <FaShoppingCart className=\"mr-1\" />\n                                Go To Cart\n                              </Link>\n                            ) : (\n                              <Button\n                                onClick={(e) =>\n                                  addItem(e, test._id, test.type, _id, {\n                                    price: discount,\n                                    name: test.name,\n                                  })\n                                }\n                                disabled={disabled === test._id}\n                              >\n                                <FaCartPlus className=\"mr-1\" />\n                                Add To Cart\n                              </Button>\n                            )}\n                          </div>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </Card.Body>\n                <Card.Footer>\n                  <div className=\"text-center\">\n                    <Link\n                      className=\"btn btn-primary views\"\n                      to={{\n                        pathname: `/lab-tests/labs/${slugify(labName)}/tests`,\n                        search: `?search_type=test&search_value=${value}&search_title=Tests-Offered-By`,\n                      }}\n                    >\n                      View All\n                    </Link>\n                  </div>\n                </Card.Footer>\n              </Card>\n            ) : null}\n            {popularPackags && popularPackags.length > 0 ? (\n              <Card>\n                <Card.Header>\n                  <Card.Title>Packages offered by {labName}</Card.Title>\n                </Card.Header>\n                <Card.Body className=\"labsss\">\n                  <ul className=\"new_page\" style={{ width: \"100%\" }}>\n                    {popularPackags.map((item) => {\n                      // const { test, price, isInCart, type } = item;\n                      // const currency = CURRENCY_SYMBOL[price.currency];\n                      const { test, listing_price, MRP, discount, isInCart, type } = item;\n                      const listing_price_currency = CURRENCY_SYMBOL[listing_price.currency];\n                      const MRP_currency = CURRENCY_SYMBOL[MRP.currency];\n                      const discountLabel = (\n                        `\n                        <div class=\"container\" style=\"box-shadow: 1px 1px 1px 1px grey; padding:10px; width : 270px; background-color: white;\">\n                          <div class=\"row\" style=\"display: flex; width: 260px;\">\n                            <div class=\"col-8\">\n                              <span>\n                                Price(exclusive taxes)\n                              </span>\n                            </div>\n                            <div class=\"col text-left\">\n                              <span>\n                              ${MRP_currency} ${MRP.amount}\n                              </span>\n                            </div>\n                          </div>\n                          <div class=\"row\" style=\"display: flex; width: 260px;\">\n                            <div class=\"col-8\">\n                              <span>\n                                Selling Price\n                              </span>\n                            </div>\n                            <div class=\"col text-left\">\n                              <span>\n                              ${listing_price_currency} ${listing_price.amount}\n                              </span>\n                            </div>\n                          </div>\n                          <div class=\"row\" style=\"border-top: 1px dotted black; display: flex; width: 240px; margin-top : 8px; margin : 8px; margin-left : 2px;\">\n                            <div class=\"col text-center\">\n                              <span >\n                                You Save ${listing_price_currency} ${MRP.amount-listing_price.amount} (${discount}%)\n                              </span>\n                            </div>\n                          </div>\n                        </div>`\n                      );\n                    \n                      return (\n                        <li key={item._id}>\n                          <Link\n                            to={{\n                              pathname: `/lab-tests/${test.type}s/${slugify(\n                                test.name\n                              )}`,\n                              search: `?search_type=${test.type}&search_value=${test._id}`,\n                            }}\n                            className=\"text-dark\"\n                          >\n                            <h4>{test.name}</h4>\n                          </Link>\n                          <span>\n                            {`${listing_price_currency} ${listing_price.amount}`}/-{\" \"}\n                            <del>\n                              {discount ? `${MRP_currency} ${MRP.amount}` : null}\n                            </del>{\" \"}\n                            <br></br>\n                              { discount && discount > 0 ?\n                              <> \n                                <span>\n                                  <sup>\n                                    <h5\n                                        data-for=\"helper\"\n                                        // data-type=\"light\"\n                                        data-tip={discountLabel}\n                                        data-html={true}\n                                        data-iscapture=\"true\"\n                                        data-text-color=\"black\"\n                                        data-background-color=\"#fff\"\n                                    >{`Flat ${discount}% Off`}\n                                    </h5>\n                                  </sup>\n                                </span>\n                                <ReactTooltip\n                                  className=\"tooltip\"\n                                  id=\"helper\"\n                                  place=\"right\"\n                                  effect=\"float\"\n                                  multiline={true}\n                                />\n                              </>\n                              :null\n                              }\n                          </span>\n                          <div className=\"new_cha\">\n                            {isInCart === 1 ? (\n                              <Link\n                                to={{\n                                  pathname: \"/cart\",\n                                  hash: \"#content\",\n                                }}\n                                className=\"btn btn-primary\"\n                              >\n                                <FaShoppingCart className=\"mr-1\" />\n                                Go To Cart\n                              </Link>\n                            ) : (\n                              <Button\n                                onClick={(e) =>\n                                  addItem(e, test._id, test.type, _id, {\n                                    // price: discount,\n                                    price: listing_price,\n                                    name: test.name,\n                                  })\n                                }\n                                disabled={disabled === test._id}\n                              >\n                                <FaCartPlus className=\"mr-1\" />\n                                Add To Cart\n                              </Button>\n                            )}\n                          </div>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </Card.Body>\n                <Card.Footer>\n                  <div className=\"text-center\">\n                    <Link\n                      className=\"btn btn-primary views\"\n                      to={{\n                        pathname: `/lab-tests/labs/${slugify(labName)}/tests`,\n                        search: `?search_type=package&search_value=${value}&search_title=Packages-Offered-By`,\n                      }}\n                    >\n                      View All\n                    </Link>\n                  </div>\n                </Card.Footer>\n              </Card>\n            ) : null}\n            {labReviews && labReviews.length > 0 ? (\n              <Card className=\"test_expm\">\n                <Card.Header>\n                  <h3 className=\"card-title\">\n                    Labs Reviews <b>({totalReviews})</b>\n                    {/* <span> */}\n                      <Link\n                        style={{float:\"right\"}}\n                        className=\"btn btn-primary views\"\n                        to={{\n                          pathname: `/lab-tests/labs/${slugify(\n                            labName\n                          )}/reviews`,\n                          search: `?search_type=reviews&search_value=${_id}`,\n                        }}\n                      >\n                        View all\n                      </Link>\n                    {/* </span> */}\n                  </h3>\n                </Card.Header>\n                <Card.Body>\n                  <Row>\n                    {/* <Col md={12}> */}\n                    {labReviews.map((item) => {\n                      const randomColor = Math.floor(\n                        Math.random() * 16777215\n                      ).toString(16);\n                      return (\n                        <Col md={6}>\n                          <Card className=\"mb-0\" style={{ width: \"100%\" }}>\n                            <Card.Body>\n                              <div className=\"item-card2\">\n                                <div className=\"part_lat labspage\">\n                                  {item.reviewed_by.avatar &&\n                                  item.reviewed_by.avatar !== \"\" ? (\n                                    <Image\n                                      style={{\n                                        width: \"70px\",\n                                        height: \"70px\",\n                                      }}\n                                      className=\"mr-1 rounded-circle\"\n                                      src={`${process.env.REACT_APP_SERVER_URL}/documents/user-avatar/${item.reviewed_by.avatar}`}\n                                      alt=\"\"\n                                    />\n                                  ) : (\n                                    <div\n                                      style={{\n                                        \"background-color\": \"#\" + randomColor,\n                                        width: \"70px\",\n                                        height: \"70px\",\n                                        float: \"left\",\n                                        \"border-radius\": \"100px\",\n                                      }}\n                                    >\n                                      <div\n                                        style={{\n                                          \"border-radius\": \"100px\",\n                                          width: \"100%\",\n                                          color: \"white\",\n                                          \"font-size\": \"50px\",\n                                          \"line-height\": \"100px\",\n                                          position: \"absolute\",\n                                          bottom: \"8px\",\n                                          right: \"-30px\",\n                                          float: \"left\",\n                                        }}\n                                      >\n                                        {item.reviewed_by.name\n                                          .trim()\n                                          .charAt(0)\n                                          .toUpperCase()}\n                                      </div>\n                                    </div>\n                                  )}\n                                </div>\n\n                                <div className=\"right_new\">\n                                  <h4>\n                                    {item.reviewed_by.name\n                                      .split(\" \")\n                                      .map((name) => {\n                                        return (\n                                          name.trim().charAt(0).toUpperCase() +\n                                          name.slice(1)\n                                        );\n                                      })\n                                      .join(\" \")}\n                                  </h4>\n                                  <Rating ratings={item.rating} />\n                                  {/* <span><i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> <i className=\"fa fa-star\"></i> (Nice)</span> */}\n                                  <p>{item.review}</p>\n                                  {/* <p>\n                                    <i>\n                                      <b>Date of stay:</b>\n                                      <Moment format=\"MMMM  YYYY\">\n                                        {item.reviewed_at}\n                                      </Moment>\n                                    </i>\n                                  </p> */}\n                                </div>\n                              </div>\n                            </Card.Body>\n                          </Card>\n                        </Col>\n                      );\n                    })}\n                    {/* </Col> */}\n                  </Row>\n                </Card.Body>\n              </Card>\n            ) : null}\n            {/* <!--/Comments--> */}\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n}\n\nfunction generateAvatar(name){\n  var initials = name.split(' ').map(function(str) { return str ? str[0].toUpperCase() : \"\";}).join('');\n  var canvas = document.createElement('canvas');\n  var radius = 30;\n  var margin = 5;\n  canvas.width = radius*2+margin*2;\n  canvas.height = radius*2+margin*2;\n\n  // Get the drawing context\n  var ctx = canvas.getContext('2d');\n  ctx.beginPath();\n  ctx.arc(radius+margin,radius+margin,radius, 0, 2 * Math.PI, false);\n  ctx.closePath();\n  ctx.fillStyle = 'grey';\n  ctx.fill();\n  ctx.fillStyle = \"white\";\n  ctx.font = \"bold 30px Arial\";\n  ctx.textAlign = 'center';\n  ctx.fillText(initials, radius+5,radius*4/3+margin);\n  return canvas.toDataURL();\n  //The canvas will never be added to the document.\n}\n\nDetails.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getLabByID: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.labs.loadingLabs,\n  currentLab: state.labs.currentLab,\n  currentCity: state.labs.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  getLabByID,\n  resetComponentStore,\n  addToCart,\n  createGuestCart\n})(withRouter(Details));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/AddressCard.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Address/ViewMap.js",["1316","1317"],"import React, { useEffect, useState } from \"react\";\nimport { Map,  Marker, GoogleApiWrapper, Circle } from 'google-maps-react';\nimport { FaMapPin } from \"react-icons/fa\";\n\nconst ViewMap = ({\n    google,\n    position,\n    current,\n    zoom,\n    updateLocation = () => {},\n}) => {\n    // let marker_location = [];\n\n    // const [marker_location, setMarkerLocation] = useState([]);\n    const [coords, setCoords] = useState(position);\n    const [currentLoc, setCurrent] = useState(current);\n\n    const updatePosition = (props, m) => { \n      const lat = m.center.lat();\n      const lng = m.center.lng();\n      updateLocation({ lat, lng });\n      // setMarkerLocation()\n      // marker_location = [lat, lng];\n    }\n\n    // useMemo(() => {\n\n    // }, [marker_location])\n\n\n    //Map style\n    const containerStyle = {\n        position: 'relative',\n        width: '100%',\n        height: '400px',\n    };\n\n    /**\n     * \n     * @param {*} bounds Bounds of latLng, \n     * @param {*} mapDim Dimension of Map Wrapper Component\n     * @Ref Taken From Stackoverflow (https://stackoverflow.com/a/13274361)\n     */\n    function getBoundsZoomLevel(bounds, mapDim) {\n      var WORLD_DIM = { height: 256, width: 256 };\n      var ZOOM_MAX = 21;\n  \n      function latRad(lat) {\n          var sin = Math.sin(lat * Math.PI / 180);\n          var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n          return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n      }\n  \n      function zoom(mapPx, worldPx, fraction) {\n          return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);\n      }\n  \n      var ne = bounds.getNorthEast();\n      var sw = bounds.getSouthWest();\n  \n      var latFraction = (latRad(ne.lat()) - latRad(sw.lat())) / Math.PI;\n  \n      var lngDiff = ne.lng() - sw.lng();\n      var lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;\n  \n      var latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);\n      var lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);\n  \n      return Math.min(latZoom, lngZoom, ZOOM_MAX);\n    }\n\n    useEffect(() => {\n      let subscribe = true;\n      async function asyncCall() {\n        if(subscribe && position && position.lat && position.lng ) {\n          setCoords({ ...position });\n        }\n      }\n      asyncCall();\n      return () => {\n        subscribe = false;\n      }\n    }, [position]);\n\n    // const coords = !!position && { lat: position.lat, lng: position.lng };\n    return (\n      <div>\n        {\n          coords && coords.lat && (\n            <>\n              <div style={{\n                height: 400,\n                marginBottom: 20,\n                alignItems: 'center',\n              }}>\n                <span \n                  style={{ \n                      zIndex: 3,\n                      position: 'relative',\n                      marginTop: -23,\n                      marginLeft: -20,\n                      left: '50%',\n                      top: '50%'\n                    }} \n                  >\n                  <FaMapPin\n                    size={40}\n                    color=\"#f00\" \n                  />\n                </span>\n                <Map\n                  initialCenter={coords}\n                  style={{flex:1}}\n                  containerStyle={containerStyle}\n                  center={coords}\n                  google={google}\n                  maxZoom={21}\n                  minZoom={13}\n                  zoom={zoom}\n                  zoomEnabled={true}\n                  // zoomControl={false}\n                  // fullscreenControl={false}\n                  // streetViewControl={false}\n                  // mapTypeControl={false}\n                  onDragend={updatePosition}\n                >\n                  { !!currentLoc &&\n                    <Marker \n                      draggable={false}\n                      key=\"marker_1\"\n                      icon={{\n                        url: \"https://i.imgur.com/4sVs0zt.png\",\n                        // anchor: new google.maps.Point(17,46),\n                        scaledSize: new google.maps.Size(32, 27)\n                      }}\n                      position={currentLoc}\n                    />\n                  }\n                  {\n                    !!currentLoc && <Circle\n                      center={currentLoc}\n                      radius={50}\n                      strokeColor=\"#85C4DB\"\n                      strokeWeight={1}\n                      fillOpacity={0.2}\n                      fillColor=\"#055E7F\"\n                    />\n                  }\n                </Map>\n              </div>\n            </>\n          )\n        }\n      </div>\n    )\n}\n\nexport default GoogleApiWrapper({ apiKey: process.env.REACT_APP_GOOGLE_MAP_API })(ViewMap)","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/LT_Categories/LoadCategory.js",["1318"],"import React from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { Spinner } from 'reactstrap';\nimport slugify from \"react-slugify\";\nimport CropImg from \"utils/CropImg\";\nimport { Link } from \"react-router-dom\";\n\nconst LoadCategory = ({\n  loadMoreCallback = () => {},\n  habits,\n  totalResults,\n  loading,\n  pageLoaded,\n  sortingParams,\n}) => {\n  const limit = sortingParams.limit;\n  const resultsLoaded = Math.ceil(totalResults/(limit*pageLoaded));\n\n  const loadMore = (e) => {\n    e.preventDefault();\n    const params = {\n      ...sortingParams,\n      page: Math.ceil(totalResults/habits.length),\n    }\n    loadMoreCallback(params);\n  }\n\n  const cardCols = [\"primary\", \"secondary\", \"info\", \"danger\", \"warning\"];\n  let colNum = 0;\n  let colorSelected = cardCols[0];\n\n\n  return (\n    <>\n      <Row>\n        {\n          habits.map((habit) => {\n            colorSelected = cardCols[colNum % cardCols.length];\n            colNum++;\n            return (\n              <Col xl={2} sm={6} key={habit._id}>\n                <Card\n                  bg=\"white\"\n                  className={`bg-card-light bg-${colorSelected}-card`}\n                >\n                  <Card.Body>\n                    <div className=\"cat-item text-center\">\n                      <Link\n                        to={{\n                          pathname:`/lab-tests/habits/${slugify(habit.name)}`,\n                          hash:\"#content\",\n                          search: `?search_type=habit&search_value=${habit._id}`\n                        }}\n                      />\n                      <div\n                        className={`cat-icon bg-${colorSelected}-transparent brround text-${colorSelected}`}\n                        style={{ position: \"relative\" }}\n                      >\n                        <CropImg\n                          src={`${process.env.REACT_APP_SERVER_URL}/documents/habits/${habit.icon}`}\n                          name={habit.name}\n                          ratio={11 / 16}\n                        />\n                      </div>\n                      <div className=\"cat-desc\">\n                        <h5 className=\"mb-2\" style={{ fontSize: \"0.8rem\" }}>\n                          {habit.name}\n                        </h5>\n                      </div>\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n            )\n          })\n        }\n      </Row>\n      {\n          loading && (\n            <Row className=\"text-center\">\n              <Col><div className=\"mt-4\"><Spinner color=\"primary\" /></div></Col>\n            </Row>\n          )\n      }\n      {\n        resultsLoaded > 1 && (\n        <Row className=\"text-center\">\n          <Col>\n            {\n              !loading && <a href=\"#\" onClick={loadMore} title=\"load more\">Load More...</a>\n            }\n          </Col>\n        </Row>)\n      }\n    </>\n  )\n}\n\nexport default LoadCategory;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Habits/HabitCardComponent.js",["1319"],"import React from \"react\";\nimport slugify from \"react-slugify\";\nimport { Col, Card, Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport HtmlParser from \"utils/HtmlParser\";\n\nconst HabitCard = ({ data, ...props }) => {\n  const cardCols = [\"primary\", \"secondary\", \"info\", \"danger\", \"warning\"];\n  let colNum = 0;\n  let colorSelected = cardCols[0];\n  let habitsID = new Set();\n  const list_component = data.map((habit, idx) => {console.log(habit)\n    habitsID.add(habit._id);\n    colorSelected = cardCols[colNum % cardCols.length];\n    colNum++;\n    return (\n      <Col xl={4} lg={4} md={4} className=\"spacebot\"  key={habit._id} >\n        <Card className=\"mb-0 bg-transparent box-shadow\" style={{ height:\"20rem\" }}>\n          <Card.Body className=\"mH-225 bg-white \">\n            <div className=\"cat-item text-center\">\n              <Link\n                to={{\n                  pathname:`/lab-tests/habits/${slugify(habit.habit_name)}`,\n                  search: `?search_type=habit&search_value=${habit._id}`\n                }}\n              />\n                <Image\n                  src={`${process.env.REACT_APP_SERVER_URL}/documents/habits/${habit.icon}`}\n                />\n              <div className=\"pat_part\">\n                <h2>\n                  {habit.name}\n                </h2>\n                <div style={{'height': \"75px\"}}>{HtmlParser(habit.description)}</div>\n                <Link\n                  to={{\n                    pathname:`/lab-tests/habits/${slugify(habit.habit_name)}`,\n                    search: `?search_type=habit&search_value=${habit._id}`\n                  }}\n                >\n                View More\n                </Link>\n              </div>\n            </div>\n          </Card.Body>\n        </Card>\n      </Col>\n    );\n  })\n  return list_component;\n}\n\nexport default HabitCard;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/HtmlParser.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/page.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/index.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/CollectionCenter/CollectionCenterCard.js",["1320","1321","1322","1323"],"import React, { useState, useEffect } from \"react\";\nimport slugify from \"react-slugify\";\nimport { Row, Col, Card, ButtonGroup, Modal} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"reactstrap\";\nimport { FaCheck, FaTimes } from \"react-icons/fa\";\nimport classNames from 'classnames';\n\nconst CollectionCenterCard = ({ \n    listParams,\n    data = [], \n    selected, \n    selectable=false, \n    select = () => {}, ...props }) => {\n\n  const [activeElement, setActive] = useState(selected);\n\n  const classes = classNames(\n    \"overflow-hidden selectadd border\",\n  );\n\n  const onSelect = (e, id) => {\n    e.preventDefault();\n    if(id!==activeElement){\n    setActive(id);\n    select(id,\"select\");\n  } else{\n    setActive(null);\n    select(id,\"deselect\");\n    }\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      if(subscribe && selected) setActive(selected);\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selected])\n\n  const list_component = data.map((row) => {\n    const { _id, type, name, address_line_1, address_line_2, zip_code, city , zip_locality} = row;\n    const thisElement = activeElement === _id;\n    return (\n      <Col lg={6} md={12} key={_id} className=\"mb-2\">\n        <Card  \n          className={classes + (thisElement ? \" selected-card\": \"\")}\n        >\n          <Card.Body className=\"address\">\n              <div\n                  style={{ \"textDecoration\": \"underline\" }}\n                >\n            <div className=\"item-card9\">\n                <h4 className=\"font-weight-bold mt-1 mb-2\">{name}</h4>\n            </div>\n            </div>\n            <Row>\n              <Col>\n                <p style={{minHeight: 100 }}>{`${address_line_1 + ' '+address_line_2}, ${zip_locality.name}, ${city.name} - ${zip_code}`}</p>\n              </Col>\n            </Row>\n          </Card.Body>\n          <Card.Footer className=\"p-0\">\n            <div className=\"item-card9-footer btn-appointemtn\">\n              <ButtonGroup className=\"w-100\">\n                {\n                  selectable && \n                  !thisElement ?\n                  <Button \n                    className={\"modified w-100 p-2 border-top-0 border-right-0 border-bottom-0\" + (thisElement ? \" selected\": \"\") }\n                    style={{ borderRadius: 0 }}\n                    onClick={(e) => onSelect(e, _id) }\n                    disabled={thisElement}\n                    color=\"success\"\n                  >\n                    <FaCheck className=\"mr-1\" /> Select\n                  </Button>\n                  :\n                  <Button \n                    className={\"modified w-100 p-2 border-top-0 border-right-0 border-bottom-0\" + (thisElement ? \" selected\": \"\") }\n                    style={{ borderRadius: 0 }}\n                    onClick={(e) => onSelect(e, _id) }\n                    color=\"danger\"\n                  >\n                    <FaTimes className=\"mr-1\" /> Deselect\n                  </Button>\n                }\n              </ButtonGroup>\n            </div>\n          </Card.Footer>\n        </Card>\n      </Col>\n    )\n  });\n  return <Row>\n  {list_component}\n   </Row>;\n}\n\nexport default CollectionCenterCard;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Family/FamilyCard.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/Filters.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderDetails.js",["1324","1325","1326","1327","1328","1329","1330","1331"],"import React , { useState, Suspense } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Image, Container, Row, Col, Card, Badge } from \"react-bootstrap\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport * as Constants from \"constants/index\";\nimport Moment from \"react-moment\";\nimport moment from \"moment\";\nimport Collapsible from \"react-collapsible\";\nimport OrderTrack from \"./OrderTrack\"\nimport {\n  Spinner\n} from \"reactstrap\";\n\nimport { \n  AiOutlinePlusSquare, \n  AiOutlineMinusSquare, \n  AiFillStar,\n  AiOutlineMail,\n  AiOutlinePhone, \n  AiOutlineHome,\n  AiOutlineUser\n} from \"react-icons/ai\";\nimport { FaEye } from \"react-icons/fa\";\n\nconst currency = CURRENCY_SYMBOL[\"INR\"];\n\nconst OrderDetails = ({ data }) => {\n  const [showOTP, setView] = useState(false);\n  const [showCancelLoader , setShowCancelLoader] = useState(false);\n\n  if(!data || typeof(data) !== \"object\") return null;\n  const {\n    _id,\n    user_id,\n    addToWallet,\n    otp,\n    deducted_from_wallet = 0,\n    customer,\n    patient,\n    referredBy,\n    city,\n    address,\n    phlebotomist,\n    subTotal,\n    discount,\n    tax,\n    cancelOrder,\n    homeCollectionCharges,\n    collectionType,\n    schedule,\n    totalPayment,\n    paymentMode,\n    lab,\n    grossAmount,\n    orderID,\n    products,\n    status,\n    created_at,\n  } = data;\n\n  const referredBlock = (referred) => {\n    return referred ? (<div className=\"fs-16\">Referred By <span className=\"font-weight-bolder\">{referred.name}</span></div>): null;\n  }\n\n  const toggleViewOTP = (e) => {\n    e.preventDefault();\n    setView(!showOTP);\n  }\n  const cancelOrderClick = () => {\n    setShowCancelLoader(true);\n    cancelOrder();\n  }\n\n  const orderDetails = () => {\n    return (\n      <><Row>\n        <OrderTrack status = {status}/>\n      </Row>\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <Card.Title>\n                <div className=\"order-detail d-flex\">\n                  <div className=\"w-60\">\n                    <b>#{orderID}</b>\n                    <small className=\"m-0\"><Moment format=\"Do MMM, YYYY - hh:mm A\" unix>{Math.ceil(created_at/1000)}</Moment></small>\n                  </div>\n                  <div className=\"w-40\">\n                    <u className=\"pull-right\" style={{ textTransform: \"capitalize\" }}>\n                      {`${currency} ${subTotal + (homeCollectionCharges || 0) +  (tax || 0) - (discount.fixed || 0)} `} {paymentMode} <br/>\n                    </u>\n                  </div>\n                </div>\n              </Card.Title>\n              {referredBlock(referredBy)}\n              { schedule && schedule?.slot.length === 2 && (\n                <>\n                  <div className=\"fs-16 mb-3\">Schedule {' '} <br/>\n                    <span className=\"font-weight-bold\">\n                      <Moment format=\"Do MMM YYYY, \" parse=\"DD-MM-YYYY\">{schedule.day}</Moment>\n                      <Moment format=\"hh:mm A\" parse=\"HH:mm\">{schedule.slot[0]}</Moment> - <Moment format=\"hh:mm A\" parse=\"HH:mm\">{schedule.slot[1]}</Moment>\n                    </span>\n                  </div>\n                  <div className=\"fs-16 mb-3\">Collection Type {' '} <br/>\n                    <span className=\"font-weight-bold\" style={{ textTransform: \"capitalize\" }}>\n                      {collectionType}\n                    </span>\n                  </div>\n                </>\n                )\n              }\n              <a href=\"#\" className=\"pull-left text-danger font-weight-bold mb-3\" onClick={toggleViewOTP} title=\"OTP\">\n                {showOTP ? <span><u>{otp}</u></span>: <span><FaEye /> View Pin</span> }\n              </a>\n              <Badge className=\"pull-right\" variant={`${status == 9 ? \"danger\" : 'info'}`} pill>{addToWallet ? (status === Constants.ORDER.REPORT_GENERATED ? \"Completed\": Constants.ORDER_LABEL[status]): Constants.ORDER_LABEL[status]}</Badge>\n              {status < 6 && <div className=\"mb-3 row\" style={{\"cursor\": \"pointer\"}} onClick={() => cancelOrderClick()}>\n              {showCancelLoader ? <Spinner color=\"warning\" /> : <Badge className=\"\" variant=\"danger\" pill>Cancel Order</Badge>}\n              </div>}\n            </Card.Body>\n          </Card>\n          { products && products.length > 0 && ProductCard(products) }\n          <BillCard \n            subTotal={subTotal}\n            tax={tax}\n            grossAmount={grossAmount}\n            totalDiscount={discount.fixed || 0}\n            homeCollectionCharges={homeCollectionCharges}\n            deducted_from_wallet={deducted_from_wallet || 0}\n          />\n        </Col>\n        <Col>\n          { !!lab && LabCard(lab) }\n          { phlebotomist && PhlebotomistCard(phlebotomist, status === Constants.ORDER.ASSIGNED) }\n          {CustomerCard(customer)}\n          { !!patient && !!address && PatientCard(patient, address)}\n        </Col>\n\n      </Row></>\n    )\n  }\n\n  return (\n    orderDetails()\n  )\n\n\n}\n\nconst CustomerCard = (customer) => {\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Customer Details</Card.Title>\n        <p><AiOutlineUser color=\"#05a01f\" /> <b>{customer.name}</b></p>\n        <p><AiOutlinePhone color=\"#05a01f\" /> +91 - {customer.phone}</p>\n        <p><AiOutlineMail color=\"#05a01f\" /> {customer.email}</p>\n      </Card.Body>\n    </Card>\n  )\n}\n\nconst PatientCard = (patient, address) => {console.log(patient)\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Patient Details</Card.Title>\n        {(patient.name || patient.dob || patient.gender ) ? <p><AiOutlineUser color=\"#05a01f\" /> <b>{patient.name}</b>{`${ patient.dob ? \"(\" + moment(patient.dob, \"DD-MM-YYYY\").fromNow().split(\" \")[0] + \") | \" : \"\"}  `}   {`${patient.gender === \"m\" ? \"Male\": \"Female\"}`} </p> : \"\"}\n        {patient.phone ? <p><AiOutlinePhone color=\"#05a01f\" /> +91 - {patient.phone}</p> : \"\"}\n        {patient.email ? <p><AiOutlineMail color=\"#05a01f\" /> {patient.email}</p> : \"\"}\n        { address?.address && <p><AiOutlineHome color=\"#05a01f\" /> {`${address.address}  (${address.title})`}</p> }\n      </Card.Body>\n    </Card>\n  )\n}\n\nconst LabCard = (lab) => {\n  return (<Card>\n    <Card.Body>\n      <Card.Title>Lab Details</Card.Title>\n      <div className=\"part_lat d-flex remove_float\">\n        <div className=\"m-1\" style={{ width: 65, height: 65 }}>\n          <Suspense>\n            <Image src={lab.labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${lab.labImage}`: DefaultLabImage } alt={lab.labName} rounded/>\n          </Suspense>\n        </div>\n        <div>\n          <span>\n            <u>{lab.labName}</u>\n          </span>\n          <div title=\"lab ratings\" className=\"rating-text\">\n            <AiFillStar className=\"fs-14 ml-1\"/> {lab.averageRating}\n          </div>\n          <div>\n            <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n              <span title=\"total reviews\">{lab.certificates.length ? `(${lab.totalReviews}) | `: `(${lab.totalReviews})`}</span>\n              <span title=\"certification\">{`${lab.certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n            </span>\n          </div>\n        </div>\n      </div>\n      <div>\n        <p><AiOutlinePhone color=\"#05a01f\" /> {lab.labPhone.replace(\"+91\", \"+91 - \")}</p>\n        <p><AiOutlineMail color=\"#05a01f\" /> {lab.labEmail}</p>\n      </div>\n    </Card.Body>\n  </Card>);\n}\n\nconst ProductCard = (products) => {\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Products</Card.Title>\n        {\n          products.map((product) => {\n            const items = product.items_included;\n            const totalTests = product.total_tests;\n            return <Collapsible\n              key={`product_${product._id}`}\n              trigger={<span>\n                <span>{`${product.title} ${totalTests ? '('+totalTests+')': ''} `}</span> \n                <span>{`- ${currency} ${product.price}`}</span>\n                <span className=\"pull-right\">{items.length ? <AiOutlinePlusSquare />: <AiOutlineMinusSquare />}</span>\n              </span>}\n              triggerWhenOpen={<span>\n                <span>{`${product.title} ${totalTests ? '('+totalTests+')': ''} `}</span> \n                <span>{`- ${currency} ${product.price}`}</span>\n                <span className=\"pull-right\">{<AiOutlineMinusSquare />}</span>\n              </span>}\n              triggerDisabled={product.items_included.length < 1}\n              triggerClassName=\"trigger-products font-weight-bolder\"\n              triggerOpenedClassName=\"trigger-products font-weight-bolder\"\n              className=\"mb-3\"\n              openedClassName=\"mb-3\"\n            >\n              <ul className=\"ml-3 pl-3 bullet-list\">\n                {\n                  items.map((item) => {\n                    const sub_items = item.items;\n                    return (<li key={item._id}>\n                      <b>{item.title}</b>\n                      {\n                        sub_items.length > 0 && (\n                          <ul key={`s_it_parent_${item._id}`} className=\"ml-3 pl-3 bullet-list\">\n                            {\n                              sub_items.map((s_it) => <li key={`s_it_child_${s_it._id}`}>{s_it.title}</li>)\n                            }\n                          </ul>\n                        )\n                      }\n                    </li>);\n                  })\n                }\n              </ul>\n            </Collapsible>\n          })\n        }\n      </Card.Body>\n    </Card>\n  )\n}\n\nconst PhlebotomistCard = (phlebotomist, showContact = false) => {\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Phlebotomist Assigned</Card.Title>\n        <p><AiOutlineUser color=\"#05a01f\" /> <b>{phlebotomist.name}</b></p>\n        { showContact && <p><AiOutlinePhone color=\"#05a01f\" /> +91 - {phlebotomist.phone}</p> }\n      </Card.Body>\n    </Card>\n  )\n}\n\nconst BillCard = ({\n  subTotal = 0,\n  homeCollectionCharges = 0,\n  totalDiscount = 0,\n  tax = 0,\n  grossAmount = 0,\n  deducted_from_wallet = 0\n}) => {\n  const total = subTotal+homeCollectionCharges+tax-totalDiscount;\n  const gross = grossAmount + deducted_from_wallet;\n  const adjustment = Math.abs(total - gross);\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Bill Summary</Card.Title>\n        <div className=\"bill_new pack\">\n          <ul className=\"pull-values-right\">\n            <li key={'sub_total'}>\n              <span>Sub Total{\" \"}</span>\n              <span>{`${CURRENCY_SYMBOL.INR} ${subTotal ?? \"0\"}`}</span>\n            </li>\n            <li key={'collection_charges'}>\n              <span>Home Collection Charges.{\" \"}</span>\n              <span>{`${CURRENCY_SYMBOL.INR} ${homeCollectionCharges}`}</span>\n            </li>\n            <li key={'discount'}>\n              <span>Discount</span>\n              <span>{`- ${CURRENCY_SYMBOL.INR} ${totalDiscount ?? \"0\"}`}</span>\n            </li>\n            <li key={'taxes'}>\n              <span>Tax & Charges</span>\n              <span>{`${CURRENCY_SYMBOL.INR} ${tax ?? \"0\"}`}</span>\n            </li>\n            {/* {\n              deducted_from_wallet > 0 &&\n              <li className=\"mt-2 border-top\" key={'wwallet'}>\n                <span>Total Amount</span>\n                <span><b>{`${CURRENCY_SYMBOL.INR} ${subTotal+homeCollectionCharges+tax-totalDiscount ?? \"0\"}`}</b></span>\n              </li> \n            } */}\n            {/* {\n              deducted_from_wallet > 0 &&\n              <li key={'wallet'}>\n                <span>Wallet</span>\n                <span><b>- {`${CURRENCY_SYMBOL.INR} ${deducted_from_wallet ?? \"0\"}`}</b></span>\n              </li>\n            } */}\n            {\n              adjustment > 0 &&\n              <li key={'adjustment'}>\n                <span>Adjustment</span>\n                <span><b>{`${CURRENCY_SYMBOL.INR} ${adjustment}`}</b></span>\n              </li>\n            }\n          </ul>\n\n          {/* <p className=\"tsc\">By Placing order you are agree to our T&C</p> */}\n          <div className=\"item-card9-desc mb-2 mt-1 totalam border-top\">\n            <span className=\"mr-4\">\n              <span className=\"pull-left font-weight-bold\">Total Amount{\" \"}</span>\n              <span className=\"pull-right font-weight-bold\">{`${CURRENCY_SYMBOL.INR} ${subTotal+homeCollectionCharges+tax-totalDiscount ?? \"0\"}`} </span>{\" \"}\n            </span>\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default OrderDetails;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Labs/LabCardComponent.js",["1332","1333"],"import React, { Suspense } from \"react\";\nimport Rating from \"utils/Rating\";\nimport slugify from \"react-slugify\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { Col, Card, Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { IoMdStar } from \"react-icons/io\";\n\nconst LabCard = ({ data, labCity, ...props }) => {\n  const list_component = data.map((row) => {\n    const { _id, labName, labImage, averageRating, totalReviews, certificates, testsOffered, address, collectionCenters } = row;\n    const { locality } = address;\n    const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n    return (\n      <>\n      <Col xl={4} lg={4} md={4} key={_id} >\n        <Card className=\"mb-0 bg-transparent box-shadow\" >\n          <Card.Body className=\"mH-225 bg-white\">\n            <div className=\"text-center\" style={{ height:\"16rem\" }}>\n              <Link\n                to={{\n                  pathname:`/lab-tests/labs/${slugify(labName)}`,\n                  hash:\"#content\",\n                  search: `?search_type=labs&search_value=${_id}`\n                }}\n              />\n              <div style={{ \n                                height: 70, \n                                width: 70, \n                                boxShadow: \"2px 1px 4px rgba(0,0,0, 0.3)\",\n                                marginLeft: 130,\n                                marginBottom: 20\n                              }}\n              >\n                  <Suspense>\n                    <Image src={labImageURL} alt={labName} />\n                  </Suspense>\n              </div>\n              <div className=\"pat_part\">\n                <h2>\n                  {labName}\n                </h2>\n                <div >\n                  <span style={{ fontSize: \"14px\" }}>\n                    <div title=\"lab ratings\" className=\"rati_icon\">\n                      <IoMdStar size=\"14px\" className=\"ml-1\"/>{averageRating}\n                    </div>\n                    <span className=\"allcomant\" style={{ fontSize: \"10px\", marginLeft: 5 }}>\n                      <span title=\"total reviews\">{certificates.length ? `(${totalReviews}) | `: `(${totalReviews})`}</span>\n                      <span title=\"certification\">{`${certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                    </span>\n                    <div title=\"locality\">\n                      <small>{ locality ? `${locality}, ${labCity.city}`: labCity.city }</small>\n                    </div>\n                    {/* <p>{ testsOffered ? `Total Tests Offered: ${testsOffered}`: null }</p> */}\n                  </span>\n                </div>\n              </div>\n            </div>\n                <div className=\"pat_part\">\n                    <Link\n                      to={{\n                        pathname:`/lab-tests/labs/${slugify(labName)}`,\n                        hash:\"#content\",\n                        search: `?search_type=labs&search_value=${_id}`\n                        }}\n                    >\n                    View More\n                    </Link>\n                </div>\n          </Card.Body>\n        </Card>\n      </Col>\n     {collectionCenters && collectionCenters.length > 0 &&\n      collectionCenters.map((center) => {\n        return(\n          <Col xl={4} lg={4} md={4} className=\"spacebot\"  key={_id} >\n            <Card className=\"mb-0 bg-transparent box-shadow\" >\n              <Card.Body className=\"mH-225 bg-white\">\n                <div className=\"text-center\" style={{ height:\"16rem\" }}>\n                  <Link\n                      to={{\n                        pathname:`/lab-tests/labs/${slugify(center.name)}`,\n                        hash:\"#content\",\n                        search: `?search_type=labs&search_value=${center.lab_id}`\n                      }}\n                    />\n                    <div style={{ \n                                height: 80, \n                                width: 80, \n                                boxShadow: \"2px 1px 4px rgba(0,0,0, 0.3)\",\n                                marginLeft: 130,\n                                marginBottom: 20\n                              }}\n                     >\n                        <Suspense>\n                          <Image src={labImageURL} alt={labName} />\n                        </Suspense>\n                    </div>\n                  <div className=\"pat_part\">\n                    <h2>\n                      {center.name}\n                    </h2>\n                    <div>\n                      <span style={{ fontSize: \"14px\" }}>\n                        <div title=\"lab ratings\" className=\"rati_icon\">\n                          <IoMdStar size=\"14px\" className=\"ml-1\"/>{averageRating}\n                        </div>\n                        <span className=\"allcomant\" style={{ fontSize: \"10px\", marginLeft: 5 }}>\n                          <span title=\"total reviews\">{certificates.length ? `(${totalReviews}) | `: `(${totalReviews})`}</span>\n                          <span title=\"certification\">{`${certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                        </span>\n                        <div title=\"locality\">\n                          <small>{ center.locality ? `${center.locality}, ${labCity.city}`: labCity.city }</small>\n                        </div>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                    <div className=\"pat_part\">\n                      <Link\n                        to={{\n                          pathname:`/lab-tests/labs/${slugify(center.name)}`,\n                          hash:\"#content\",\n                          search: `?search_type=labs&search_value=${center.lab_id}`\n                        }}\n                      >\n                      View More\n                      </Link>\n                      </div>\n              </Card.Body>\n            </Card>\n          </Col>\n        )\n      })\n    }\n      </>\n    )\n  });\n  return list_component;\n}\n\nexport default LabCard;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/address.js",["1334"],"import axios from \"axios\";\nimport { setAlert } from \"actions/alert\";\nimport { setErrorsList } from \"actions/errors\";\nimport {\n  REMOVE_ERRORS,\n  ADDRESS_CREATED,\n  ADDRESS_UPDATED,\n  UPDATE_CART_ADDRESS,\n  ADDRESS_DELETED,\n  ADDRESS_ERROR,\n  GET_ADDRESS_BY_ID,\n  GET_SELECTED_ADDRESS,\n  ADDRESS_LIST_UPDATED,\n  ADDRESS_SEARCH_PARAMATERS_UPDATE,\n  LOADING_ON_ADDRESS_LIST,\n  LOADING_ON_ADDRESS_SUBMIT,\n  RESET_ADDRESS,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport { logout } from \"actions/auth\";\n\n\n//get Address list\nexport const getAddressList = (addressParams) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(loadingOnAddressList());\n    dispatch({ type: REMOVE_ERRORS });\n    addressParams.query = addressParams.query?addressParams.query:\"\";\n    config.params = addressParams;\n    const res = await axios.get(`/api/user-address`,config);\n    dispatch({\n      type: ADDRESS_SEARCH_PARAMATERS_UPDATE,\n      payload: addressParams\n    });\n    dispatch({\n      type: ADDRESS_LIST_UPDATED,\n      payload: res.data.response[0]\n    });\n    return res.data?res.data:{status:false};\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: ADDRESS_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n    }\n  }\n};\n\n//get Address by ID\nexport const getAddressByID = (address_id) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(loadingOnAddressSubmit());\n    dispatch({ type: REMOVE_ERRORS });\n    const res = await axios.get(`/api/user-address/${address_id}`,config);\n    dispatch({\n      type: GET_ADDRESS_BY_ID,\n      payload: res.data.response,\n    });\n  } catch (err) {\n    console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: ADDRESS_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n    }\n  }\n};\n\n//get Address by ID\nexport const getSelectedAddressByCart = (cart_id) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(loadingOnAddressSubmit());\n    dispatch({ type: REMOVE_ERRORS });\n    const res = await axios.get(`/api/user-cart/${cart_id}/address`,config);\n    dispatch({\n      type: GET_SELECTED_ADDRESS,\n      payload: res.data.response,\n    });\n  } catch (err) {\n    console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: ADDRESS_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n    }\n  }\n};\n\nexport const updateCartAddress = (cart_id, address_id) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnAddressSubmit());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.put(`/api/user-cart/${cart_id}/address/${address_id}`, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: UPDATE_CART_ADDRESS,\n        payload: res.data.response\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(\"Cart Address Updated.\", \"success\"));\n      return res ? res.data.status: null;\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: ADDRESS_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        \n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n    return res.data?res.data:{status:false};\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: ADDRESS_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n      return err.response.data?.errors;\n    };\n  }\n}\n\n// Create Address\nexport const create = (formData, history) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnAddressSubmit());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.post(`/api/user-address`, formData, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: ADDRESS_CREATED,\n        payload: res.data.response\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(\"Address Created.\", \"success\"));\n      if(history ===undefined)\n      return true;\n      else history.push(\"/addresses\");\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: ADDRESS_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        \n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n        return false;\n      }\n    }\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: ADDRESS_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n      return false;\n    };\n  }\n};\n\n// Edit Address\nexport const edit = (address_id, formData, history) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnAddressSubmit());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.put(`/api/user-address/${address_id}`, formData, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: ADDRESS_UPDATED,\n        payload: res.data.response\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(\"Address Updated.\", \"success\"));\n      if(history ===undefined)\n      return true;\n      else history.push(\"/addresses\");\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: ADDRESS_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        \n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n        return false;\n      }\n    }\n    return res.data?res.data:{status:false};\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: ADDRESS_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n      return false;\n    };\n  }\n};\n\n// Delete Address\nexport const remove = (address_id, history) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnAddressList());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.delete(`/api/user-address/${address_id}`, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: ADDRESS_DELETED,\n        payload: address_id,\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(res.data.message || \"Address Deleted.\", \"success\"));\n      if(history ===undefined)\n      return true;\n      else history.push(\"/addresses\");\n    } else {\n      const errors = res.data.errors;\n      dispatch({ type: ADDRESS_ERROR });\n      return false;\n    }\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: ADDRESS_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n        return false;\n      }\n    };\n  }\n};\n\n\n// Cancel Address Save\nexport const cancelSave = history => async dispatch => {\n  // dispatch({ type: REMOVE_ALERT });\n  dispatch({ type: REMOVE_ERRORS });\n  history.push(\"/addresses\");\n};\n\n// page not found\nexport const notFound = history => async dispatch => {\n  history.push(\"page-not-found\");\n};\n\n// Dispatch Loading\nexport const loadingOnAddressSubmit = () => async dispatch => {\n  await dispatch({ type: LOADING_ON_ADDRESS_SUBMIT });\n};\n\n// Dispatch Loading\nexport const loadingOnAddressList = () => async dispatch => {\n  await dispatch({ type: LOADING_ON_ADDRESS_LIST });\n};\n\n// Dispatch Reset store\nexport const resetComponentStore = () => async dispatch => {\n  await dispatch({ type: RESET_ADDRESS });\n};\n\nexport const setErrors = (errors) => async dispatch => {\n  if (errors) {\n    dispatch({ type: ADDRESS_ERROR });\n    dispatch(setAlert(\"Please correct the following errors\", \"danger\"));\n    errors.forEach(error => {\n      dispatch(setErrorsList(error.msg, error.param));\n    });\n  }\n}\n\nexport const showAlert = (msg) => async dispatch => {\n  if (msg) {\n    dispatch(setAlert(msg, \"danger\"));\n  }\n}\n\n// Load Page/Show Page\nexport const loadPage = () => async dispatch => {\n  await dispatch({ type: LOAD_PAGE });\n}\n\n// reset errors\nexport const removeErrors = () => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n}","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/packages.js",["1335"],"import axios from \"axios\";\nimport {\n  PACKAGE_ERROR,\n  GET_PACKAGE_LIST,\n  GET_PACKAGE_BY_ID,\n  LOADING_ON_PACKAGE_SUBMIT,\n  RESET_PACKAGE,\n  LAB_LIST_UPDATED,\n  LAB_PARAMATERS_UPDATE,\n  PACKAGE_LIST_UPDATED,\n  PACKAGE_PARAMATERS_UPDATE,\n  REMOVE_ERRORS,\n  LOAD_PAGE,\n} from \"actions/types\";\n\n\n// Get All Packages\nexport const getAllPackages = (params) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnPackageSubmit());\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    config.params = params;\n    const res = await axios.get(`/api/user/lab/tests/packages`, config);\n    if(res.data.status) {\n      dispatch({\n        type: PACKAGE_LIST_UPDATED,\n        payload: res.data.response[0],\n      });\n      dispatch({\n        type: PACKAGE_PARAMATERS_UPDATE,\n        payload: params,\n      });\n    }\n    else {\n      dispatch({\n        type: PACKAGE_ERROR\n      });\n    }\n    return res.data?res.data.response:{status:false};\n  } catch (err) {\n    if(err.response){\n      dispatch({\n        type: PACKAGE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n    }\n  }\n};\n\nexport const getPackageByID = (package_id, params) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnPackageSubmit());\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    config.params = params;\n    const res = await axios.get(`/api/user/lab/tests/packages/${package_id}`, config);\n    if(res.data.status) {\n      dispatch({\n        type: GET_PACKAGE_BY_ID,\n        payload: res.data.response,\n      });\n      dispatch({\n        type: LAB_LIST_UPDATED,\n        payload: res.data.response,\n      });\n      dispatch({\n        type: LAB_PARAMATERS_UPDATE,\n        payload: params,\n      });\n    }\n    else {\n      dispatch({\n        type: PACKAGE_ERROR\n      });\n    }\n    return res.data?res.data.response:{status:false};\n  } catch (err) {\n    if(err.response){\n      dispatch({\n        type: PACKAGE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n    }\n  }\n};\n\n// page not found\nexport const notFound = history => async dispatch => {\n  history.push(\"page-not-found\");\n};\n\n// Dispatch Loading\nexport const loadingOnPackageSubmit = () => async dispatch => {\n  await dispatch({ type: LOADING_ON_PACKAGE_SUBMIT });\n};\n\n// Load Page/Show Page\nexport const loadPage = () => async dispatch => {\n  await dispatch({ type: LOAD_PAGE });\n}\n\n// reset errors\nexport const removeErrors = () => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n}\n\n// Dispatch Reset store\nexport const resetComponentStore = () => async dispatch => {\n  await dispatch({ type: RESET_PACKAGE });\n};","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/LabList.js",["1336","1337","1338","1339","1340"],"import React, { Suspense, useEffect, useState, useMemo } from \"react\";\nimport { Row, Col, Card, Image, Button } from \"react-bootstrap\";\nimport Rating from \"utils/Rating\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport DefaultLabImage from \"assets/images/default_lab.jpg\";\nimport { Spinner } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\n\nconst LabList = ({\n  testData,\n  test_id,\n  test_type,\n  labs,\n  city,\n  isLoggedIn,\n  cart,\n  addToCart = () => {},\n  createGuestCart = () => {},\n  getGuestUserCart = () => {},\n  loadMoreCallback = () => {},\n  totalResults,\n  loading,\n  pageLoaded,\n  sortingParams,\n}) => {\n  const limit = sortingParams.limit;\n  const resultsLoaded = Math.ceil(totalResults/(limit*pageLoaded));\n  const [data, setData] = useState({ labsData: [], disabled: '', loadMoreData: false });\n  const {\n    labsData,\n    disabled,\n    loadMoreData,\n  } = data;\n\n  const loadMore = (e) => {\n    e.preventDefault();\n    const params = {\n      ...sortingParams,\n      page: Math.ceil(totalResults/labs.length),\n    }\n    loadMoreCallback(test_id, test_type, params)\n      .then((res) => {\n        if(res && res.status) setData((d) => ({\n          ...d,\n          loadMoreData: true,\n        }));\n      });\n  }\n\n  // useMemo(() => {\n  //   if(!isLoggedIn) {\n  //     getGuestUserCart();\n  //   }\n  // }, [isLoggedIn])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  !isLoggedIn) \n        getGuestUserCart();\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [isLoggedIn])\n\n  const addItem = (e, item_id, item_type, lab, changeLab) => {\n    let pack = {\n      price: testData.listing_price,\n      name: testData.name\n    }\n    e.preventDefault();\n    // if(!isLoggedIn) history.push(\"/login\");\n    let items = labsData;\n    const productData = { productID: item_id, productType: item_type.toLowerCase(), lab };\n    if(changeLab) productData.changeLab = changeLab;\n    setData((data) => ({...data, disabled: lab }));\n    if (isLoggedIn) {\n      addToCart(productData).then((res) => {\n        if(!res) {\n          console.log(\"product not added\");\n        } else {\n          items = items.map((item) => ({ ...item, isInCart: item.lab._id === lab ? 1: item.isInCart }));\n        }\n        setData((data) => ({ ...data, labsData: items, disabled: '' }));\n      });\n    } else {\n      const guestCart = createGuestCart({ ...productData, ...pack });\n      if (guestCart) {\n        items = items.map((item) => ({ ...item, isInCart: item.lab._id === lab ? 1: item.isInCart }));\n      }\n      else {\n        console.log(\"product not added\");\n      }\n      setData((data) => ({ ...data, labsData: items, disabled: '' }));\n    }\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe &&  labs) {\n        let appendedLabs = labs;\n        if(loadMoreData) appendedLabs = [...labsData, ...appendedLabs];\n        let testLabs = [];\n        if (appendedLabs.length > 0) {\n          if(!isLoggedIn && cart && cart.products && cart.products.length > - 1) {\n            appendedLabs.map((item) => {\n              const foundItem = cart.products.find((product) => product._id === item.test && cart.lab === item.lab._id);\n              item.isInCart = foundItem ? 1: 0;\n              testLabs.push(item);\n            })\n          }\n          else testLabs = appendedLabs;\n        }\n        setData((labsD) => ({ ...labsD, labsData: testLabs, loadMoreData: false }));\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [labs])\n\n  const NoData = () => {\n    return <Col className=\"d-flex justify-content-center align-items-center\"><span><b>No Labs Found</b></span></Col>\n  }\n\n  return (\n    <>\n      <Row style={{ minHeight: 182 }}>\n        {\n          \n        }\n        {\n          loading ? (<Col className=\"d-flex justify-content-center align-items-center\"><Spinner /></Col>) : (\n            labsData.length === 0 ? <NoData /> : (\n              labsData.map((item) => {console.log(item)\n                const { lab, listing_price, isInCart } = item;\n                const certificatesAvailable = !!lab.certificates && lab.certificates.length > 0;\n                const labImage = lab.labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${lab.labImage}`: DefaultLabImage;\n                return (<Col lg={4} md={6} key={lab._id}>\n                  <Card className=\"mb-0\" style={{ \"min-height\" : \"200px\"}}>\n                    <Card.Body>\n                      <Row>\n                        <Col xs={4}>\n                          <Suspense>\n                            <Image src={labImage} alt={lab.labName} roundedCircle/>\n                          </Suspense>\n                        </Col>\n                        <Col xs={8} className=\"d-flex \">\n                          <span style={{ fontSize: \"12px\" }}>\n                            <u className=\"font-weight-semibold mt-1 mb-1\">{lab.labName}</u><br/>\n                            <div title=\"lab ratings\">\n                              <Rating ratings={lab.averageRating} />\n                            </div>\n                            <div>\n                              <span className=\"allcomant\" style={{ fontSize: \"10px\" }}>\n                                <span title=\"total reviews\">{certificatesAvailable ? `(${lab.totalReviews}) | `: `(${lab.totalReviews})`}</span>\n                                <span title=\"certification\">{`${lab.certificates.map((cert) => cert.certificateName).join(\", \")}`}</span>\n                              </span>\n                            </div>\n                            <div className=\"mt-1 mb-2\" style={{\"min-height\" : \"55px\"}}>\n                              <p>{ lab.address.locality ? `${lab.address.locality}, ${city.city}`: city.city }</p>\n                            </div>\n                          </span>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col className=\"col-5  hk-theme-text-col\" style={{'margin-top' : \"10px\"}}><span>{CURRENCY_SYMBOL[listing_price.currency]} {listing_price.amount}</span></Col>\n                        <Col className=\"col-7\">\n                          {\n                            isInCart === 1 ? (\n                              <Link \n                              className=\"btn btn-primary\"\n                                to={{\n                                  pathname:`/cart`,\n                                  hash:\"#content\",\n                                }}\n                              >\n                                Go To Cart\n                              </Link>\n                            ):\n                              (<Button \n                                // className=\"atc\"\n                                onClick={ (e) => addItem(e, test_id, test_type, lab._id) }\n                                disabled={disabled === lab._id}\n                              >\n                                Add To Cart\n                              </Button>)\n                          }\n                        </Col>\n                      </Row>\n                    </Card.Body>\n                  </Card>\n                </Col>)\n              }))\n            )\n        }\n      </Row>\n      {\n        resultsLoaded > 1 && (\n        <Row className=\"text-center\">\n          <Col>\n            {\n              !loading && <a href=\"#\" onClick={loadMore} title=\"load more\">Load More...</a>\n            }\n          </Col>\n        </Row>)\n      }\n    </>\n  )\n}\n\nexport default LabList;\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/tests.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/habits.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/category.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/family.js",["1341"],"import axios from \"axios\";\nimport { setAlert } from \"actions/alert\";\nimport { setErrorsList } from \"actions/errors\";\nimport {\n  REMOVE_ERRORS,\n  FAMILY_CREATED,\n  FAMILY_UPDATED,\n  FAMILY_DELETED,\n  UPDATE_CART_PATIENT,\n  FAMILY_ERROR,\n  GET_FAMILY_BY_ID,\n  GET_SELECTED_PATIENT,\n  FAMILY_LIST_UPDATED,\n  FAMILY_SEARCH_PARAMATERS_UPDATE,\n  LOADING_ON_FAMILY_LIST,\n  LOADING_ON_FAMILY_SUBMIT,\n  RESET_FAMILY,\n  LOAD_PAGE,\n} from \"actions/types\";\nimport { logout } from \"actions/auth\";\n\n\n//get Family list\nexport const getFamilyList = (familyParams) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(loadingOnFamilyList());\n    dispatch({ type: REMOVE_ERRORS });\n    familyParams.query = familyParams.query?familyParams.query:\"\";\n    config.params = familyParams;\n    const res = await axios.get(`/api/user-members`,config);\n    dispatch({\n      type: FAMILY_SEARCH_PARAMATERS_UPDATE,\n      payload: familyParams\n    });\n    dispatch({\n      type: FAMILY_LIST_UPDATED,\n      payload: res.data.response[0]\n    });\n    return res.data?res.data:{status:false};\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: FAMILY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n    }\n  }\n};\n\n//get Family by ID\nexport const getFamilyByID = (family_id) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(loadingOnFamilySubmit());\n    dispatch({ type: REMOVE_ERRORS });\n    console.log(family_id);\n    const res = await axios.get(`/api/user-members/${family_id}`,config);\n    dispatch({\n      type: GET_FAMILY_BY_ID,\n      payload: res.data.response,\n    });\n  } catch (err) {\n    console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: FAMILY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n    }\n  }\n};\n\n//get Family by ID\nexport const getSelectedFamilyByCart = (cart_id) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    dispatch(loadingOnFamilySubmit());\n    dispatch({ type: REMOVE_ERRORS });\n    const res = await axios.get(`/api/user-cart/${cart_id}/patient`,config);\n    dispatch({\n      type: GET_SELECTED_PATIENT,\n      payload: res.data.response,\n    });\n  } catch (err) {\n    console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: FAMILY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n    }\n  }\n};\n\nexport const updateCartPatient = (cart_id, patient_id) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnFamilySubmit());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n\n  const body = { \n    markForSelf : 0\n  }\n  try {\n    const res = await axios.put(`/api/user-cart/${cart_id}/patient/${patient_id}`, body, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: UPDATE_CART_PATIENT,\n        payload: res.data.response\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(\"Patient Selected\", \"success\"));\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: FAMILY_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        \n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n      }\n    }\n    return res ? res?.data.status: null;\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: FAMILY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n    };\n  }\n}\n\n// Create Family\nexport const create = (formData, history) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnFamilySubmit());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.post(`/api/user-members`, formData, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: FAMILY_CREATED,\n        payload: res.data.response\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(history ? \"Family Created\": \"Patient Added\", \"success\"));\n      if(history ===undefined) return true;\n      else history.push(\"/members\");\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: FAMILY_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        \n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n        return false;\n      }\n    }\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: FAMILY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n      return false;\n    };\n  }\n};\n\n// Edit Family\nexport const edit = (family_id, formData, history) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnFamilySubmit());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.put(`/api/user-members/${family_id}`, formData, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: FAMILY_UPDATED,\n        payload: res.data.response\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(history ? \"Family Updated\": \"Patient Updated\", \"success\"));\n      if(history ===undefined) return true;\n      else history.push(\"/members\");\n    } else {\n      const errors = res.data.errors;\n      if (errors) {\n        dispatch({ type: FAMILY_ERROR });\n        dispatch(setAlert(res.data.message, \"danger\"));\n        \n        errors.forEach(error => {\n          dispatch(setErrorsList(error.msg, error.param));\n        });\n        return false;\n      }\n    }\n    return res.data?res.data:{status:false};\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: FAMILY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n      return false;\n    };\n  }\n};\n\n// Delete Family\nexport const remove = (family_id, history) => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n  dispatch(loadingOnFamilyList());\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n  try {\n\n    const res = await axios.delete(`/api/user-members/${family_id}`, config);\n    if (res.data.status === true) {\n      dispatch({\n        type: FAMILY_DELETED,\n        payload: family_id,\n      });\n      // dispatch({ type: REMOVE_ALERT });\n      dispatch(setAlert(res.data.message || \"Family Deleted.\", \"success\"));\n      if(history ===undefined)\n      return true;\n      else history.push(\"/members\");\n    } else {\n      const errors = res.data.errors;\n      dispatch({ type: FAMILY_ERROR });\n    }\n    return false;\n  } catch (err) {\n    // console.log(err);\n    if(err.response){\n      if(err.response.data && err.response.data.tokenStatus === 0){\n        dispatch(logout());\n      }\n      else{\n        dispatch({\n          type: FAMILY_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status }\n        });\n        dispatch(setAlert(err.response.data.message || err.response.statusText, \"danger\"));\n      }\n      return false;\n    };\n  }\n};\n\n\n// Cancel Family Save\nexport const cancelSave = history => async dispatch => {\n  // dispatch({ type: REMOVE_ALERT });\n  dispatch({ type: REMOVE_ERRORS });\n  history.push(\"/members\");\n};\n\n// page not found\nexport const notFound = history => async dispatch => {\n  history.push(\"page-not-found\");\n};\n\n// Dispatch Loading\nexport const loadingOnFamilySubmit = () => async dispatch => {\n  await dispatch({ type: LOADING_ON_FAMILY_SUBMIT });\n};\n\n// Dispatch Loading\nexport const loadingOnFamilyList = () => async dispatch => {\n  await dispatch({ type: LOADING_ON_FAMILY_LIST });\n};\n\n// Dispatch Reset store\nexport const resetComponentStore = () => async dispatch => {\n  await dispatch({ type: RESET_FAMILY });\n};\n\nexport const setErrors = (errors) => async dispatch => {\n  if (errors) {\n    dispatch({ type: FAMILY_ERROR });\n    dispatch(setAlert(\"Please correct the following errors\", \"danger\"));\n    errors.forEach(error => {\n      dispatch(setErrorsList(error.msg, error.param));\n    });\n  }\n}\n\nexport const showAlert = (msg) => async dispatch => {\n  if (msg) {\n    dispatch(setAlert(msg, \"danger\"));\n  }\n}\n\n// Load Page/Show Page\nexport const loadPage = () => async dispatch => {\n  await dispatch({ type: LOAD_PAGE });\n}\n\n// reset errors\nexport const removeErrors = () => async dispatch => {\n  dispatch({ type: REMOVE_ERRORS });\n}","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/List.js",["1342","1343","1344","1345","1346","1347","1348"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Container, Card, Col, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\nimport { \n  getSelectedFamilyByCart,\n  updateCartPatient,\n  getFamilyList,\n  resetComponentStore } from 'actions/customer/family';\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport FamilyCard from './FamilyCard';\nimport Add from \"./Add\";\nimport { FaLongArrowAltLeft, FaLongArrowAltRight } from \"react-icons/fa\";\n\nconst List = ({\n  loading,\n  cart,\n  selectedPatient,\n  familyList: { data, count, page },\n  getFamilyList,\n  getSelectedFamilyByCart,\n  updateCartPatient,\n  onContinue = () => {},\n  goBack = () => {}\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [disableBtn, setDisabled] = useState(false);\n  const [hasMore, setMore] = useState(true);\n  const [selected, setSelected] = useState(selectedPatient);\n\n\n  useEffect(() => {\n    getFamilyList(listParams);\n  }, [getFamilyList, listParams]);\n\n  const loadNextData = () => {\n    const pageNum = 1; // parseInt(page);\n    if(data.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && cart) {\n            getSelectedFamilyByCart(cart);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getSelectedFamilyByCart, cart]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && selectedPatient) {\n          setSelected(selectedPatient);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selectedPatient]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe) {\n          setMore(data.length !== count);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data, count]);\n\n  const onSelect = (id) => {\n    setSelected(id);\n  }\n\n  const onBack = (e) => {\n    e && e.preventDefault();\n    goBack();\n  }\n\n  const onUpdate = (e, id) => {\n    e.preventDefault();\n    if(!id) return alert(\"Please select a patient to continue\");\n    setDisabled(true);\n    updateCartPatient(cart, id).then((status) => {\n      setDisabled(false);\n      if(status) onContinue();\n    });\n  }\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    loading ? <Spinner /> : (\n    <section className=\"sptb\" id=\"content\">\n      <Card>\n        <Card.Header className=\"text-center\">\n          {/* <h4 className=\"title\">Add a new Patient</h4> */}\n          <Button\n            onClick={() => handleShow()}\n            className=\"btn btn-primary m-auto\"\n          >\n            <b>Add a new Patient</b>\n          </Button>\n          <Add\n            getFamilyList={getFamilyList}\n            listParams={listParams}\n            show={show}\n            setShow={setShow}\n            handleClose={handleClose}\n            handleShow={handleShow}\n          />\n        </Card.Header>\n        { \n          data.length > 0 && \n          <div className=\"text-center mt-3 mb-2\">\n            <h3>OR</h3>\n          </div>\n        }\n        <Card.Body className=\"pl-0 pr-0\">\n          <div\n            id=\"scrollableDiv\"\n            style={{ height: 300, overflow: \"auto\" }}\n          >\n            <InfiniteScroll\n              dataLength={data.length}\n              next={loadNextData}\n              hasMore={data.length == count ? false : hasMore}\n              loader={\n                <div className=\"text-center\">\n                  <Loader type=\"grow\" color=\"primary\" />\n                </div>\n              }\n              height={250}\n            >\n              <Container>\n                <FamilyCard\n                  data={data}\n                  getFamilyList={getFamilyList}\n                  listParams={listParams}\n                  selectable={!!cart}\n                  selected={selected}\n                  select={onSelect}\n                />\n              </Container>\n            </InfiniteScroll>\n          </div>\n        </Card.Body>\n        {!!cart && (\n          <div className=\"w-100\">\n            <Col\n              className=\"mt-3 p-0 d-flex justify-content-between\"\n            >\n              <Button\n                color=\"primary\"\n                className={ \"font-weight-bold\" + (disableBtn ? \"disabled box-shadow \": \"\") }\n                onClick={(e) => onBack(e)}\n              >\n                <FaLongArrowAltLeft /> Back\n              </Button>\n              <Button\n                variant={disableBtn ? \"disable\" : \"primary\"}\n                className={ \"font-weight-bold\" + (disableBtn ? \"disabled box-shadow \": \"\") }\n                onClick={(e) => onUpdate(e, selected)}\n              >\n                Next <FaLongArrowAltRight />\n              </Button>\n            </Col>\n          </div>\n        )}\n      </Card>\n    </section>)\n  );\n}\n\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  familyList: PropTypes.object.isRequired,\n  getFamilyList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  updateCartPatient: PropTypes.func.isRequired,\n  getSelectedFamilyByCart: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.family.loadingFamilyList,\n  familyList: state.family.familyList,\n  selectedPatient: state.family.selectedPatient,\n  cartDetails: state.cart.cartDetails,\n  sortingParams: state.family.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  updateCartPatient,\n  getSelectedFamilyByCart,\n  getFamilyList,\n  resetComponentStore\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/CropImg.js",["1349","1350","1351","1352"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Image } from \"react-bootstrap\";\n\nconst CropImg = ({ src, ratio, name }) => {\n  const [cropSrc, setSrc] = useState(null);\n  const image = useRef(null);\n  let imageURL = null;\n  // const croppedImg = async(src, ratio, name) => {\n  //   const newSrc = await cropImg(src, ratio, name);\n  //   console.log(newSrc);\n  //   setSrc(newSrc);\n  // };\n\n\n  const loadImage = function(e) {\n    const img = e.target;\n    const canvas = document.createElement('canvas');\n    const { naturalWidth, naturalHeight } = img;\n    canvas.width = naturalWidth;\n    canvas.height = naturalHeight;\n    // const ctx = canvas.getContext('2d');\n    const aspectRatio = naturalWidth / naturalHeight;\n\n    let croppedImage = { width: naturalWidth, height: naturalHeight };\n    if (aspectRatio > ratio) {\n      croppedImage.width = naturalHeight * ratio;\n    } else if (aspectRatio < ratio) {\n      croppedImage.height = naturalWidth / ratio;\n    }\n    const { height, width } = croppedImage;\n    const cropX = (width - naturalWidth) * .5;\n    const cropY = (height - naturalHeight) * .5;\n    const cropImg = document.createElement('canvas');\n    cropImg.width = width;\n    cropImg.height = height;\n    const ctx = cropImg.getContext('2d');\n    \n    ctx.drawImage(\n      img,\n      0,\n      0,\n    );\n    return new Promise((resolve) => {\n      cropImg.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = name;\n        window.URL.revokeObjectURL(imageURL);\n        imageURL = window.URL.createObjectURL(blob);\n        // resolve(imageURL);\n        setSrc(imageURL);\n      }, 'image/png');\n    });\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    const asyncCall = async () => {\n      try {\n        if(subscribe && image && image.complete) {\n          // croppedImg(src, ratio ?? 16/9, name || \"cropImage.jpeg\");\n        }\n      }\n      catch(err) {\n        throw err;\n      }\n    }\n    asyncCall();\n    return () => {\n      subscribe = false;\n    }\n  }, [image && image.complete]);\n\n  return cropSrc ? (<Image\n    src={cropSrc} // ${process.env.REACT_APP_SERVER_URL}\n    alt={name}\n    className=\"croppedRight\"\n  />): <img src={src} ref={image} crossOrigin=\"anonymous\" onLoad={loadImage}/>\n}\n\nexport default CropImg;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/Edit.js",["1353","1354"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup, Modal } from \"react-bootstrap\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { useLocation, withRouter } from \"react-router-dom\";\nimport { edit, remove, getFamilyByID, resetComponentStore, setErrors, removeErrors, cancelSave, showAlert } from 'actions/customer/family';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport { validateForm } from \"utils/validation\";\nimport 'react-phone-number-input/style.css';\nimport {isValidPhoneNumber} from 'react-phone-number-input';\nimport moment from \"moment\";\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport { REMOVE_ERRORS } from \"actions/types\";\n\nconst Edit = ({\n  value,\n  show,\n  handleClose,\n  getFamilyList,\n  listParams,\n  remove,\n  currentFamily,\n  loading,\n  edit,\n  getFamilyByID,\n  resetComponentStore,\n  setErrors,\n  removeErrors,\n  cancelSave,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    name: \"\",\n    dob: \"\",\n    // age: \"\",\n    gender: \"\",\n    email: \"\",\n    ccode:\"+91\",\n    phone: \"\",\n    iute164_phone:\"+91\",\n  };\n\n  const [formData, setFormData] = useState(initialState);\n\n  const {\n    name,\n    gender,\n    dob,\n    // age,\n    email,\n    ccode,\n    phone,\n    iute164_phone,\n  } = formData;\n\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n  // const value = query.get(\"search_value\");\n\n  //########################## change event for all inputs ##############################\n  const onChange =  e => {\n    const { name, value } = e.target;\n    switch(name) {\n      case \"phone\":\n        setFormData({ \n          ...formData, \n          iute164_phone: ccode+value,\n          [name]: value,\n        });\n        break;\n      default:\n        setFormData({ \n          ...formData, \n          [name]: value,\n        });\n    }\n  };\n\n  const onSelectDOB = (e, date_picker) => {\n    const dob = date_picker.startDate.format(\"DD-MM-YYYY\");\n    setFormData((form) => ({\n      ...form,\n      dob,\n    }));\n  }\n\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(formData, [\n      {\n        param:\"name\",\n        msg: 'Please provide the member name.',\n      },\n      \n      {\n        param:'ccode',\n        msg:'Please provide a valid phone number',\n        actualParam:'phone'\n      },\n      {\n        param:'phone',\n        cond:isValidPhoneNumber,\n        value: iute164_phone,\n        msg:'Please provide a valid phone number',\n      }\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { };\n    for(let i in formData){\n      if(!formData[i] || excludeList[i]) continue;\n      submitData[i] = formData[i];\n    }\n    edit(value, submitData).then((res)=>{\n      if(res){\n        getFamilyList(listParams);\n        reset();\n      }\n    });\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe && value) {\n        try {\n            getFamilyByID(value);\n        }\n        catch(err) {\n          console.log(err);\n        }\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getFamilyByID, value])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe && currentFamily) {\n        try {\n          const { name, gender, dob, email, phone, ccode } = currentFamily;\n          setFormData((form) => ({\n            ...form,\n            name,\n            gender,\n            dob,\n            // age,\n            email,\n            phone,\n            ccode,\n            iute164_phone: ccode + phone,\n          }));\n        }\n        catch(err) {\n          console.log(err);\n        }\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [currentFamily])\n\n  //########################## use dispatch ##############################\n  const dispatch = useDispatch();\n  const reset = () => {\n      dispatch({ type: REMOVE_ERRORS });\n      handleClose();\n      setFormData(initialState);\n  };\n\n  return (\n    // loading ? <Spinner />:\n    <Modal show={show} onHide={handleClose} size=\"lg\" dialogClassName=\"w-100\" className=\"unique-class\">\n    <Modal.Header closeButton>\n      <Modal.Title>Edit Patient</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n    {loading ? <Spinner />:\n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={12}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"name\">\n                        <Form.Label>Name <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          value={name}\n                          name=\"name\"\n                          onChange={onChange}\n                          maxLength={50}\n                          required\n                        />\n                        <Errors key=\"name\" current_key=\"name\" />\n                      </Form.Group>\n                      <Form.Group controlId=\"phone\">\n                        <Form.Label>Phone <span>*</span></Form.Label>\n                        <Form.Control\n                          value={phone}\n                          name=\"phone\"\n                          placeholder=\"XXXXXXXXXX\"\n                          onChange={onChange} \n                          maxLength={10}\n                          minLength={10}\n                          required\n                        />\n                        <Errors current_key=\"phone\" key=\"phone\" />\n                      </Form.Group>\n                      <Row>\n                        <Col>\n                          <Form.Group controlId=\"dob\">\n                            <Form.Label>DOB </Form.Label>\n                            <DateRangePicker\n                              singleDatePicker={true}\n                              parentEl='.unique-class'\n                              showDropdowns={true}\n                              onApply={(e, picker) => onSelectDOB(e, picker)}\n                              minYear={1901}\n                              maxDate={moment(Date.now())}\n                              autoApply={true}\n                              startDate={moment(dob, \"DD-MM-YYYY\")}\n                            >\n                              <Form.Control\n                                className=\"py-2 bg-white border-right-0 border-custom\"\n                                type=\"text\"\n                                maxLength=\"10\"\n                                name=\"dob\"\n                                readOnly\n                                value={dob}\n                                required\n                                placeholder=\"select date of birth\"\n                              />\n                            </DateRangePicker>\n                          </Form.Group>\n                        </Col>\n                        <Col>\n                        <Form.Group controlId=\"gender\">\n                          <Form.Label>Gender </Form.Label>\n                          <Form.Control \n                            as=\"select\"\n                            value={gender}\n                            name=\"gender\"\n                            onChange={onChange}\n                            required\n                          >\n                            <option value=\"n\">Select Gender</option>\n                            <option value=\"m\">Male</option>\n                            <option value=\"f\">Female</option>\n                          </Form.Control>\n                          <Errors key=\"type\" current_key=\"type\" />\n                        </Form.Group>\n                        </Col>\n                      </Row>\n                      <Form.Group controlId=\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control\n                          type=\"email\"\n                          name=\"email\"\n                          value={email}\n                          onChange={onChange}\n                          placeholder=\"example@mail.com\"\n                        />\n                        <Form.Text id=\"emailHelpBlock\" muted>\n                          Provided email will be used to send test reports.\n                        </Form.Text>\n                        <Errors current_key=\"email\" key=\"email\" />\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup className=\"w-100\">\n                    <Button \n                      type=\"submit\"\n                      variant=\"success\"\n                      className=\"mr-2\"\n                    >\n                      Save\n                    </Button>\n                    <Button \n                      type=\"reset\"\n                      onClick={handleClose}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n}\n    </Modal.Body>\n    </Modal>\n  )\n}\n\nEdit.defaultProps = {\n  show: false,\n};\nEdit.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  edit: PropTypes.func.isRequired,\n  getFamilyByID: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.family.loadingFamily,\n  currentFamily: state.family.currentFamily,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  edit,\n  remove,\n  getFamilyByID,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n  showAlert \n})(withRouter(Edit));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/Add.js",["1355","1356","1357"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup, Modal } from \"react-bootstrap\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { create, loadPage, resetComponentStore, setErrors, removeErrors, cancelSave } from 'actions/customer/family';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport { validateForm } from \"utils/validation\";\nimport 'react-phone-number-input/style.css';\nimport {isValidPhoneNumber} from 'react-phone-number-input';\nimport moment from \"moment\";\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport { REMOVE_ERRORS } from \"actions/types\";\n\nconst Add = ({\n  show,\n  handleClose,\n  getFamilyList,\n  listParams,\n  loading,\n  create,\n  resetComponentStore,\n  loadPage,\n  setErrors,\n  removeErrors,\n  cancelSave,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    name: \"\",\n    dob: \"\",\n    // age: \"\",\n    gender: \"\",\n    email: \"\",\n    ccode:\"+91\",\n    phone: \"\",\n    iute164_phone:\"+91\",\n  };\n\n  const [formData, setFormData] = useState(initialState);\n  const [saveLoading , setSaveLoading] = useState(false);\n  const {\n    name,\n    gender,\n    dob,\n    // age,\n    email,\n    ccode,\n    phone,\n    iute164_phone,\n  } = formData;\n\n  //########################## change event for all inputs ##############################\n  const onChange =  e => {\n    const { name, value } = e.target;\n    switch(name) {\n      case \"phone\":\n        setFormData({ \n          ...formData, \n          iute164_phone: ccode+value,\n          [name]: value,\n        });\n        break;\n      default:\n        setFormData({ \n          ...formData, \n          [name]: value,\n        });\n    }\n  };\n\n\n  const onSelectDOB = (e, date_picker) => {\n    const dob = date_picker.startDate.format(\"DD-MM-YYYY\");\n    setFormData((form) => ({\n      ...form,\n      dob,\n    }));\n  }\n\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    setSaveLoading(true)\n    e.preventDefault();\n    removeErrors();\n    const noErrors = validateForm(formData, [\n      {\n        param:\"name\",\n        msg: 'Please provide the member name.',\n      },\n      {\n        param:'ccode',\n        msg:'Please provide a valid phone number',\n        actualParam:'phone'\n      },\n      {\n        param:'phone',\n        cond:isValidPhoneNumber,\n        value: iute164_phone,\n        msg:'Please provide a valid phone number',\n      }\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { };\n    for(let i in formData){\n      if(!formData[i] || excludeList[i]) continue;\n      submitData[i] = formData[i];\n    }\n    create(submitData).then((res)=>{\n      if(res) { getFamilyList(listParams); reset(); }\n    });\n  };\n\n  //########################## use dispatch ##############################\n  const dispatch = useDispatch();\n  const reset = () => {\n      dispatch({ type: REMOVE_ERRORS });\n      handleClose();\n      setFormData(initialState);\n  };\n  return (\n    \n    <Modal show={show} onHide={handleClose} size=\"lg\" dialogClassName=\"w-100\" className=\"unique-class\">\n    <Modal.Header closeButton>\n      <Modal.Title>Add Patient</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n    <section className=\"sptb\" id=\"content\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={12}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"name\">\n                        <Form.Label>Name <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          value={name}\n                          name=\"name\"\n                          onChange={onChange}\n                          maxLength={50}\n                          required\n                        />\n                        <Errors key=\"name\" current_key=\"name\" />\n                      </Form.Group>\n                      <Form.Group controlId=\"phone\">\n                        <Form.Label>Phone <span>*</span></Form.Label>\n                        <Form.Control\n                          value={phone}\n                          name=\"phone\"\n                          onChange={onChange}\n                          placeholder=\"XXXXXXXXXX\"\n                          maxLength={10}\n                          minLength={10}\n                          required\n                        />\n                        <Errors current_key=\"phone\" key=\"phone\" />\n                      </Form.Group>\n                      <Row>\n                        <Col>\n                          <Form.Group controlId=\"dob\">\n                            <Form.Label>DOB</Form.Label>\n                            <DateRangePicker\n                              parentEl='.unique-class'\n                              singleDatePicker={true}\n                              showDropdowns={true}\n                              onApply={(e, picker) => onSelectDOB(e, picker)}\n                              minYear={1901}\n                              maxDate={moment(Date.now())}\n                              autoApply={true}\n                            >\n                              <Form.Control\n                                className=\"py-2 bg-white border-right-0 border-custom\"\n                                type=\"text\"\n                                maxLength=\"10\"\n                                name=\"dob\"\n                                readOnly\n                                value={dob}\n                                required\n                                placeholder=\"select date of birth\"\n                              />\n                            </DateRangePicker>\n                          </Form.Group>\n                        </Col>\n                        <Col>\n                        <Form.Group controlId=\"gender\">\n                          <Form.Label>Gender </Form.Label>\n                          <Form.Control \n                            as=\"select\"\n                            value={gender}\n                            name=\"gender\"\n                            onChange={onChange}\n                            required\n                          >\n                            <option value=\"n\">Select Gender</option>\n                            <option value=\"m\">Male</option>\n                            <option value=\"f\">Female</option>\n                          </Form.Control>\n                          <Errors key=\"type\" current_key=\"type\" />\n                        </Form.Group>\n                        </Col>\n                      </Row>\n                      <Form.Group controlId=\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control\n                          type=\"email\"\n                          name=\"email\"\n                          value={email}\n                          onChange={onChange}\n                          placeholder=\"example@mail.com\"\n                        />\n                        <Form.Text id=\"emailHelpBlock\" muted>\n                          Provided email will be used to send test reports.\n                        </Form.Text>\n                        <Errors current_key=\"email\" key=\"email\" />\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup>\n                    <Button \n                      type=\"submit\"\n                      variant={`${saveLoading ? \"disable\" : \"success\"}` }\n                      className={`mr-2`}\n                    >\n                      Save\n                    </Button>\n                    \n                    \n                    <Button \n                      type=\"reset\"\n                      onClick={reset}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n    </Modal.Body>\n    </Modal>\n  )\n}\n\nAdd.defaultProps = {\n  show: false,\n};\n\nAdd.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  create: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.family.loadingFamily,\n  user: state.auth.user,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  loadPage,\n  create,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n})(withRouter(Add));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/lab-tests.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/order.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/Rating.js",["1358","1359","1360"],"import React, { useState } from 'react'\nimport {\n  Form,\n  CardHeader,\n  CardBody,\n  Button\n} from \"reactstrap\";\nimport Rating from \"utils/Rating\";\n\n\nconst RatingFilter = (props) => {\n  const {\n    filterParams,\n    filterName,\n    filter,\n    filterType,\n    filterKeyName,\n    type,\n    selectFilterOptions = [],\n    onFilterChange = () => { },\n    removeValues,\n  } = props;\n\n  const [values, setValues] = useState(null);\n  const [remove, setRemove] = useState(removeValues);\n  const [toggle, setToggle] = useState(false);\n\n  const handleRatings = (e, value) => {\n    e.preventDefault();\n    const name  = filter;\n    let filters, params;\n    value = {\n      from: value,\n      to: 5,\n    };\n    let filterToggle = toggle;\n    if(toggle && value.from !== values.from) {\n      filterToggle = false;\n    }\n    setToggle(!filterToggle);\n    // Remove Filter\n    if (filterToggle) {\n      filters = filterParams.filters.filter(item => item !== filter);\n      const temp = {};\n      params = {\n        ...filterParams,\n        filters,\n      };\n      for (var i in params.query) {\n        if (i === filter) continue;\n        temp[i] = params.query[i];\n      }\n      params.query = temp;\n      setValues(null);\n    } else {\n      filters = filterParams.filters.includes(filter) ? filterParams.filters : [...filterParams.filters, filter];\n      params = {\n        ...filterParams,\n        filters,\n      };\n      params.query = {\n        ...params.query,\n        [name]: {\n          \"value\": value,\n          \"type\": filterType,\n        }\n      };\n      setValues(value);\n    }\n    onFilterChange(name, value, params);\n    // filterMethod(params);\n  }\n\n  if (remove !== removeValues) {\n    setRemove(removeValues);\n  }\n\n\n  return (\n    <div className=\"border-bottom\">\n      <Form>\n        <CardHeader className=\"border-bottom-0\">\n          <h3 className=\"card-title\">{filterName || filter}</h3>\n        </CardHeader>\n        <CardBody className=\"filter\">\n          {\n            type === \"textSelect\" && selectFilterOptions.map(item => {\n              return <div key={item.value}>\n                <a\n                  href=\"#\" \n                  // name={filter}\n                  onClick={(e) => handleRatings(e, item.value)}\n                  className={`rating-filter ${toggle && values.from === item.value ? 'active': ''}`}\n                  title={item.label}\n                >\n                  <Rating ratings={item.value} fontSize={20} ratingClass=\"text-yellow\" /> &amp; Up\n                </a>\n              </div>\n            })\n          }\n        </CardBody>\n      </Form>\n    </div>\n  )\n}\n\nexport default RatingFilter;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/Price.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/Locality.js",["1361","1362"],"import React, { useState, useRef } from 'react'\nimport {\n  Form,\n  FormGroup,\n  Input,\n  CardHeader,\n  CardBody,\n  Label,\n} from \"reactstrap\";\n// import { AiOutlineSearch } from \"react-icons/ai\";\nimport OpenSearchBox from './SearchBox';\n\nconst LocalityFilter = (props) => {\n  const {\n    loadFilterName,\n    loadFilterType,\n    loadFilterFollowedBy,\n    loadFilterMethod,\n    isMulti,\n    filterParams,\n    filterName,\n    filter,\n    filterType,\n    filterKeyName,\n    type,\n    selectFilterOptions = [],\n    onFilterChange = () => { },\n    removeValues,\n  } = props;\n\n  const [isLoading, setLoading] = useState(false);\n  const [values, setValues] = useState(null);\n  const [selectedOptions, setSelected] = useState({});\n  const [remove, setRemove] = useState(removeValues);\n  const [localData, setLocalData] = useState([]);\n  // const [selectedLocality, setLocality] = useState([]);\n\n  const wrapperRef = useRef(null);\n\n  const handleTextSearch = name => value => {\n    let filters, params;\n    if (!value || (typeof value === \"object\" && value.length !== undefined && value.length < 1)) {\n      filters = filterParams.filters.filter(item => item !== filter);\n      const temp = {};\n      params = {\n        ...filterParams,\n        filters,\n      };\n      for (var i in params.query) {\n        if (i === filter) continue;\n        temp[i] = params.query[i];\n      }\n      params.query = temp;\n      setValues(null);\n    } else {\n      filters = filterParams.filters.includes(filter) ? filterParams.filters : [...filterParams.filters, filter];\n      params = {\n        ...filterParams,\n        filters,\n      };\n      params.query = {\n        ...params.query,\n        [name]: {\n          \"value\": isMulti ? value.map((item) => item.value) : value.value,\n          \"type\": filterType,\n        }\n      };\n      setValues(value);\n    }\n    onFilterChange(name, value, params);\n    // filterMethod(params);\n  }\n\n  if (remove !== removeValues) {\n    setRemove(removeValues);\n    if (removeValues) {\n      // resetFilter();\n      handleTextSearch(filter)(null);\n    }\n  }\n\n  const getItems = (items) => { \n    const name = filter;\n    let filterApplied = false;\n    let filters, params;\n    const filterValues = [];\n    for(let i in items) {\n      let select = false;\n      if(items[i]) {\n        filterApplied = true;\n        select = true;\n        filterValues.push(i);\n      }\n      setSelected((selections) => ({\n        ...selections,\n        [i]: select\n      }));\n    } \n    if(filterApplied) {\n      filters = filterParams.filters.includes(filter) ? filterParams.filters : [...filterParams.filters, filter];\n      params = {\n        ...filterParams,\n        filters,\n      };\n      params.query = {\n        ...params.query,\n        [name]: {\n          \"value\": filterValues,\n          \"type\": filterType,\n        }\n      };\n      setValues(filterValues);\n    } else {\n      filters = filterParams.filters.filter(item => item !== filter);\n      const temp = {};\n      params = {\n        ...filterParams,\n        filters,\n      };\n      for (var i in params.query) {\n        if (i === filter) continue;\n        temp[i] = params.query[i];\n      }\n      setValues(null);\n    }\n    onFilterChange(name, filterValues, params);\n  };\n\n  const loadOptions = inputValue => {\n    let filters, params, query;\n    try {\n      filters = filterParams.filters.includes(\"search\") ? filterParams.filters : [...filterParams.filters, \"search\"];\n      filters = filters.includes(\"status\") ? filters : [...filters, \"status\"];\n      filters = filters.filter((el) => el !== filter);\n      query = filterParams.query.hasOwnProperty(filter) ? delete filterParams.query[filter] : filterParams.query;\n      params = {\n        ...filterParams,\n        filters,\n      };\n      params.query = {\n        ...query,\n        [\"search\"]: {\n          [loadFilterName]: {\n            \"value\": inputValue,\n            \"type\": loadFilterType,\n          }\n        }\n      };\n      !inputValue && setLoading(true);\n      let data = [];\n      if (loadFilterFollowedBy) {\n        data = loadFilterMethod(loadFilterFollowedBy, params).then((res) => {\n          setLoading(false);\n          if (res.status) {\n            const { data } = res.response[0];\n            const result = data.map(list => ({\n              value: list._id,\n              label: list[loadFilterName],\n            }));\n            setLocalData([...result]);\n            return result;\n          }\n        });\n      } else {\n        data = loadFilterMethod(params).then((res) => {\n          setLoading(false);\n          if (res.status) {\n            const { data } = res.response[0];\n            const result = data.map(list => ({\n              value: list._id,\n              label: list[loadFilterName],\n            }));\n            setLocalData([...result]);\n            return result;\n          }\n        });\n      }\n      return data;\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div className=\"border-bottom\">\n      <Form>\n        <CardHeader className=\"border-bottom-0\">\n          <h3 className=\"card-title\">{filterName ? filterName : filter}</h3>\n        </CardHeader>\n        <CardBody className=\"filter\">\n          {\n            type === \"checkbox\" &&\n            <FormGroup className=\"mb-2 mr-sm-2\">\n              <div className=\"closed\" style={{height: 165, overflow: 'hidden'}}>\n                <div className=\"filter-product-checkboxs\">\n                  <DefaultLocalities \n                    filterName={filterName}\n                    options={selectFilterOptions} \n                    selectedItems={getItems} \n                    selectedOptions={selectedOptions}\n                  />\n                  <OpenSearchBox \n                    innerRef={wrapperRef}\n                    isLoading={isLoading}\n                    filter={filter}\n                    filterKeyName={filterKeyName}\n                    filterName={filterName}\n                    data={localData}\n                    selectedOptions={selectedOptions}\n                    searchCallback={loadOptions}\n                    selectedItems={getItems}\n                    onSearch={handleTextSearch}\n                  />\n                </div>\n              </div>\n            </FormGroup>\n          }\n        </CardBody>\n      </Form>\n    </div>\n  )\n}\n\nconst DefaultLocalities = ({ \n  filterName, \n  options, \n  selectedOptions,\n  selectedItems = () => [] \n}) => {\n  const markSelected = (id, action) => {\n    const selections = { ...selectedOptions, [id]: action === \"select\" };\n    selectedItems(selections);\n  }\n\n  return options.map((item) => {\n    return (\n    <LocalityItem item={item} selected={selectedOptions[item.value]} filterName={filterName} onSelect={markSelected} />\n    )\n  })\n}\n\nconst LocalityItem = ({\n  item,\n  filterName,\n  onSelect,\n  selected,\n}) => {\n  const onCheck = (id) => {\n    onSelect(id, selected ? \"unselect\": \"select\");\n  }\n\n  return (\n    <div className=\"radio__optionRadio\" key={item.value}>\n      <Input\n        type=\"checkbox\"\n        name={filterName}\n        id={item.value}\n        defaultChecked={!!selected}\n      />\n      <Label \n        onClick={() => onCheck(item.value)} \n        htmlFor={item.value}\n      >\n        {item.label}\n      </Label>\n    </div>\n  )\n\n}\n\nexport default LocalityFilter;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/List.js",["1363","1364","1365","1366","1367"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Container, Card, Col, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\nimport { getAddressList, resetComponentStore, getSelectedAddressByCart, updateCartAddress } from 'actions/customer/address';\nimport Spinner from \"views/Spinner\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from 'reactstrap';\nimport AddressCard from './AddressCard';\nimport Add from \"./Add\";\nimport ServingLabs from \"../ServingLabs\";\nimport { FaLongArrowAltRight, FaLongArrowAltLeft } from \"react-icons/fa\";\n\nconst List = ({\n  loading,\n  cart,\n  selectedAddress,\n  addressList: { data, count },\n  getAddressList,\n  getSelectedAddressByCart,\n  updateCartAddress,\n  goBack = () => {},\n  onContinue = () => {},\n}) => {\n\n  const initialSortingParams = {\n    limit: 12,\n    page: 1,\n    orderBy: 'averageRating',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [disableBtn, setDisabled] = useState(false);\n  const [hasMore, setMore] = useState(true);\n  const [selected, setSelected] = useState(selectedAddress);\n  const [showModal, setShowModal] = useState(false);\n  const [details, setDetails] = useState(null);\n  // useMemo(() => {\n  //   getAddressList(listParams);\n  // }, [getAddressList, listParams]);\n\n  useEffect(() => {\n    getAddressList(listParams);\n  }, [getAddressList, listParams]);\n\n  // useMemo(() => {\n  //   if(cart) {\n  //     getSelectedAddressByCart(cart);\n  //   }\n  // }, [getSelectedAddressByCart, cart]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && cart) {\n            getSelectedAddressByCart(cart);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getSelectedAddressByCart, cart])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && selectedAddress) {\n          setSelected(selectedAddress);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selectedAddress])\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe) {\n          setMore(data.length !== count);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [data, count]);\n\n  const loadNextData = () => {\n    const pageNum = 1; // parseInt(page);\n    if(data.length >= count) return setMore(false);\n    setListParams((params) => ({\n      ...params,\n      page: pageNum + 1,\n    }));\n  }\n\n  const onSelect = (id) => {\n    setSelected(id);\n  }\n\n  const onModalClose = (id) => {\n    if(id) {\n      setDisabled(true);\n      updateCartAddress(cart, id).then((data) => {\n        if(typeof data === \"object\" && data.reason === \"LAB_NOT_SERVING\") {\n          setShowModal(true);\n          setDetails({\n            lab: data.lab,\n            locality: data.area,\n          });\n        }\n        else if(typeof data === \"boolean\" && data) onContinue();\n        setDisabled(false);\n      });\n    } \n    setShowModal(false);\n  }\n\n  const onBack = (e) => {\n    e && e.preventDefault();\n    goBack();\n  }\n\n  const onUpdate = (e, id) => {\n    e.preventDefault();\n    if(!id) return alert(\"Please select an address to continue\");\n    setDisabled(true);\n    updateCartAddress(cart, id).then((data) => {\n      setDisabled(false);\n      if(typeof data === \"object\" && data.reason === \"LAB_NOT_SERVING\") {\n        setShowModal(true);\n        setDetails({\n          lab: data.lab,\n          locality: data.area,\n          address: id,\n        });\n      }\n      else if(typeof data === \"boolean\" && data) onContinue();\n    });\n  }\n\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    loading ? <Spinner /> : (\n    <section className=\"sptb\">\n      <Card>\n        <Card.Header>\n          {/* <h4 className=\"title\">Do you want to add a new address? </h4> */}\n          <Button\n            onClick={()=>handleShow()}\n            className=\"btn btn-primary m-auto\"\n          >\n            <b>Add a new Address</b>\n          </Button>\n          <Add \n            getAddressList={getAddressList}\n            listParams={listParams}\n            show={show} \n            handleClose={handleClose} \n            handleShow={handleShow} \n          />\n        </Card.Header>\n        { \n          data.length > 0 && \n          <div className=\"text-center mt-3 mb-2\">\n            <h3>OR</h3>\n          </div>\n        }\n        <Card.Body>\n          <div id=\"scrollableDiv\" style={{ height: 300, overflow: \"auto\" }}>\n            <InfiniteScroll\n              dataLength={data.length}\n              next={loadNextData}\n              hasMore={data.length == count ? false : hasMore}\n              height={250}\n              loader={<div className=\"text-center\"><Loader type=\"grow\" color=\"primary\" /></div>}\n            >\n              <Container>\n                <AddressCard \n                  data={data}\n                  getAddressList = {getAddressList}\n                  listParams = {listParams}\n                  selectable={!!cart} \n                  selected={selected}\n                  select={onSelect}\n                />\n              </Container>\n            </InfiniteScroll>\n          </div>\n        </Card.Body>\n        {\n          !!cart && \n          <div className=\"w-100\">\n            <Col className=\"d-flex justify-content-between mt-3 p-0\">\n              <Button\n                color=\"primary\"\n                className={ \"font-weight-bold\" + (disableBtn ? \"disabled box-shadow \": \"\") }\n                onClick={(e) => onBack(e)}\n              >\n                <FaLongArrowAltLeft /> Back\n              </Button>\n              <Button\n                color=\"primary\"\n                className={ \"font-weight-bold\" + (disableBtn ? \"disabled box-shadow \": \"\") }\n                onClick={(e) => onUpdate(e, selected)}\n              >\n                Next <FaLongArrowAltRight />\n              </Button>\n            </Col>\n          </div>\n        }\n      </Card>\n      { \n        details && showModal &&\n          <ServingLabs \n            nonServingLab={details.lab}\n            locality={details.locality}\n            address={details.address}\n            show={showModal}\n            onClose={onModalClose}\n          />\n      }\n    </section>\n    )\n  )\n}\n\n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  addressList: PropTypes.object.isRequired,\n  getAddressList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  updateCartAddress: PropTypes.func.isRequired,\n  getSelectedAddressByCart: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.address.loadingAddressList,\n  addressList: state.address.addressList,\n  selectedAddress: state.address.selectedAddress,\n  cartDetails: state.cart.cartDetails,\n  sortingParams: state.address.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  updateCartAddress,\n  getAddressList,\n  getSelectedAddressByCart,\n  resetComponentStore\n})(withRouter(List));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/Edit.js",["1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379"],"import React, { useMemo, useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup, Modal } from \"react-bootstrap\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { useLocation, withRouter } from \"react-router-dom\";\nimport { edit, remove, getAddressByID, resetComponentStore, setErrors, removeErrors, cancelSave, showAlert } from 'actions/customer/address';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport GMaps from \"utils/GMaps\";\nimport ViewMap from \"./ViewMap\";\nimport { FaLocationArrow, FaTimes } from \"react-icons/fa\";\nimport { validateForm } from \"utils/validation\";\nimport { REMOVE_ERRORS } from \"actions/types\";\n\nfunction roundOff(num, decimalPlaces) {\n  return Math.round((num + Number.EPSILON) * 10**decimalPlaces) / 10**decimalPlaces\n}\n\n\n\nconst Edit = ({\n  value,\n  show,\n  handleClose,\n  getAddressList,\n  listParams,\n  loading,\n  user,\n  edit,\n  currentAddress,\n  remove,\n  getAddressByID,\n  resetComponentStore,\n  setErrors,\n  removeErrors,\n  cancelSave,\n  showAlert,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    type: \"Home\",\n    address:\"\",\n    location: {},\n    current: null,\n    // zip_code:\"\",\n    locality: \"\",\n    locality_name: \"\",\n    zoom: 17,\n    city: {\n      bounds: user?.city?.location,\n      place_id: user?.city.place_id,\n    },\n  };\n\n  const [formData, setFormData] = useState(initialState);\n  const [toggleLocalityBox, setLocalityVisibility] = useState(false);\n\n  const {\n    type,\n    address,\n    location,\n    current,\n    // zip_code,\n    zoom,\n    city,\n  } = formData;\n\n  let delayTimer;\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  let position = useGEOLocation();\n\n  // const value = query.get(\"search_value\");\n\n  const setGMapPlace = location => {\n    const place_id = location.place_id;\n    if (!place_id) return;\n    const city_name = location.name;\n    const addresses = location.address_components;\n    const lat = location.geometry.location ? location.geometry.location.lat() : \"\";\n    const lng = location.geometry.location ? location.geometry.location.lng() : \"\";\n\n    let state = '';\n    let country = '';\n    let short = '';\n\n    addresses.forEach((e) => {\n      switch (e.types[0]) {\n        case 'administrative_area_level_1':\n          state = e.long_name;\n          break;\n        case 'country':\n          country = e.long_name;\n          short = e.short_name;\n          break;\n      }\n    });\n    setFormData((form) => ({\n      ...form,\n      location: { lat, lng },\n      // city: \n    }));\n  }\n\n  const onLocality = loc => {\n    if(loc) {\n      setFormData((form) => ({\n        ...form,\n        locality: loc.place_id,\n        locality_name: loc.locality_name\n      }));\n      setLocalityVisibility(false);\n    } else {\n      setFormData((form) => ({\n        ...form,\n        locality: \"\",\n        locality_name: \"\"\n      }));\n      setLocalityVisibility(true);\n    }\n  }\n\n  const setGMapLocality = v => {\n    if(v && v.place_id) {\n      const place_id = v.place_id;\n      const locality_name = v.name;\n      setFormData((form) => ({ \n        ...form,\n        locality_name,\n        locality: place_id,\n      }));\n      if(!v.place_id) return;\n      if(v.types[0] === \"sublocality_level_1\" || v.types[0] === \"neighborhood\"){\n        removeErrors();\n      }else{\n        const errors = [];\n        errors.push({\n            param:\"g_locality_picker\",\n            msg: \"Please select a valid locality\",\n        });\n        setErrors(errors);\n      }\n    }\n    else {\n      setFormData((form) => ({\n        ...form,\n        locality_name: \"\",\n        locality: \"\",\n      }));\n    }\n  }\n\n  const execWithDelay = (cb, input) => (delay = 750) => {\n    clearTimeout(delayTimer);\n    return new Promise((resolve) => {\n      delayTimer = setTimeout(() => {\n        resolve(cb(input));\n      }, delay);\n    })\n  }\n\n  //########################## change event for all inputs ##############################\n  const onChange = async e => {\n    const { name, value } = e.target;\n    // if(name === \"zip_code\") setEditingZip(true);\n    setFormData({ \n      ...formData, \n      [name]: value,\n    });\n  };\n\n  const onInput = value => {\n    setFormData((form) => ({\n      ...form,\n      address: value,\n    }));\n  }\n\n\n  const currentLocation = () => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setFormData((form) => ({\n        ...form,\n        location: { lat, lng },\n        current: { lat, lng},\n        zoom: 18,\n      }))\n    }\n    function error(err) {\n      console.log(err);\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }\n\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    e.preventDefault();\n    removeErrors();\n    const place_id = city.place_id;\n    if(!place_id) {\n      showAlert(\"Please select your city first to proceed\");\n      return;\n    }\n    const data = {\n      ...formData,\n      location: [location.lng, location.lat],\n      city: place_id,\n    };\n    const noErrors = validateForm(data, [\n      {\n        param:\"type\",\n        msg: 'Please, select the type of address.',\n      },\n      {\n        param:'address',\n        msg:'Please provide the address of customer.',\n      },\n      {\n        param:'location',\n        type:'array',\n        msg:'Please move the marker to pick a location.',\n      }\n      // {\n      //   param:\"zip_code\",\n      //   msg: 'Please provide the zip code of locality',\n      // }\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { zoom: 1 };\n    for(let i in data){\n      if(!data[i] || excludeList[i]) continue;\n      submitData[i] = data[i];\n    }\n    edit(value, submitData).then((res)=>{\n      if(res) { \n        reset();\n        getAddressList(listParams)\n      }\n    });\n    \n  };\n\n\n  const onRemove = (e) => {\n    e.preventDefault();\n    remove(value);\n    reset();\n  }\n\n  const onUpdateLoc = (data) => {\n    setFormData((form) => ({\n      ...form,\n      location: data,\n    }));\n  }\n\n  // useMemo(() => {\n  //   // resetComponentStore();\n  //   getAddressByID(value);\n  // }, [getAddressByID, value]);\n\n  useEffect(() => {\n    // resetComponentStore();\n    getAddressByID(value);\n  }, [getAddressByID, value]);\n\n  // useEffect(() => {\n  //   if(editingZip && zip_code.length > 4 && zip_code.length < 7) {\n  //     execWithDelay(GEOCoder, { zip_code, country: \"IN\" })()\n  //     .then((loc) => {\n  //       if(loc) {\n  //         setFormData((form) => ({\n  //           ...form,\n  //           location: loc,\n  //         }))\n  //       }\n  //     })\n  //   }\n  // }, [zip_code]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      if(subscribe && currentAddress) {\n        try {\n          const { type, address, city, /* zip_code */locality_name, locality, location } = currentAddress;\n          let coords = {};\n          if(location && location.coordinates) {\n            coords = { lat: location.coordinates[1], lng: location.coordinates[0] };\n          } else {\n            currentLocation();\n          }\n          setFormData((form) => ({\n            ...form,\n            type,\n            address,\n            city: {\n              bounds: city.location,\n              place_id: city.place_id,\n            },\n            locality,\n            locality_name,\n            // zip_code,\n            location: coords,\n            zoom: 18,\n          }));\n        }\n        catch(err) {\n          console.log(err);\n        }\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [currentAddress]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe) {\n          setFormData((form) => ({\n            ...form,\n            current: position,\n          }))\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [position]);\n\n  //########################## use dispatch ##############################\n  const dispatch = useDispatch();\n  const reset = () => {\n      dispatch({ type: REMOVE_ERRORS });\n      handleClose();\n      setFormData(initialState);\n  };\n\n  return (\n    // loading ? <Spinner />:\n    <Modal show={show} onHide={handleClose} size=\"lg\" dialogClassName=\"w-100\">\n    <Modal.Header closeButton>\n      <Modal.Title>Edit Address</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n    <section className=\"sptb\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={12}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"address\">\n                        <Form.Label>Address Type <span>*</span></Form.Label>\n                        <Form.Control \n                          as=\"select\"\n                          value={type}\n                          name=\"type\"\n                          onChange={onChange}\n                        >\n                          <option value=\"Home\">Home</option>\n                          <option value=\"Office\">Office</option>\n                          <option value=\"Other\">Others</option>\n                        </Form.Control>\n                        <Errors key=\"type\" current_key=\"type\" />\n                      </Form.Group>\n                      {/* <Form.Group controlId=\"zip_code\">\n                        <Form.Label>Zip Code <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          placeholder=\"XXXXXX\"\n                          value={zip_code}\n                          name=\"zip_code\"\n                          onChange={onChange}\n                        />\n                        <Errors key=\"zip_code\" current_key=\"zip_code\" />\n                      </Form.Group>\n                      <Form.Group controlId=\"location\">\n                        <div>\n                          <div className=\"d-flex\">\n                            <div className=\"w-100\">\n                              <GMaps\n                                label=\"Address\"\n                                onChange={setGMapPlace}\n                                onInputChange={onInput}\n                                defaultValue={address}\n                                placeholder={ \"Enter your address here\" }\n                                location={city.bounds}\n                              />\n                            </div>\n                            <div className=\"mt-auto ml-3 mb-4\">\n                              <Button \n                                onClick={currentLocation}\n                                type=\"button\"\n                                title=\"My location\"\n                              >\n                                <FaLocationArrow />\n                              </Button>\n                            </div>\n                          </div>\n                          <Errors key=\"address\" current_key=\"address\" />\n                          <ViewMap position={location} current={current} updateLocation={onUpdateLoc} zoom={zoom}/>\n                        </div>\n                        <Errors key=\"location\" current_key=\"location\" />\n                      </Form.Group>\n                    */}\n                      <Form.Group controlId=\"location\">\n                        <div>\n                          <div className=\"d-flex\">\n                            <div className=\"w-100\">\n                              <GMaps\n                                label=\"Address\"\n                                onChange={setGMapPlace}\n                                onInputChange={onInput}\n                                placeholder={ \"Enter your address here\" }\n                                defaultValue={address}\n                                location={city.bounds}\n                                findLocalityUsingAddress={true}\n                                onLocalityFound={onLocality}\n                              />\n                            </div>\n                            <div className=\"mt-auto ml-3 mb-4\">\n                              <Button \n                                onClick={currentLocation}\n                                type=\"button\"\n                                title=\"My location\"\n                              >\n                                <FaLocationArrow />\n                              </Button>\n                            </div>\n                          </div>\n                          <Errors key=\"address\" current_key=\"address\" />\n                          { \n                            toggleLocalityBox && <>\n                              <GMaps\n                                label=\"Locality\"\n                                onChange={setGMapLocality}\n                                placeholder={ \"Ex: Vaishali Nagar, Mansarovar\" }\n                                location={city.bounds}\n                                localitySearch={true}\n                                name={\"g_locality_picker\"}\n                              />\n                              <Errors key=\"location\" current_key=\"location\" /> \n                            </>\n                          }\n                          <ViewMap position={location} current={current} updateLocation={onUpdateLoc} zoom={zoom}/>\n                        </div>\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup className=\"w-100\">\n                    <Button \n                      type=\"submit\"\n                      variant=\"success\"\n                      className=\"mr-2\"\n                    >\n                      Save\n                    </Button>\n                    <Button \n                      type=\"reset\"\n                      onClick={reset}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                    {/* <Button \n                      onClick={onRemove}\n                      variant=\"danger\"\n                      className=\"modified ml-auto\"\n                    >\n                      <FaTimes /> Remove\n                    </Button> */}\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n{/* } */}\n    </Modal.Body>\n    </Modal>\n  )\n}\n\n// const GEOCoder = ({ zip_code, country }) => {\n//   const API_KEY = \"AIzaSyDkYcFk5rZMvW2Sf0JnCZm9YGvG-Zwgb2U\";\n//   const ZIP_CODE_API = `https://maps.googleapis.com/maps/api/geocode/json?`;\n//   const components = `components=postal_code:${zip_code}|country:${country}&key=${API_KEY}`;\n//   let data;\n//   return fetch(ZIP_CODE_API+components)\n//     .then(res => res.json())\n//     .then(result => {\n//       const geometry = result.results.filter(d => d[\"geometry\"]);\n//       if(geometry && geometry.length === 1) {\n//         data = geometry[0].geometry.location;\n//       }\n//       return data;\n//     });\n// }\n\nconst useGEOLocation = (position) => {\n  const [coords, setCoords] = useState(null);\n  \n  useEffect(() => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setCoords({lat, lng });  \n    }\n    function error(err) {\n      console.log(err);\n      // setCoords({ ...position });\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n  return coords;\n}\n\nEdit.defaultProps = {\n  show: false,\n};\n\nEdit.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  edit: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  getAddressByID: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.address.loadingAddress,\n  currentAddress: state.address.currentAddress,\n  user: state.auth.user,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  edit,\n  remove,\n  getAddressByID,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n  showAlert \n})(withRouter(Edit));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/Add.js",["1380","1381","1382","1383","1384","1385","1386","1387","1388","1389"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Row, Container, Form, Button, ButtonGroup, Modal } from \"react-bootstrap\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { create, loadPage, resetComponentStore, setErrors, removeErrors, cancelSave, showAlert } from 'actions/customer/address';\nimport Spinner from \"views/Spinner\";\nimport Errors from \"views/Notifications/Errors\";\nimport GMaps from \"utils/GMaps\";\nimport ViewMap from \"./ViewMap\";\nimport { FaLocationArrow } from \"react-icons/fa\";\nimport { validateForm } from \"utils/validation\";\nimport { REMOVE_ERRORS } from \"actions/types\";\n\nfunction roundOff(num, decimalPlaces) {\n  return Math.round((num + Number.EPSILON) * 10**decimalPlaces) / 10**decimalPlaces\n}\n\n\nconst Add = ({\n  show,\n  handleClose,\n  getAddressList,\n  listParams,\n  loading,\n  user,\n  create,\n  resetComponentStore,\n  loadPage,\n  setErrors,\n  removeErrors,\n  cancelSave,\n  showAlert,\n}) => {\n  //########################## set the initial form data ##############################\n\n  const initialState = {\n    type: \"Home\",\n    address:\"\",\n    location: {},\n    current: null,\n    // zip_code:\"\",\n    locality: \"\",\n    locality_name: \"\",\n    zoom: 17,\n    city: {\n      bounds: user?.city?.location,\n      place_id: user?.city.place_id,\n    },\n  };\n\n  const [formData, setFormData] = useState(initialState);\n  const [toggleLocalityBox, setLocalityVisibility] = useState(false);\n  const [saveLoading , setSaveLoading] = useState(false);\n\n  const {\n    type,\n    address,\n    location,\n    current,\n    // zip_code,\n    zoom,\n    city,\n  } = formData;\n\n  let delayTimer;\n\n  let position = useGEOLocation();\n\n  const setGMapPlace = location => {\n    const place_id = location.place_id;\n    if (!place_id) return;\n    const city_name = location.name;\n    const addresses = location.address_components;\n    const lat = location.geometry.location ? location.geometry.location.lat() : \"\";\n    const lng = location.geometry.location ? location.geometry.location.lng() : \"\";\n\n    let state = '';\n    let country = '';\n    let short = '';\n    addresses.forEach((e) => {\n      switch (e.types[0]) {\n        case 'administrative_area_level_1':\n          state = e.long_name;\n          break;\n        case 'country':\n          country = e.long_name;\n          short = e.short_name;\n          break;\n      }\n    });\n    setFormData((form) => ({\n      ...form,\n      location: { lat, lng },\n      // city: \n    }));\n  }\n\n  const onLocality = loc => {\n    if(loc) {\n      setFormData((form) => ({\n        ...form,\n        locality: loc.place_id,\n        locality_name: loc.locality_name\n      }));\n      setLocalityVisibility(false);\n    } else {\n      setFormData((form) => ({\n        ...form,\n        locality: \"\",\n        locality_name: \"\"\n      }));\n      setLocalityVisibility(true);\n    }\n  }\n\n  const setGMapLocality = v => {\n    if(v && v.place_id) {\n      const place_id = v.place_id;\n      const locality_name = v.name;\n      setFormData((form) => ({ \n        ...form,\n        locality_name,\n        locality: place_id,\n      }));\n      if(!v.place_id) return;\n      if(v.types[0] === \"sublocality_level_1\" || v.types[0] === \"neighborhood\"){\n        removeErrors();\n      }else{\n        const errors = [];\n        errors.push({\n            param:\"g_locality_picker\",\n            msg: \"Please select a valid locality\",\n        });\n        setErrors(errors);\n      }\n    }\n    else {\n      setFormData((form) => ({\n        ...form,\n        locality_name: \"\",\n        locality: \"\",\n      }));\n    }\n  }\n\n  const execWithDelay = (cb, input) => (delay = 750) => {\n    clearTimeout(delayTimer);\n    return new Promise((resolve) => {\n      delayTimer = setTimeout(() => {\n        resolve(cb(input));\n      }, delay);\n    })\n  }\n\n  //########################## change event for all inputs ##############################\n  const onChange = async e => {\n    const { name, value } = e.target;\n    setFormData({ \n      ...formData, \n      [name]: value,\n    });\n  };\n\n  const onInput = value => {\n    setFormData((form) => ({\n      ...form,\n      address: value,\n    }));\n  }\n\n  const currentLocation = () => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setFormData((form) => ({\n        ...form,\n        location: { lat, lng },\n        current: position,\n        zoom: 18,\n      }))\n    }\n    function error(err) {\n      console.log(err);\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }\n\n  //########################## submit form data ##############################\n  const onSubmit = e => {\n    setSaveLoading(true)\n\n    e.preventDefault();\n    removeErrors();\n    const place_id = city.place_id;\n    if(!place_id) {\n      showAlert(\"Please select your city first to proceed\");\n      return;\n    }\n    const data = {\n      ...formData,\n      location: [location.lng, location.lat],\n      city: place_id,\n    };\n    const noErrors = validateForm(data, [\n      {\n        param:\"type\",\n        msg: 'Please, select the type of address.',\n      },\n      {\n        param:'address',\n        msg:'Please provide the address of customer.',\n      },\n      {\n        param:'location',\n        type:'array',\n        msg:'Please move the marker to pick a location.',\n      }\n      // {\n      //   param:\"zip_code\",\n      //   msg: 'Please provide the zip code of locality',\n      // }\n    ], setErrors);\n\n    if(!noErrors) return false;\n    const submitData = {};\n    const excludeList = { zoom: 1 };\n    for(let i in data){\n      if(!data[i] || excludeList[i]) continue;\n      submitData[i] = data[i];\n    }\n    create(submitData).then((res)=>{ \n      if(res) {\n        reset();\n        getAddressList(listParams)\n      }\n    });\n  };\n\n  const onUpdateLoc = (data) => {\n    setFormData((form) => ({\n      ...form,\n      location: data,\n    }));\n  }\n\n  // useMemo(() => {\n  //   loadPage();\n  //   resetComponentStore();\n  // }, []);\n\n  useEffect(() => {\n    setFormData((form) => ({\n      ...form,\n      location: position,\n      current: position,\n      zoom: 17,\n    }))\n  }, [position]);\n\n  // useEffect(() => {\n  //   if(zip_code.length > 4 && zip_code.length < 7) {\n  //     execWithDelay(GEOCoder, { zip_code, country: \"IN\" })()\n  //     .then((loc) => {\n  //       if(loc) {\n  //         setFormData((form) => ({\n  //           ...form,\n  //           location: loc,\n  //         }))\n  //       }\n  //     })\n  //   }\n  // }, [zip_code]);\n  \n  //########################## use dispatch ##############################\n  const dispatch = useDispatch();\n  const reset = () => {\n      dispatch({ type: REMOVE_ERRORS });\n      handleClose();\n      setFormData(initialState);\n  };\n\n  return (\n    // loading ? <Spinner />:\n    <Modal show={show} onHide={handleClose}>\n    <Modal.Header closeButton>\n      <Modal.Title>Add Address</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n    <section className=\"sptb\">\n      <Container>\n        <Form className=\"form-horizontal\" onSubmit={ (e) => onSubmit(e) }>\n          <Row>\n            <Col md={12}>\n              <Card>\n                <Card.Body className=\"custom-card\">\n                  <Col md={12}>\n                    \n                    <div className=\"post-content active\">\n                      <Form.Group controlId=\"address\">\n                        <Form.Label>Address Type <span>*</span></Form.Label>\n                        <Form.Control \n                          as=\"select\"\n                          value={type}\n                          name=\"type\"\n                          onChange={onChange}\n                        >\n                          <option value=\"Home\">Home</option>\n                          <option value=\"Office\">Office</option>\n                          <option value=\"Other\">Others</option>\n                        </Form.Control>\n                        <Errors key=\"type\" current_key=\"type\" />\n                      </Form.Group>\n                      {/* <Form.Group controlId=\"zip_code\">\n                        <Form.Label>Zip Code <span>*</span></Form.Label>\n                        <Form.Control \n                          type=\"text\" \n                          placeholder=\"XXXXXX\"\n                          value={zip_code}\n                          name=\"zip_code\"\n                          onChange={onChange}\n                        />\n                        <Errors key=\"zip_code\" current_key=\"zip_code\" />\n                      </Form.Group>\n                      <Form.Group controlId=\"location\">\n                        <div>\n                          <div className=\"d-flex\">\n                            <div className=\"w-100\">\n                              <GMaps\n                                label=\"Address\"\n                                onChange={setGMapPlace}\n                                onInputChange={onInput}\n                                placeholder={ \"Enter your address here\" }\n                                location={city.bounds}\n                              />\n                            </div>\n                            <div className=\"mt-auto ml-3 mb-4\">\n                              <Button \n                                onClick={currentLocation}\n                                type=\"button\"\n                                title=\"My location\"\n                              >\n                                <FaLocationArrow />\n                              </Button>\n                            </div>\n                          </div>\n                          <Errors key=\"address\" current_key=\"address\" />\n                          <ViewMap position={location} current={current} updateLocation={onUpdateLoc} zoom={zoom}/>\n                        </div>\n                        <Errors key=\"location\" current_key=\"location\" />\n                      </Form.Group> */}\n                      <Form.Group controlId=\"location\">\n                        <div>\n                          <div className=\"d-flex\">\n                            <div className=\"w-100\">\n                              <GMaps\n                                label=\"Address\"\n                                onChange={setGMapPlace}\n                                onInputChange={onInput}\n                                placeholder={ \"Enter your address here\" }\n                                location={city.bounds}\n                                findLocalityUsingAddress={true}\n                                onLocalityFound={onLocality}\n                              />\n                            </div>\n                            <div className=\"mt-auto ml-3 mb-4\">\n                              <Button \n                                onClick={currentLocation}\n                                type=\"button\"\n                                title=\"My location\"\n                              >\n                                <FaLocationArrow />\n                              </Button>\n                            </div>\n                          </div>\n                          <Errors key=\"address\" current_key=\"address\" />\n                          { \n                            toggleLocalityBox && <>\n                              <GMaps\n                                label=\"Locality\"\n                                onChange={setGMapLocality}\n                                placeholder={ \"Ex: Vaishali Nagar, Mansarovar\" }\n                                location={city.bounds}\n                                localitySearch={true}\n                                name={\"g_locality_picker\"}\n                              />\n                              <Errors key=\"location\" current_key=\"location\" /> \n                            </>\n                          }\n                          <ViewMap position={location} current={current} updateLocation={onUpdateLoc} zoom={zoom}/>\n                        </div>\n                      </Form.Group>\n                    </div>\n                  </Col>\n                </Card.Body>\n                <Card.Footer>\n                  <ButtonGroup>\n                    <Button \n                      type=\"submit\"\n                      variant={`${saveLoading ? \"disable\" : \"success\"}` }\n                      className=\"mr-2\"\n                    >\n                      Save\n                    </Button>\n                    <Button \n                      type=\"reset\"\n                      onClick={reset}\n                      variant=\"danger\"\n                      className=\"modified\"\n                    >\n                      Cancel\n                    </Button>\n                  </ButtonGroup>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Row>\n        </Form>\n      </Container>\n    </section>\n    </Modal.Body>\n    </Modal>\n  )\n}\n\nconst GEOCoder = ({ zip_code, country }) => {\n  const API_KEY = \"AIzaSyDkYcFk5rZMvW2Sf0JnCZm9YGvG-Zwgb2U\";\n  const ZIP_CODE_API = `https://maps.googleapis.com/maps/api/geocode/json?`;\n  const components = `components=postal_code:${zip_code}|country:${country}&key=${API_KEY}`;\n  let data;\n  return fetch(ZIP_CODE_API+components)\n    .then(res => res.json())\n    .then(result => {\n      const geometry = result.results.filter(d => d[\"geometry\"]);\n      if(geometry && geometry.length === 1) {\n        data = geometry[0].geometry.location;\n      }\n      return data;\n    });\n}\n\nconst useGEOLocation = (position) => {\n  const [coords, setCoords] = useState(null);\n  \n  useEffect(() => {\n    function success(pos) {\n      const posLat = pos.coords.latitude;\n      const posLng = pos.coords.longitude;\n      const lat = roundOff(posLat, 6);\n      const lng = roundOff(posLng, 6);\n      setCoords({lat, lng });  \n    }\n    function error(err) {\n      console.log(err);\n      // setCoords({ ...position });\n      alert(\"Sorry, we are unable to access your location. Please, select it manually.\");\n    }\n    \n    if(!navigator.geolocation) {\n      error(\"GEOLOCATION_SERVICE_NOTFOUND\");\n    }\n    else navigator.geolocation.getCurrentPosition(success, error);\n  }, []);\n  return coords;\n}\n\nAdd.defaultProps = {\n  show: false,\n};\n\nAdd.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  create: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.address.loadingAddress,\n  user: state.auth.user,\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps, {\n  loadPage,\n  create,\n  setErrors,\n  removeErrors,\n  resetComponentStore,\n  cancelSave,\n  showAlert \n})(withRouter(Add));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Family/FamilyCard.js",["1390"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card, ButtonGroup} from \"react-bootstrap\";\nimport { Button } from \"reactstrap\";\nimport { FaCheck, FaEdit } from \"react-icons/fa\";\nimport moment from \"moment\";\nimport classNames from 'classnames';\nimport Edit from \"./Edit\";\n\nconst shortToGender = {\n  \"m\": \"Male\",\n  \"f\": \"Female\",\n  \"o\": \"Other\",\n  \"n\": \"Not Specified\"\n};\n\nconst FamilyCard = ({ \n      data, \n      getFamilyList,\n      listParams,\n      selected, \n      selectable=false, \n      select = () => {}, ...props }) => {\n\n  const [activeElement, setActive] = useState(null);\n\n  const classes = classNames(\n    \"overflow-hidden selectadd border\",\n  );\n\n  const onSelect = (e, id) => {\n    e.preventDefault();\n    setActive(id);\n    select(id);\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      if(subscribe && selected) setActive(selected);\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selected])\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = (e) => { e && e.preventDefault(); setShow(true); }\n  \n// ######################### set member_id on edit ##########################\n  const [editId, setEditId] = useState(\"\");\n  const setId = (id) => {\n    setEditId(id);\n  };\n  const list_component = data.map((row) => {\n    const { _id, name, gender, dob, ccode, phone, email } = row;\n    const today = moment();\n    const DOB = moment(dob, \"DD-MM-YYYY\");\n    const age = moment.duration(today.diff(DOB));\n    const years = age.years();\n    const iute164_phone = ccode+phone;\n    const thisElement = activeElement === _id;\n    return (\n      <Col lg={6} md={12} key={_id} className=\"mb-2\">\n        <Card  \n          className={classes + (thisElement ? \" selected-card\": \"\")}\n        >\n          <Card.Body className=\"address\">\n            <div className=\"item-card9\">\n              <div\n                onClick={()=>handleShow()}\n                onClickCapture={()=>setId(_id)}\n                style={{ \"textDecoration\": \"underline\" }}\n              >\n                <h4 className=\"font-weight-bold mt-1 mb-2\">{name}</h4>\n              </div>\n            </div>\n            <Row>\n              <Col>\n                <p>{`${shortToGender[gender] ? shortToGender[gender] : \"\"} ${years ?  \" | \" + years : \"\"}`}</p>\n                <p>{iute164_phone.replace(\"+91\", \"+91 - \")}</p>\n                <p>{email}</p>\n              </Col>\n            </Row>\n          </Card.Body>\n          <Card.Footer className=\"p-0\">\n            <div className=\"item-card9-footer btn-appointemtn\">\n              <ButtonGroup className=\"w-100\">\n                <a\n                  href=\"#\"\n                  onClick={(e)=>handleShow(e)}\n                  onClickCapture={()=>setId(_id)}\n                  className={ selectable ? \n                    \"btn-outline-light w-50 p-2 border-top-0 border-right-0 border-bottom-0 text-center\":\n                    \"btn-outline-light w-100 p-2 border-top-0 border-right-0 border-bottom-0 text-center\" \n                  }\n                  color=\"primary\"\n                >\n                  <FaEdit className=\"mr-1\" /> Edit\n                </a>\n              {\n                  selectable && \n                  <Button \n                    className={\"modified w-50 p-2 border-top-0 border-right-0 border-bottom-0\" + (thisElement ? \" bg-success text-dark font-weight-semibold selected\": \"\") }\n                    style={{ borderRadius: 0 }}\n                    onClick={(e) => onSelect(e, _id) }\n                    disabled={thisElement}\n                    color=\"primary\"\n                  >\n                    <FaCheck className=\"mr-1\" /> { thisElement ? \"Selected\" : \"Select\" }\n                  </Button>\n                }\n              </ButtonGroup>\n            </div>\n          </Card.Footer>\n        </Card>\n      </Col>\n    )\n  });\n  return (\n  <Row>{list_component}\n  {editId ? \n    <Edit \n        getFamilyList = {getFamilyList} \n        listParams = {listParams}\n        show = {show} \n        handleClose={handleClose} \n        handleShow={handleShow} \n        value={editId} /> \n  : \"\"}\n  </Row>)\n}\n\nexport default FamilyCard;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/Filters/SearchBox.js",["1391","1392"],"import React, { useState, useEffect } from 'react'\nimport {\n  Input,\n  Row,\n  Col,\n  Label,\n  Spinner,\n} from \"reactstrap\";\nimport AsyncSelect from \"react-select/async\";\nimport { components } from \"react-select\";\nimport { AiOutlineSearch, AiOutlineClose } from \"react-icons/ai\";\n\nlet delayTimer;\n\nconst customStyles = {\n  dropdownIndicator: () => ({\n    color: \"#cccccc\",\n    padding: 4,\n    textAlign: \"center\",\n    marginLeft: 4,\n  }),\n  menu: () => ({\n    display: 'none'\n  })\n}\n\n\nfunction useOutsider(ref) {\n  const [outside, setOutside] = useState(false);\n  useEffect(() => {\n      /**\n       * Alert if clicked on outside of element\n       */\n      function handleClickOutside(event) {\n          if (ref.current && !ref.current.contains(event.target)) {\n              // alert(\"You clicked outside of me!\");\n              setOutside(true);\n          }\n      }\n\n      // Bind the event listener\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n          // Unbind the event listener on clean up\n          document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n  }, [ref]);\n  return outside;\n}\n\nconst execWithDelay = (cb, input) => (delay=750) => {\n  clearTimeout(delayTimer);\n  return new Promise(resolve => {\n    delayTimer = setTimeout(() => {\n      resolve(cb(input));\n    }, delay);\n  });\n}\n\nconst dropdownIndicator = ({ innerRef, innerProps, getStyles, ...props }) => {\n  const styles = getStyles(\"dropdownIndicator\", props);\n  return <div ref={innerRef} style={styles} {...innerProps} >\n      <AiOutlineSearch size={24} />\n  </div>\n}\n\nconst control = props => {\n  return <components.Control className=\"input-label-inactive location_search\" {...props} />\n}\n\nconst OpenSearchBox = ({ \n  innerRef,\n  isLoading,\n  filterKeyName,\n  filterName,\n  filter,\n  data,\n  selectedOptions,\n  closeIt = () => {}, \n  onSearch = () => {},\n  searchCallback = () => {},\n  selectedItems = () => [],\n}) => {\n  const [openSearch, setOpenSearch] = useState(false);\n  const clickedOutside = useOutsider(innerRef);\n  if(clickedOutside){ closeIt(); }\n\n  const markSelected = (id, action) => {\n    const selections = { ...selectedOptions, [id]: action === \"select\" };\n    selectedItems(selections);\n  }\n\n  const onSearchLocalities = (e) => {\n    e.preventDefault();\n    setOpenSearch(true);\n  }\n\n  const onSearchClose = (e) => { e && e.preventDefault(); setOpenSearch(false); closeIt(); }\n\n  return (\n    <>\n      <a href=\"#\" onClick={onSearchLocalities} className=\"font-weight-semibold\">\n        <AiOutlineSearch size={18} /> Search Localities\n      </a>\n      {\n        !!openSearch && (<div className=\"location_popup\" ref={innerRef}>\n          <div className=\"location_head\">\n            <div className=\"input_right_icon_wrap\">\n              <AsyncSelect\n                key={filterKeyName || filterName}\n                cacheOptions\n                defaultOptions\n                isLoading={isLoading}\n                styles={customStyles}\n                onChange={onSearch(filter)}\n                components={{\n                  IndicatorSeparator: null,\n                  LoadingIndicator: null,\n                  DropdownIndicator: dropdownIndicator,\n                  Control: control,\n                }}\n                placeholder=\"Search Locality Here...\"\n                loadOptions={(input) => execWithDelay(searchCallback, input)()}\n              />\n            </div>\n            <a href=\"#\" className=\"text-gray\" onClick={onSearchClose} title=\"close\"><AiOutlineClose size={24}/></a>\n          </div>\n          <div className=\"locWrapSec pt-3\">\n            <div className=\"location_column topLocalities\">\n              <div className={\"location_checkbox_wrapper\" + (isLoading ? \" bg-gray-lighter d-flex justify-content-center align-items-center\": \"\") }>\n                <Row>\n                {\n                  isLoading ? <Col className=\"text-center\"><Spinner /></Col>:\n                    data.map((item, idx) => {\n                      return <Col xl={3} md={4} sm={6} key={'modal_'+item.value}>\n                        <LocalityItem \n                          item={item} \n                          selected={selectedOptions[item.value]} \n                          filterName={filterName} \n                          onSelect={markSelected} \n                        />\n                      </Col>\n                    })\n                }\n                </Row>\n              </div>\n            </div>\n          </div>\n        </div>)\n      }\n    </>\n  )\n}\n\nconst LocalityItem = ({\n  item,\n  filterName,\n  onSelect,\n  selected,\n}) => {\n  const onCheck = (id) => {\n    onSelect(id, selected ? \"unselect\": \"select\");\n  }\n  return (\n    <div className=\"radio__optionRadio\">\n      <Input\n        type=\"checkbox\"\n        name={filterName}\n        id={item.value}\n        readOnly\n        checked={!!selected}\n      />\n      <Label \n        onClick={() => onCheck(item.value)} \n        htmlFor={item.value}\n      >\n        {item.label}\n      </Label>\n    </div>\n  )\n\n}\n\nexport default OpenSearchBox;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/AddressCard.js",["1393","1394","1395","1396"],"import React, { useState, useEffect } from \"react\";\nimport slugify from \"react-slugify\";\nimport { Row, Col, Card, ButtonGroup, Modal} from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"reactstrap\";\nimport { FaEdit, FaCheck } from \"react-icons/fa\";\nimport classNames from 'classnames';\nimport Edit from \"./Edit\";\n\nconst AddressCard = ({ \n    getAddressList,\n    listParams,\n    data = [], \n    selected, \n    selectable=false, \n    select = () => {}, ...props }) => {\n\n  const [activeElement, setActive] = useState(selected);\n\n  const classes = classNames(\n    \"overflow-hidden selectadd border\",\n  );\n\n  const onSelect = (e, id) => {\n    e.preventDefault();\n    setActive(id);\n    select(id);\n  }\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall () {\n      if(subscribe && selected) setActive(selected);\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [selected])\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = (e) => { e && e.preventDefault(); setShow(true); }\n// ######################### set address_id on edit ##########################\n  const [editId, setEditId] = useState(\"\");\n  const setId = (id) => {\n    setEditId(id);\n  };\n  const list_component = data.map((row) => {\n    const { _id, type, address, locality_name, city } = row;\n    const thisElement = activeElement === _id;\n    return (\n      <Col lg={6} md={12} key={_id} className=\"mb-2\">\n        <Card  \n          className={classes + (thisElement ? \" selected-card\": \"\")}\n        >\n          <Card.Body className=\"address\">\n            <div className=\"item-card9\">\n              <div\n                  onClick={()=>handleShow()}\n                  onClickCapture={()=>setId(_id)}\n                  style={{ \"textDecoration\": \"underline\" }}\n                >\n                  <h4 className=\"font-weight-bold mt-1 mb-2\">{type}</h4>\n              </div>\n            </div>\n            <Row>\n              <Col>\n                <p style={{minHeight: 100 }}>{`${address}, ${locality_name}, ${city.name}`}</p>\n              </Col>\n            </Row>\n          </Card.Body>\n          <Card.Footer className=\"p-0\">\n            <div className=\"item-card9-footer btn-appointemtn\">\n              <ButtonGroup className=\"w-100\">\n                <a\n                  href=\"#\"\n                  onClick={(e)=>handleShow(e)}\n                  onClickCapture={()=>setId(_id)}\n                  className={ selectable ? \n                    \"btn btn-outline-light w-50 p-2 border-top-0 border-right-0 border-bottom-0\":\n                    \"btn btn-outline-light w-100 p-2 border-top-0 border-right-0 border-bottom-0\" \n                  }color=\"primary\"\n                >\n                  <FaEdit className=\"mr-1\" /> Edit\n                </a>\n                {\n                  selectable && \n                  <Button \n                    className={\"modified w-50 p-2 border-top-0 border-right-0 border-bottom-0\" + (thisElement ? \" bg-success text-dark selected\": \"\") }\n                    style={{ borderRadius: 0 }}\n                    onClick={(e) => onSelect(e, _id) }\n                    disabled={thisElement}\n                    color=\"primary\"\n                  >\n                    <FaCheck className=\"mr-1\" /> { thisElement ? \"Selected\" : \"Select\" }\n                  </Button>\n                }\n              </ButtonGroup>\n            </div>\n          </Card.Footer>\n        </Card>\n      </Col>\n    )\n  });\n  return <Row>\n  {list_component}\n  {editId !== \"\" ?\n     <Edit \n          getAddressList = {getAddressList}\n          listParams = {listParams}\n          show = {show} \n          handleClose={handleClose} \n          handleShow={handleShow} \n          value={editId} /> \n   : \"\"}\n   </Row>;\n}\n\nexport default AddressCard;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/Address/ViewMap.js",["1397","1398"],"import React, { useEffect, useState } from \"react\";\nimport { Map, Marker, GoogleApiWrapper, Circle } from 'google-maps-react';\nimport { FaMapPin } from \"react-icons/fa\";\n\nconst ViewMap = ({\n    google,\n    position,\n    current,\n    zoom,\n    updateLocation = () => {},\n}) => {\n    // let marker_location = [];\n\n    // const [marker_location, setMarkerLocation] = useState([]);\n    const [coords, setCoords] = useState(position);\n    const [currentLoc, setCurrent] = useState(current);\n\n\n    const updatePosition = (props, m) => { \n      const lat = m.center.lat();\n      const lng = m.center.lng();\n      updateLocation({ lat, lng });\n      // setMarkerLocation()\n      // marker_location = [lat, lng];\n    }\n\n    // useMemo(() => {\n\n    // }, [marker_location])\n\n\n    //Map style\n    const containerStyle = {\n        position: 'relative',\n        width: '100%',\n        height: '400px',\n    };\n\n    /**\n     * \n     * @param {*} bounds Bounds of latLng, \n     * @param {*} mapDim Dimension of Map Wrapper Component\n     * @Ref Taken From Stackoverflow (https://stackoverflow.com/a/13274361)\n     */\n    function getBoundsZoomLevel(bounds, mapDim) {\n      var WORLD_DIM = { height: 256, width: 256 };\n      var ZOOM_MAX = 21;\n  \n      function latRad(lat) {\n          var sin = Math.sin(lat * Math.PI / 180);\n          var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;\n          return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;\n      }\n  \n      function zoom(mapPx, worldPx, fraction) {\n          return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);\n      }\n  \n      var ne = bounds.getNorthEast();\n      var sw = bounds.getSouthWest();\n  \n      var latFraction = (latRad(ne.lat()) - latRad(sw.lat())) / Math.PI;\n  \n      var lngDiff = ne.lng() - sw.lng();\n      var lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;\n  \n      var latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);\n      var lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);\n  \n      return Math.min(latZoom, lngZoom, ZOOM_MAX);\n    }\n\n    useEffect(() => {\n      let subscribe = true;\n      async function asyncCall() {\n        if(subscribe && position && position.lat && position.lng ) {\n          setCoords({ ...position });\n        }\n      }\n      asyncCall();\n      return () => {\n        subscribe = false;\n      }\n    }, [position]);\n\n    // const coords = !!position && { lat: position.lat, lng: position.lng };\n    return (\n      <div>\n        {\n          coords && coords.lat && (\n            <>\n              <div style={{\n                height: 400,\n                marginBottom: 20,\n                alignItems: 'center',\n              }}>\n                <span \n                  style={{ \n                      zIndex: 3,\n                      position: 'relative',\n                      marginTop: -23,\n                      marginLeft: -20,\n                      left: '50%',\n                      top: '50%'\n                    }} \n                  >\n                  <FaMapPin\n                    size={40}\n                    color=\"#f00\" \n                  />\n                </span>\n                <Map\n                  initialCenter={coords}\n                  style={{flex:1}}\n                  containerStyle={containerStyle}\n                  center={coords}\n                  google={google}\n                  maxZoom={21}\n                  minZoom={13}\n                  zoom={zoom}\n                  zoomEnabled={true}\n                  // zoomControl={false}\n                  // fullscreenControl={false}\n                  // streetViewControl={false}\n                  // mapTypeControl={false}\n                  onDragend={updatePosition}\n                >\n                  { !!currentLoc &&\n                    <Marker \n                      draggable={false}\n                      key=\"marker_1\"\n                      icon={{\n                        url: \"https://i.imgur.com/4sVs0zt.png\",\n                        // anchor: new google.maps.Point(17,46),\n                        scaledSize: new google.maps.Size(32, 27)\n                      }}\n                      position={currentLoc}\n                    />\n                  }\n                  {\n                    !!currentLoc && <Circle\n                      center={currentLoc}\n                      radius={50}\n                      strokeColor=\"#85C4DB\"\n                      strokeWeight={1}\n                      fillOpacity={0.2}\n                      fillColor=\"#055E7F\"\n                    />\n                  }\n                </Map>\n              </div>\n            </>\n          )\n        }\n      </div>\n    )\n}\n\nexport default GoogleApiWrapper({ apiKey: process.env.REACT_APP_GOOGLE_MAP_API })(ViewMap)","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Cart/ServingLabs.js",["1399","1400"],"import React, { Suspense, useState, useEffect } from \"react\";\nimport { Col, Card, Image, Container, Row, Button, Modal } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {\n  getChangeLabsList,\n  resetComponentStore,\n} from \"actions/customer/labs\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory,  { \n  PaginationProvider, \n  PaginationTotalStandalone,\n} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport * as Constants from \"constants/index\";\nimport DefaultLabImage from \"assets/images/square.jpg\";\nimport { CURRENCY_SYMBOL } from \"constants/index\";\nimport Rating from \"utils/Rating\";\nimport { changeLabToCart } from 'actions/cart/cart';\nimport { RatingFilter, PriceFilter } from 'utils/Filters';\n\nconst ServingLabs = ({\n  loading,\n  getChangeLabsList,\n  changeLabToCart,\n  locality,\n  nonServingLab,\n  labsList:{ data, count },\n  sortingParams,\n  onClose = () => {},\n  address,\n  show=false,\n  currentCity,\n  resetComponentStore\n}) => {\n\nconst initialData = {\n  disabled: '',\n};\nconst [Data, setData] = useState(initialData);\n\nconst { disabled } = Data;\n\nconst initialSortingParams = {\n  limit: 2,\n  page: 1,\n  orderBy: 'listing_price',\n  ascending: 'desc',\n  query: {\n    \"locality=localityServings\": {\n      type: \"id\",\n      value: locality,\n    }\n  },\n  filters: [\"locality=localityServings\"],\n};\nconst [labsParams, setLabsParams] = useState(initialSortingParams);\n\nconst [onlyOnce, setOnce] = useState(true);\n\n// useMemo(() => {\n//   if(onlyOnce) {\n//     resetComponentStore();\n//     getLocalityList(currentCity.value, { \n//       limit: 2,\n//       page: 1,\n//       orderBy: 'city',\n//       ascending: 'desc',\n//       query: \"\",\n//       filters: []\n//      }).then((res) => {\n//       if (res && res.status) {\n//         const { data } = res.response[0];\n//         const result = data.map(list => ({\n//           value: list._id,\n//           label: list.locality_name,\n//         }));\n//         setDefaultLocality([...result])\n//         return result;\n//       }\n//     })\n//     setOnce(false);\n//   }\n//   getChangeLabsList(labsParams);\n// }, [getChangeLabsList, currentCity, resetComponentStore, setOnce, labsParams]);\n\nuseEffect(() => {\n  let subscribe = true;\n  async function asyncCall() {\n    try {\n      if(subscribe) {\n        if(onlyOnce) {\n          resetComponentStore();\n          setOnce(false);\n        }\n        getChangeLabsList(labsParams);\n      }\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n  asyncCall();\n  return () => { subscribe = false; }\n}, [getChangeLabsList, resetComponentStore, setOnce, labsParams]);\n\n// useMemo(() => {\n//     if (onlyOnce) {\n//       resetComponentStore();\n//       setOnce(false);\n//     }\n//     // getLabTestsPage();\n//   }, [ city, resetComponentStore]);\n\n// useMemo(() => {\n// \tgetChangeLabsList(labsParams);\n// },[Data.labs]);\n\n\nuseEffect(() => {\n  let subscribe = true;\n  async function asyncCall() {\n    try {\n      if(subscribe) {\n        getChangeLabsList(labsParams);\n      }\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n  asyncCall();\n  return () => { subscribe = false; }\n},[getChangeLabsList, Data.labs]);\n\nconst handleTableChange = (\n    type,\n    { page }\n  ) => {\n    let params = {\n      ...sortingParams,\n      page: type === \"search\" ? 1 : page,\n    };\n    setLabsParams(params);\n  };\n\nuseEffect(() => {\n  let subscribe = true;\n  const asyncCall = async () => {\n    try {\n      if (subscribe && data) {\n        setData((prevData) => ({\n          ...prevData,\n          ...data,\n        }));\n      }\n    } catch (err) {\n      // throw err;\n    }\n  };\n  asyncCall();\n  return () => {\n    subscribe = false;\n  };\n}, [data]);\n\nconst handleSorting = (e) => {\n  const { value } = e.target;\n  const params = {\n    ...labsParams,\n    orderBy: 'listing_price',\n    ascending: 'desc',\n    page: 1,\n    limit: 2,\n  };\n  switch(value) {\n    case \"0\": params.orderBy = \"listing_price\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n    case \"1\": params.orderBy = \"averageRating\"; params.ascending = params.ascending === \"asc\" ? \"desc\": \"asc\"; break;\n    default: break;\n  }\n  setLabsParams(params);\n}\nconst onFilterChange = (name, value, newParams) => {\n  setLabsParams((params) => ({...params, ...newParams}));\n};\n\nconst addItem = (e, lab_id ) => {\n  e.preventDefault();\n  let labs = data;\n  const changeLabData = { lab_id };\n  changeLabData.changeLab = 1;\n  // changeLabData.cart_id = cartDetails._id;\n  setData((data) => ({...data, disabled: lab_id }));\n  // if (isLoggedIn) {\n    changeLabToCart(changeLabData).then((res) => {\n      if(!res) {\n        console.log(\"lab not changed\");\n      } else {\n        labs = labs.map((item) => ({ ...item, isInCart: item._id === lab_id ? 1: item.isInCart }));\n        onClose(address);\n      }\n      setData((data) => ({ ...data, labs }));\n    });\n  // }\n}\n  \nconst defaultSorted = [\n  {\n    dataField: \"labName\",\n    order: \"desc\"\n  }\n];\nconsole.log(data)\nconst columns = [\n  {\n    dataField: \"labName\",\n    text: '',\n    formatter: (col, row) => {\n      const { \n        listing_price,\n        discount,\n        MRP,\n        address,\n        listing_price_currency,\n        MRP_currency,\n        isInCart,\n        _id,\n        labName,\n        labImage,\n        averageRating,\n        totalReviews,\n        certificates, } = row;\n              \n      const labImageURL = labImage ? `${process.env.REACT_APP_SERVER_URL}/documents/lab/images/${labImage}`: DefaultLabImage;\n      \n\n      return (\n        <div className=\"tab-content\">\n          <div className=\"tab-pane active\" id=\"tab-11\">\n            <Card className=\"card overflow-hidden\">\n              <div className=\"d-md-flex align-items-center\">\n                <div className=\"item-card9-img p-2\">\n                  <div className=\"item-card9-imgs p-2 mt-3\">\n                    <Suspense>\n                      <Image \n                        className=\"cover-image modal-box\"\n                        alt={labName}\n                        src={labImageURL}\n                      />\n                    </Suspense>\n                  </div>\n                </div>\n                <div className=\"card border-0 mb-0\">\n                  <Card.Body className=\"card-body\">\n                    <div className=\"item-card9\">\n                      <div className=\"text-dark\">\n                        <h4 className=\"font-weight-bold mt-1 mb-2\">{labName}\n                        <i className=\"ion-checkmark-circled  text-success fs-14 ml-1\"></i></h4>\n                      </div>\n                      <span className=\"text-muted fs-13 mt-0\">\n                        { \n                          address.locality ? `${address.locality}, ${currentCity.label}`: currentCity.label\n                        }\n                      </span>\n                      <span className=\"new01 lab_list\">\n                        <div title=\"lab ratings\" className=\"changed mr-1\">\n                          <Rating ratings={averageRating} />\n                        </div>\n                        <span className=\"allcomant\">{`(${totalReviews})`}  | {`${certificates.map((cert) => cert.certificateName).join(\", \")}`} </span>\n                      </span><br/><br/>\n                      <div className=\"item-card9-desc mb-2 mt-1\">\n                        <span className=\"mr-4\"><b>{CURRENCY_SYMBOL[listing_price_currency]}{listing_price} <s>{CURRENCY_SYMBOL[MRP_currency]}{MRP}</s></b></span>\n                      </div>\n                      { discount && discount > 0 ?\n                        <div className=\"spans\">\n                          {`Flat ${discount}% Off`}\n                            \n                        </div>\n                        :null\n                      }\n                      {\n                        isInCart === 1 ? (\n                          <span className=\"selected-lab\">\n                            Selected\n                          </span>\n                        ): (\n                          <Button\n                            className=\"add_cart\"\n                            onClick={ (e) => addItem(e, _id) }\n                            disabled={disabled === _id}\n                          >\n                            Change Lab\n                          </Button>\n                        )\n                      }\n                    </div>\n                  </Card.Body>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      )\n    }\n\n  },\n];\n\nconst customTotal = function (from, to, size) {\n  return (\n\t<div className=\" mb-0\">\n\t  <div className=\"\">\n\t\t<div className=\"p-5 bg-white item2-gl-nav d-flex\">\n\t\t  <h6 className=\"mb-0 mt-2\">Showing {from} to {to} of {size} Labs</h6>\n\t\t\t<ul className=\"nav item2-gl-menu ml-auto\">\n        \n\t\t\t</ul>\n\t\t\t<div className=\"d-flex select2-sm\">\n\t\t\t\t<label className=\"mr-2 mt-1 mb-sm-1\">Sort By:</label>\n        <select \n          name=\"sortBy\" \n          className=\"form-control select2\"\n          onChange={handleSorting}\n        >\n          <option value=\"0\" key=\"sort_price\" >Price</option>\n          <option value=\"1\" key=\"sort_rating\" >Rating</option>\n          <option value=\"999\" key=\"sort_none\" >None</option>\n        </select>\n\t\t\t</div>\n\t\t</div>\n\t  </div>\n\t</div>\n  )\n}\n\nconst options = {\n  page: parseInt(labsParams.page),\n  pageStartIndex: 1,\n  firstPageText: 'First',\n  lastPageText: 'Last',\n  withFirstAndLast: true,\n  hideSizePerPage: true, // Hide the sizePerPage dropdown always\n  hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n  hideSizePerPageRenderer: true,\n  showTotal: true,\n  totalSize: count,\n  paginationTotalRenderer: () => { return null },\n  sizePerPage: labsParams.limit || data.length,\n};\n\nreturn (\n// loading ? <Spinner /> : \n  <Modal\n    show={show}\n    backdrop=\"static\"\n    className=\"fade\"\n    onHide={onClose}\n  >\n    <Modal.Header className=\"pb-0\" closeButton>\n      <Modal.Title className=\"w-100\" >\n        <div className=\"bg-warning m-2 p-2\">\n          <span>{ `Note: ${nonServingLab.labName} is not serving in your area.\n          You can either order from following labs or you may choose walk in option for sample collection.`}</span>\n        </div>\n      </Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n      <section className=\"sptb\">\n        <Container className=\"container\">\n          <Row className=\"row\">\n            <Col  lg={4} md={12}>\n              <Card className=\"card\">\n              <div>\n                <Card.Header className=\"justify-content-center\">\n                  <h3 className=\"card-title\"> Lab Filters</h3>\n                </Card.Header>\n              </div>\n                <PriceFilter \n                  type=\"range\"\n                  filter=\"price=listing_price\"\n                  filterType=\"object\"\n                  filterName=\"Price (INR)\"\n                  filterParams={labsParams}\n                  onFilterChange={onFilterChange}\n                  rangeValue={[0, 10000, 50]}\n                  rangeType=\"price\"\n                  marks={[{\n                    value: 0,\n                    label: CURRENCY_SYMBOL[\"INR\"] + 0,\n                  },\n                  {\n                    value: 10000,\n                    label: CURRENCY_SYMBOL[\"INR\"] + 10000,\n                  }]}\n                />\n                <RatingFilter\n                  type=\"textSelect\"\n                  filter=\"rating=averageRating\"\n                  filterType=\"Number\"\n                  filterName=\"Rating\"\n                  filterParams={labsParams}\n                  onFilterChange={onFilterChange}\n                  selectFilterOptions={[{\n                    value: 4,\n                    label: \"4 Star and Higher\",\n                  },{\n                    value: 3,\n                    label: \"3 Star and Higher\",\n                  },{\n                    value: 2,\n                    label: \"2 Star and Higher\",\n                  }, {\n                    value: 1,\n                    label: \"1 Star and Higher\",\n                  }]}\n                />\n              </Card>\n            </Col>\n            <Col lg={8} md={12}>\n              <div className=\"mb-lg-0\">\n                <div className=\"item2-gl\">\n                <div className=\"list-content p-0\">\n                  <div>\n                  <PaginationProvider\n                    pagination={paginationFactory(options) }\n                    keyField=\"_id\"\n                    columns={columns}\n                    data={data}\n                  >\n                  {\n                    ({\n                    paginationProps,\n                    paginationTableProps,\n                    }) => \n                    <ToolkitProvider\n                      keyField=\"_id\"\n                      data={data}\n                      columns={columns}\n                      search\n                    >\n                      {\n                      toolkitprops => (\n                      <>\n                        <PaginationTotalStandalone  \n                        {...paginationProps}  \n                        paginationTotalRenderer={customTotal}\n                        />\n                        <BootstrapTable\n                        {...toolkitprops.baseProps}\n                        bootstrap4\n                        remote={{ pagination: count > 0 }}\n                        keyField=\"_id\"\n                        data={data}\n                        columns={columns}\n                        loading={loading}\n                        {...paginationTableProps}\n                        onTableChange={handleTableChange}\n                        defaultSorted={defaultSorted}\n                        noDataIndication={Constants.NO_RECORD}\n                        bordered={false}\n                        overlay={ overlayFactory({ \n                          spinner: true, \n                          styles: { overlay: (base) => ({...base, background: 'rgba(192,192,192,0.7)'}) } \n                          }) \n                        }\n                        />\n                      </>\n                      )}\n                    </ToolkitProvider>\n                  }\n                  </PaginationProvider>\n                  </div>\n                </div>\n                </div>\n              </div>\n            </Col>\t\n          </Row>\n        </Container>\n      </section>\n    </Modal.Body>\n  </Modal>\n)\n}\n\nServingLabs.propTypes = {\n  getChangeLabsList: PropTypes.func.isRequired,\n  labsList: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\nconst mapStateToProps = state => ({\n  loading: state.labs.loadingLabsList,\n  labsList: state.labs.labList,\n  sortingParams: state.labs.sortingParams,\n  currentCity: state.citySearch.currentCity,\n});\n\nexport default connect(mapStateToProps, {\n  getChangeLabsList,\n  changeLabToCart,\n  resetComponentStore,\n})(ServingLabs);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/utils/GMaps.js",["1401","1402","1403","1404"],"import { GoogleApiWrapper } from 'google-maps-react';\nimport React, { useRef, useEffect } from \"react\";\nimport classNames from 'classnames'\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  Label,\n  Form,\n  FormGroup,\n} from \"reactstrap\";\nimport Errors from \"views/Notifications/Errors\";\nimport axios from \"axios\";\n\nconst GMaps = ({\n    onChange,\n    onInputChange = () => {},\n    onLocalityFound = () => {},\n    findLocalityUsingAddress = false,\n    defaultValue,\n    google,\n    location,\n    placeholder,\n    types,\n    country,\n    label,\n    name = \"g_location_picker\",\n    isRequired,\n    isDisabled,\n    className,\n}) => {\n    if(isRequired === undefined) isRequired = true;\n    const autocompleteEl = useRef(null);\n    let subscribe = true;\n\n    const classes = classNames(\n      className\n    );\n\n    const Listing = ({ places }) => (\n        <ul>{places && places.map(p => <li key={p.id}>{p.name}</li>)}</ul>\n    );\n\n    const locationGenerate = () => {\n        var defaultBounds = null;\n        try{\n          defaultBounds = new google.maps.LatLngBounds(\n            new google.maps.LatLng(location.south, location.west),\n            new google.maps.LatLng(location.north, location.east),\n          );\n        }\n        catch(err){\n          console.log(err);\n        }\n        // console.log(defaultBounds);\n        return defaultBounds;\n    }\n\n    const renderAutoComplete = () => {    \n        if (!google || !subscribe) return;\n        const bounds = location && locationGenerate(location);\n        const autocomplete = new google.maps.places.Autocomplete(autocompleteEl.current, {\n          bounds,\n        });\n        autocomplete.setFields([\"address_components\", \"geometry\", \"name\", \"place_id\", \"types\"]);\n        bounds && autocomplete.setOptions({strictBounds:true});\n        types && autocomplete.setTypes([types]);\n        country && autocomplete.setComponentRestrictions({country});\n        autocomplete.addListener('place_changed', () => {\n          const place = autocomplete.getPlace();\n          onChange({\n            ...place\n          });\n          if(findLocalityUsingAddress && place.place_id) {\n            const addresses = place.address_components || [];\n            const location = place.geometry.location;\n            let state, city, locality_name, short;\n            addresses.forEach((component) => {\n              const type = component.types[0];\n              if(type === \"administrative_area_level_1\") {\n                state = component.long_name;\n              }\n              else if(type === \"locality\") {\n                city = component.long_name;\n              }\n              else if(type === \"sublocality_level_1\" || type === \"neighborhood\") {\n                locality_name = component.long_name; \n              }\n              else if(type === \"country\") {\n                short = component.short_name;\n                if(locality_name && city && state) {\n                  getLocalityDetails({\n                    location,\n                    locality: locality_name + \", \"+ city + \", \" + state,\n                    country: short,\n                  }).then((locality) => {\n                    onLocalityFound(locality);\n                  })\n                }\n              }\n            })\n          }\n          else {\n            onLocalityFound(false);\n          }\n          onInputChange(autocompleteEl.current.value);\n        });\n    }\n\n    const getLocalityDetails = ({ locality, location, country }) => {\n      let AUTOCOMPLETE_API = \"/api/misc/google-place-autocomplete?\";\n      const data = {\n        lat: location.lat().toFixed(6),\n        lng: location.lng().toFixed(6),\n        locality,\n        country,\n        API_KEY: process.env.REACT_APP_GOOGLE_MAP_API,\n      };\n      return axios.get(AUTOCOMPLETE_API, {\n        params: data,\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      })\n        .then(result => {\n          const res = result.data.response[0];\n          const resultOb = {\n            place_id: res.place_id,\n            locality_name: res.structured_formatting.main_text\n          };\n          return resultOb;\n        });\n    }\n\n    const onInput= (e) => {\n      e.preventDefault();\n      if(subscribe){\n        const value = e.target.value;\n        if(!value){\n          onChange({\n            place_id:\"\",\n            name:\"\",\n            value,\n            address_components:[],\n            geometry:{\n              location:{\n                lat:\"\",\n                lng:\"\",\n              },\n              viewport:{\n                south:\"\",\n                west:\"\",\n                north:\"\",\n                east:\"\",\n              }\n            }\n          });\n        } else {\n          onInputChange(value);\n        }\n      }\n    }\n\n    useEffect(() => {\n        const asyncFunc = async () => subscribe && autocompleteEl.current && renderAutoComplete();\n        asyncFunc();\n        return () => {\n          subscribe = false;\n        }\n    }, [autocompleteEl.current]);\n\n    return (\n      <FormGroup className={className}>\n        <Label htmlFor={name}>\n          {label} {isRequired?(<span>*</span>):\"\"}\n        </Label>                \n        <input\n            className=\"form-control\"\n            type=\"text\"\n            onChange={onInput}\n            defaultValue={defaultValue}\n            placeholder={placeholder}\n            ref={autocompleteEl}\n            disabled={isDisabled}\n            onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\n            id={name}\n            name={name}\n        />\n        <Errors current_key={name} key={name} />\n      </FormGroup>\n    );\n  }\n\n  GMaps.propTypes =  {\n\n    onChange: PropTypes.func.isRequired,\n    google: PropTypes.object.isRequired,\n  };\n\n  const mapStateToProps = state => ({\n    google: state.google,\n    map: state.map,\n  });\n\nexport default connect(mapStateToProps, null)(GoogleApiWrapper({\n    apiKey: process.env.REACT_APP_GOOGLE_MAP_API// 'AIzaSyDkYcFk5rZMvW2Sf0JnCZm9YGvG-Zwgb2U'\n  })(GMaps));","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/Details.js",["1405","1406","1407"],"import React, { useMemo, useEffect, useState, Suspense, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Card, Col, Row, Container, Image } from \"react-bootstrap\";\nimport { getArticleBySlug, resetComponentStore } from \"actions/customer/article\";\nimport { getArticleCategoryList } from \"actions/customer/articleCategories\";\nimport Spinner from \"views/Spinner\";\nimport Moment from \"react-moment\";\nimport { Helmet } from \"react-helmet\";\nimport { withRouter, useLocation } from \"react-router-dom\";\nimport HtmlParser from \"utils/HtmlParser\";\nimport CategoriesCard from './CategoriesCard';\nimport AdsCard from './AdsCard';\n\nconst scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop);\n\nconst Details = ({\n  loading,\n  adsData,\n  getArticleCategoryList,\n  articleCategories,\n  currentArticle,\n  getArticleBySlug,\n  resetComponentStore,\n  history\n}) => {\n  const [onlyOnce, setOnce] = useState(true);\n  const [article, setArticle] = useState({\n    category: {},\n    name: \"\",\n    title: \"\",\n    description: \"\",\n    meta_description: \"\",\n    thumbnail: \"\",\n    created_by: {},\n    created_at: new Date(),\n  });\n  const contentRef = useRef(null)\n  const executeScroll = () => scrollToRef(contentRef)\n\n  const {\n    category,\n    name,\n    title,\n    description,\n    meta_description,\n    thumbnail,\n    created_at,\n    created_by\n  } = article;\n\n  let delayTimer;\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const value = query.get(\"search_value\");\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     const listParams = {\n  //       limit: 10,\n  //       page: 1,\n  //       orderBy: 'name',\n  //       ascending: 'desc',\n  //       query: \"\",\n  //       filters: []\n  //     };\n  //     resetComponentStore();\n  //     getArticleCategoryList(listParams);\n  //     setOnce(false);\n  //   }\n  //   getArticleBySlug(value, history);\n  // }, [getArticleBySlug, value]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(onlyOnce) {\n          const listParams = {\n            limit: 10,\n            page: 1,\n            orderBy: 'name',\n            ascending: 'desc',\n            query: \"\",\n            filters: []\n          };\n          resetComponentStore();\n          getArticleCategoryList(listParams);\n          setOnce(false);\n        }\n        if(subscribe && value) {\n            getArticleBySlug(value, history);\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getArticleBySlug, value]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe && currentArticle) {\n          const {\n            category,\n            name,\n            title,\n            slug,\n            description,\n            meta_description,\n            thumbnail,\n            created_at,\n            created_by\n          } = currentArticle;\n\n          setArticle((data) => ({\n            ...data, \n            category,\n            name,\n            title,\n            slug,\n            description: HtmlParser(description),\n            meta_description,\n            created_by,\n            created_at,\n            thumbnail:process.env.REACT_APP_SERVER_URL + \"/documents/articles/\"+thumbnail,\n          }));\n          executeScroll();\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [currentArticle]);\n\n  return loading ? <Spinner />: (\n    <section className=\"sptb\" ref={contentRef}>\n      <Container>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"description\" content={meta_description} />\n          <meta property=\"og:type\" content={category} />\n          <title>{title}</title>\n        </Helmet>\n        <Row>\n          <Col xl={9} lg={12} md={12}>\n            <Card.Body className=\"mycard single_pages\">\n              <div className=\"newblog-section\">\n                <h1>{name}</h1>\n                <p className=\"date-web\">\n                {created_by.name} / <Moment unix format=\"MMMM DD, YYYY\">{Math.ceil(created_at/1000)}</Moment>\n                </p>\n                <div className=\"imageBox\">\n                  <Suspense>\n                    <Image src={thumbnail} alt={title} rounded/>\n                  </Suspense>\n                </div>\n                <div className=\"blog_description\">{description}</div>\n              </div>\n            </Card.Body>\n          </Col>\n          <Col xl={3} lg={4} md={12}>\n            <CategoriesCard defaultCategories={articleCategories} />\n            <AdsCard data={adsData || []} />\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n} \n\nDetails.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getArticleBySlug: PropTypes.func.isRequired,\n  getArticleCategoryList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.article.loadingArticle,\n  currentArticle: state.article.currentArticle,\n  articleCategories: state.articleCategories.articleCategoryList.data,\n});\n\nexport default connect(mapStateToProps, {\n  getArticleCategoryList,\n  getArticleBySlug,\n  resetComponentStore,\n})(withRouter(Details));\n\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/List.js",["1408","1409","1410","1411"],"import React, { useMemo, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport { getArticleList, resetComponentStore } from \"actions/customer/article\";\nimport { getArticleCategoryList } from \"actions/customer/articleCategories\";\nimport Spinner from \"views/Spinner\";\nimport { withRouter, useLocation } from \"react-router-dom\";\nimport ArticleCard from './ArticleCard';\nimport CategoriesCard from './CategoriesCard';\nimport AdsCard from './AdsCard';\n\nconst List = ({\n  getArticleList,\n  getArticleCategoryList,\n  loading,\n  adsData,\n  articleCategories,\n  articleList: { data, page, count },\n  resetComponentStore,\n}) => {\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'name',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const useQuery = () => new URLSearchParams(useLocation().search);\n  let query = useQuery();\n\n  const type = query.get(\"search_type\");\n  const value = query.get(\"search_value\");\n\n  useMemo(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      getArticleCategoryList(listParams);\n      setOnce(false);\n    }\n    getArticleList(value, listParams);\n  }, [getArticleList, value, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    let subscribe = true;\n    async function asyncCall() {\n      try {\n        if(subscribe) {\n          if(onlyOnce) {\n            resetComponentStore();\n            getArticleCategoryList(listParams);\n            setOnce(false);\n          }\n          if(value) {\n            getArticleList(value, listParams);\n          }\n        }\n      }\n      catch(err) {\n        console.log(err);\n      }\n    }\n    asyncCall();\n    return () => subscribe = false;\n  }, [getArticleList, value, resetComponentStore, setOnce, getArticleCategoryList]);\n\n  return loading ? <Spinner />: (\n    <section className=\"sptb\">\n      <Container>\n        <Row>\n          <Col xl={9} lg={8} md={12} >\n            <ArticleCard data={data}/>\n          </Col>\n          <Col xl={3} lg={4} md={12}>\n            <CategoriesCard defaultCategories={articleCategories} />\n            <AdsCard data={adsData || []} />\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n} \n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getArticleList: PropTypes.func.isRequired,\n  getArticleCategoryList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.article.loadingArticlesList,\n  articleList: state.article.articleList,\n  sortingParams: state.article.sortingParams,\n  articleCategories: state.articleCategories.articleCategoryList.data,\n});\n\nexport default connect(mapStateToProps, {\n  getArticleCategoryList,\n  getArticleList,\n  resetComponentStore,\n})(withRouter(List));\n\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/HealthRecord/List.js",["1412","1413"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Card, Col, Row, Container } from \"react-bootstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory,  { \n  PaginationProvider\n} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport overlayFactory from 'react-bootstrap-table2-overlay';\nimport * as Constants from \"constants/index\";\nimport { getHealthRecordList, resetComponentStore } from \"actions/customer/health_record\";\nimport Spinner from \"views/Spinner\";\nimport { withRouter, Link } from \"react-router-dom\";\n\nconst mapGender = {\n  \"m\": \"Male\",\n  \"f\": \"Female\",\n  \"o\": \"Other\",\n  \"n\": \"Not Specified\"\n}\n\nconst List = ({\n  getHealthRecordList,\n  loading,\n  sortingParams,\n  healthRecordList: { data, page, count },\n  resetComponentStore,\n}) => {\n  const initialSortingParams = {\n    limit: 10,\n    page: 1,\n    orderBy: 'name',\n    ascending: 'desc'\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n\n  const columns = [\n    {\n      dataField: \"name\",\n      text: '',\n      headerAttrs: {\n        hidden: true\n      },\n      formatter: (col, row) => {\n        const { _id, name, health_records, dob, gender } = row;\n        const currentYear = new Date().getFullYear();\n        const age = dob ? (currentYear - parseInt(dob.split(\"-\")[2])): \"\";\n\n        let genderAgeText = `${mapGender[gender && gender.toLowerCase()] ? mapGender[gender && gender.toLowerCase()] : \"\"}${age ? \" | \" + age : \"\"}`\n        return (\n          <li key={_id}>\n            <Link \n              to={{\n                pathname: `/health-records/${name}`,\n                search:`search_type=health_records&search_value=${_id}`\n              }}\n            >{`${name} ${genderAgeText ? \"(\"+ genderAgeText + \")\" : \"\"}`} </Link>\n            <span>{health_records} Health Records</span>\n          </li>\n        )\n      }\n\n    },\n  ];\n\n  const defaultSorted = [\n    {\n      dataField: \"name\",\n      order: \"desc\"\n    }\n  ];\n  const options = {\n    page: parseInt(listParams.page),\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    lastPageText: 'Last',\n    withFirstAndLast: true,\n    // alwaysShowAllBtns: true, // Always show next and previous button\n    hideSizePerPage: true, // Hide the sizePerPage dropdown always\n    hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n    hideSizePerPageRenderer: true,\n    showTotal: true,\n    totalSize: count,\n    paginationTotalRenderer: () => { return null },\n    sizePerPage: data.limit || listParams.limit,\n  };\n\n  const handleTableChange = (\n    type,\n    { page }\n  ) => {\n    let params = {\n      ...sortingParams,\n      page,\n    };\n    setListParams(params);\n  };\n\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     resetComponentStore();\n  //     setOnce(false);\n  //   }\n  //   getHealthRecordList(listParams)\n  // }, [getHealthRecordList, listParams, resetComponentStore, setOnce]);\n\n  useEffect(() => {\n    if(onlyOnce) {\n      resetComponentStore();\n      setOnce(false);\n    }\n    getHealthRecordList(listParams)\n  }, [getHealthRecordList, listParams, resetComponentStore, setOnce]);\n\n  return loading ? <Spinner />: (\n    <section className=\"sptb section-bg\">\n      <Container>\n        <Row>\n          <Col xl={9} lg={12} md={12}>\n            <Card>\n              <Card.Body>\n                <div className=\"card-pay\">\n                  <ul className=\"payment_list\">\n                    <PaginationProvider\n                      pagination={paginationFactory(options) }\n                      keyField=\"_id\"\n                      columns={columns}\n                      data={data}\n                    >\n                    {\n                      ({\n                        paginationTableProps,\n                      }) => \n                        <ToolkitProvider\n                          keyField=\"_id\"\n                          data={data}\n                          columns={columns}\n                        >\n                          {\n                            toolkitprops => (\n                            <>\n                              <BootstrapTable\n                                {...toolkitprops.baseProps}\n                                bootstrap4\n                                remote={{ pagination: count > 0 }}\n                                keyField=\"_id\"\n                                data={data}\n                                columns={columns}\n                                loading={loading}\n                                {...paginationTableProps}\n                                onTableChange={handleTableChange}\n                                defaultSorted={defaultSorted}\n                                noDataIndication={Constants.NO_RECORD}\n                                bordered={false}\n                                overlay={ overlayFactory({ \n                                    spinner: true, \n                                    styles: { overlay: (base) => ({...base, background: 'rgba(192,192,192,0.7)'}) } \n                                  }) \n                                }\n                              />\n                            </>\n                          )}\n                        </ToolkitProvider>\n                    }\n                    </PaginationProvider>\n                  </ul>\n                </div>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n} \n\nList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  healthRecordList: PropTypes.object.isRequired,\n  getHealthRecordList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.healthRecord.loadingHealthRecordsList,\n  healthRecordList: state.healthRecord.healthRecordList,\n  sortingParams: state.healthRecord.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  getHealthRecordList,\n  resetComponentStore,\n})(withRouter(List));\n\n","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/AdsCard.js",["1414"],"import React , { Suspense } from \"react\";\nimport { Card, Image } from \"react-bootstrap\";\n\nconst AdsCard = ({ data, ...props }) => {\n  const list_component = data.map((row) => {\n    const { _id, title, thumbnail, ad_url } = row;\n    const thumbnailURL = `${process.env.REACT_APP_SERVER_URL}/documents/ads/${thumbnail}`;\n    return (\n      <a \n        key={_id} \n        title={title} \n        target=\"_blank\" \n        href={ad_url}\n      >\n        <Suspense>\n          <Image src={thumbnailURL} rounded alt={title} />\n        </Suspense>\n      </a>\n    )\n  });\n  \n  return (\n    list_component.length > 0 && <Card className=\"mb-0\">\n      <Card.Body className=\"ads\">{list_component}</Card.Body>\n    </Card>\n  );\n}\n\nexport default AdsCard;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/CategoriesCard.js",["1415","1416","1417","1418"],"import React, { useState, useEffect, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getArticleCategoryList, resetComponentStore } from \"actions/customer/articleCategories\";\nimport slugify from \"react-slugify\";\nimport { Container, Row, Col, Card, Modal, Form } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst CategoriesCard = ({ \n  getArticleCategoryList,\n  articleCategoriesList: { data, page, count },\n  resetComponentStore,\n  defaultCategories,\n  ...props \n}) => {\n\n\n  const initialSortingParams = {\n    limit: 60,\n    page: 1,\n    orderBy: 'name',\n    ascending: 'desc',\n    query: \"\",\n    filters: []\n  };\n  const [listParams, setListParams] = useState(initialSortingParams);\n  const [onlyOnce, setOnce] = useState(true);\n  const [show, setShow] = useState(false);\n  const [categories, setCategories] = useState([]);\n  let delayTimer;\n\n  const list_component = categories.map((row) => {\n    const { _id, name } = row;\n    return (\n      <div className=\"cat_blog mb-2\" key={_id}>\n        <Link \n          to={{\n            pathname: `/article/category/${slugify(name)}`,\n            search: `?search_type=articles&search_value=${_id}`\n          }}\n          className=\"custom-control\"\n        >\n          <span style={{ borderBottomWidth: \"1px\", borderBottomStyle: \"dashed\" }}>{name}</span>\n        </Link>\n      </div>\n    )\n  });\n  \n  const handleClose = () => setShow(false);\n\n  const handleOpen = (e) => { e.preventDefault(); setShow(true) };\n\n  const execWithDelay = (cb, input) => (delay = 750) => {\n    clearTimeout(delayTimer);\n    return new Promise((resolve) => {\n      delayTimer = setTimeout(() => {\n        resolve(cb(input));\n      }, delay);\n    })\n  }\n\n  const loadCategories = (value) => {\n    const params = {\n      ...listParams,\n      filters: [\"search\"],\n      query: {\n        [\"search\"]: {\n          \"name\": {\n            value: value || \"\",\n            type: \"String\",\n          },\n        },\n      }\n    };\n    setListParams({ ...params });\n  }\n\n  const onChange = (e) => {\n    const { value, name } = e.target;\n    switch(name) {\n      case \"catgorySearch\":\n        execWithDelay(loadCategories, value)();\n        break;\n      default: break;\n    }\n  }\n\n  // useMemo(() => {\n  //   if(onlyOnce) {\n  //     // resetComponentStore();\n  //     setOnce(false);\n  //     if(defaultCategories.length) {\n  //       setCategories([...defaultCategories]);\n  //     }\n  //   }\n  //   show && getArticleCategoryList(listParams);\n  // }, [getArticleCategoryList, listParams, show]);\n\n  useEffect(() => {\n    if(onlyOnce) {\n      // resetComponentStore();\n      setOnce(false);\n      if(defaultCategories.length) {\n        setCategories([...defaultCategories]);\n      }\n    }\n    show && getArticleCategoryList(listParams);\n  }, [getArticleCategoryList, listParams, show]);\n\n  // useEffect(() => {\n  //   let subscribe = true;\n\n  //   async function asyncCall() {\n  //     try {\n  //       if(subscribe) {\n\n  //       }\n  //     }\n  //     catch(err) {\n  //       // console.log(err);\n  //     }\n  //   }\n\n  //   asyncCall();\n\n  //   return () => subscribe = false;\n  // }, []);\n\n  return (<>\n    <Card>\n      <Card.Header>\n        <h3 className=\"card-title\">Categories</h3>\n      </Card.Header>\n      <Card.Body>{list_component.length > 0 ? <>\n      { list_component } \n      <div className=\"cat_blog mt-5 text-center\">\n        <a href=\"#\" style={{ borderBottomWidth: 1, borderBottomStyle: \"solid\" }} onClick={handleOpen}>View All</a>\n      </div>\n      </>: <span>No Categories Available</span> }</Card.Body>\n    </Card>\n    <Modal \n      show={show} \n      onHide={handleClose}\n      size=\"lg\"\n    >\n        <Modal.Header className=\"pb-0\" closeButton>\n          <Modal.Title className=\"w-100\">\n            <span>Categories</span>\n            <div className=\"mt-2 pr-2\">\n              <Form>\n                <Form.Group>\n                  <Form.Control \n                    placeholder=\"Search Category Here...\"\n                    maxLength={50}\n                    type=\"text\"\n                    name=\"catgorySearch\"\n                    id=\"catgorySearch\"\n                    onChange={onChange}\n                  />\n                </Form.Group>\n              </Form>\n            </div>\n          </Modal.Title>\n          \n        </Modal.Header>\n        <Modal.Body>\n          <Container>\n            <Row style={{ maxHeight: 640, minHeight: 160, flexDirection: 'column' }}>\n              { data.length > 0 ? <CatLinks data={data} />: <span>No Categories</span> }\n            </Row>\n          </Container>\n        </Modal.Body>\n      </Modal>\n  </>);\n}\n\nconst CatLinks = ({ data }) => {\n  return data.map(cat => (<Col lg={3} md={4} xs={6} className=\"mb-2 pl-0 ml-0\" key={cat._id}>\n    <Link \n      to={{\n        pathname: `/article/category/${slugify(cat.name)}`,\n        search: `?search_type=articles&search_value=${cat._id}`\n      }}\n      className=\"custom-control pl-1\"\n    >\n      <span style={{ borderBottomWidth: \"1px\", borderBottomStyle: \"dashed\" }}>{cat.name}</span>\n    </Link>\n  </Col>))\n}\n\n\nCategoriesCard.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  getArticleCategoryList: PropTypes.func.isRequired,\n  resetComponentStore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.articleCategories.loadingArticleCategoryList,\n  articleCategoriesList: state.articleCategories.articleCategoryList,\n  sortingParams: state.articleCategories.sortingParams,\n});\n\nexport default connect(mapStateToProps, {\n  getArticleCategoryList,\n  resetComponentStore,\n})(CategoriesCard);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Article/ArticleCard.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/articleCategories.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/article.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Order/OrderTrack.js",["1419","1420","1421"],"import React from 'react';\n\nimport {Row, Col } from \"react-bootstrap\";\n\nconst defaultProps =  {\n    orderStatus : [\n    {text : \"Order placed\" , value : 3},\n    // {text : \"Approved\" , value : 4},\n    {text : \"Assigned\" , value : 5},\n    {text : \"Collected\" , value : 6},\n    {text : \"Delivered\" , value : 7},\n    {text : \"Order Completed\" , value : 8}\n],\n}\n\nconst OrderTrack = (props) => {\n\n    const getCurrentStatusObj = () => {\n        let statusFoundFlag = 0;\n        if(!props.status) return [];\n        const tempField = props.orderStatus;\n        for(var i in tempField){\n            tempField[i].class= 'completed';\n            if(tempField[parseInt(i) + 1]){\n                tempField[parseInt(i) + 1].class= 'active';\n            }\n            if(tempField[i].value == props.status){\n                statusFoundFlag = 1;\n                break;\n            }\n        }\n        return statusFoundFlag ? tempField : [];\n    }\n\n    const renderProgressStepNumbers = () => {\n        let steps = [];\n        getCurrentStatusObj().map( elem => {\n            steps.push(\n                <li key={`step_no_${elem.text}`} style={{ width: 165, marginRight: 10 , 'text-align' : 'center' }}>\n                {elem.text}\n                </li>\n            )\n        })\n        return steps;\n    }\n    \n    const renderProgress = () => {\n        let steps = [];\n        getCurrentStatusObj().map( elem => {\n            steps.push(\n                <li key={`step_${elem.value}`} className={elem.class}>\n                </li>\n            )\n        })\n        return steps;\n    }\n\n    return(\n        <Col>\n            <Row className=\"mb-4\">\n            <div>\n                <ul className=\"stepsName\">\n                    { renderProgressStepNumbers() }\n                </ul>\n                <ul className=\"steps\" style={{\"justify-content\": \"space-around\" , \"margin-left\" : \"-17px\"}}>\n                    { renderProgress() }\n                </ul>\n            </div>\n            </Row>\n        </Col>\n    )\n}\n\nOrderTrack.defaultProps = defaultProps;\nexport default OrderTrack;","/home/dbws/db/health-kangaroo-backend/client/Customer/src/reducers/customer/offers.js",["1422"],"import {\n    COUPON_LIST_UPDATED,\n    COUPON_LIST_PARAMATERS_UPDATE,\n    COUPON_ERROR,\n  } from \"actions/types\";\n  import * as Constants from \"constants/index\";\n  \n  const initialState = {\n    couponList: {\n      page: 1,\n      data: [],\n      count: 0\n    },\n    loadingCouponList: true,\n    error: {},\n    sortingParams: {\n      limit: Constants.DEFAULT_PAGE_SIZE,\n      page: 1,\n      orderBy: \"created_at\",\n      ascending: \"desc\",\n      query: \"\",\n      filters:[],\n    }\n  };\n  \n  export default function(state = initialState, action) {\n    const { type, payload } = action;\n    switch (type) {\n      case COUPON_ERROR:\n        return {\n          ...state,\n          error: payload,\n          loadingCouponList : false\n        };\n      case COUPON_LIST_UPDATED:\n        return {\n          ...state,\n          couponList: {\n            data: [...state.couponList.data , ...payload[0].data],\n            page: payload[0].metadata[0].current_page,\n            count: payload[0].metadata[0].totalRecord\n          },\n          loadingCouponList: false,\n        };\n      case COUPON_LIST_PARAMATERS_UPDATE:\n        return {\n          ...state,\n          sortingParams: { ...payload }\n        };\n      default:\n        return state;\n    }\n  }\n  ","/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/Customer/Offers/index.js",["1423","1424","1425","1426","1427"],"import React from 'react';\nimport { Container, Modal, Form, Button, Row, Col } from \"react-bootstrap\";\nimport Spinner from \"views/Spinner\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Spinner as Loader } from \"reactstrap\";\nimport * as Constants from \"constants/index\";\n\nimport {\n    getCouponsList\n  } from \"actions/customer/offers\";\nconst initialParams = {\n    limit: 20,\n    page: 1,\n    ascending: \"desc\",\n  }\n\nconst Offers = ({\n    getCouponsList,\n    couponList : {data , count , page},\n    loading\n}) => {\n    const [ listParams, setListParams] = React.useState(initialParams);\n    const [hasMore, setMore] = React.useState(true);\n    const [coupon , setCoupon] = React.useState(false);\n\n    const loadNextData = () => {\n        const pageNum =  parseInt(page);\n        console.log(data.length , count, \"sdksvdbjhb\");\n        if (data.length >= count) return setMore(false);\n        setListParams((params) => ({\n            ...params,\n            page: pageNum + 1,\n        }));\n    };\n    \n    React.useEffect(() => {\n        getCouponsList(listParams);\n      }, [getCouponsList , listParams]);\n    \n    const handleViewMoreClick = (coupon) => {\n        setCoupon(coupon)\n    }\n    const handleClose = () => {\n        setCoupon(false)\n\n    }\n\n    React.useEffect(() => {\n        let subscribe = true;\n        async function asyncCall() {\n          try {\n            if(subscribe) {\n              setMore(data.length !== count);\n            }\n          }\n          catch(err) {\n            console.log(err);\n          }\n        }\n        asyncCall();\n        return () => subscribe = false;\n      }, [data, count]);\n    \n    console.log(data , count , hasMore , data.length == count , loading);\n     \n    return (\n        (loading)? <Spinner />: (\n        <>\n            <section className=\"sptb\">\n              <Container>\n\n            <InfiniteScroll\n                dataLength={data.length}\n                next={loadNextData}\n                hasMore={data.length == count ? false : hasMore}\n                height={320}\n                loader={\n                    <div className=\"text-center\">\n                    <Loader type=\"grow\" color=\"primary\" />\n                    </div>\n                }\n                >\n                <Container>\n                    <Row>\n                {\n                    data.map((coupon, index) => {\n                    return (\n                        <>\n                        <Col md={3} xs={12} sm={6} className=\"mb-4 coupon-box\">\n                           <p><b>{coupon.title}</b></p>\n                            <span className=\"mr-4 font-weight-semibold offer-bold\">\n                               {coupon.discount && <span> Flat {coupon.discount.in !== 'per' ? Constants.CURRENCY_SYMBOL[coupon.discount.currency] : \"\"} { coupon.discount.value } {coupon.discount.in == 'per' ? \" %\" : \"\"} Off</span>}\n                            </span>\n                            <span className=\"link\" onClick={(e) =>  handleViewMoreClick(coupon) }>View More</span>\n                        </Col>\n                        </>\n                    );\n                    })\n                }\n                </Row>\n                </Container>\n                </InfiniteScroll>\n              </Container>\n              <Modal show={coupon} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{coupon.title}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <span>Coupon code :  <span className=\"mr-4 font-weight-semibold offer-bold\">{coupon.code}</span>\n                            </span>\n                        <h5 className=\"mt-4\">Description</h5>\n                        <p>{ coupon.description}</p>\n                        <div style={{\"margin-left\": \"17px\", \"line-height\": \"2\"}}>\n                          <ul style={{\"list-style-type\": \"disc\"}}>\n                            {coupon.expiry && <li>Offer is valid from {coupon.expiry.start} to {coupon.expiry.end}</li>}\n                            <li>This offer is valid on minimum purchase amount of Rs. {coupon.minPurchase}</li>\n                          </ul>\n                        </div>\n                    </Modal.Body>\n                </Modal>\n            </section>\n        </>\n        )\n    )\n}\n\n\nOffers.propTypes = {\n    getCouponsList: PropTypes.func.isRequired,\n    // loading: PropTypes.bool.isRequired,\n  };\n  const mapStateToProps = state => ({\n    loading: state.offers.loadingCouponList,\n    couponList: state.offers.couponList\n  });\n  \n  export default connect(mapStateToProps, {\n    getCouponsList,\n  })(Offers);","/home/dbws/db/health-kangaroo-backend/client/Customer/src/actions/customer/offers.js",[],"/home/dbws/db/health-kangaroo-backend/client/Customer/src/views/plugins/validateUtility.js",["1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439"],"'use strict'\n\nconst regexps = {\n\turl: /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i,\n\temail: /^[a-z0-9]+[\\.a-z0-9+_-]+(\\.[a-z0-9+_-]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|consulting|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i,\n\talnum: /^[A-Za-z0-9]+$/,\n\talnumwithspace: /^[A-Za-z0-9 ]+$/,\n\talpha: /^[A-Za-z]+$/,\n\talphawithspace: /^[ A-Za-z ]+$/,\n\tnumber: /^[0-9]+$/,\n    singleWhiteSpace: /^(s{2})$/,\n\tpostcode: /^([1-9][0-9]{5})$/,\n\tmobile: /^(?![9]{10})(?:[6|7|8|9][0-9]{9})$/,\n    pancard: /^[a-zA-Z]{5}\\d{4}[a-zA-Z]{1}$/,\n    DateBelow2000: /^(195[2-9]|19[6-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/,\n    DateBelow2000R : /^(0[1-9]|[12][0-9]|3[01])\\-(0[1-9]|1[0-2])\\-(195[2-9]|19[6-9][0-9])$/,\n    fullnamewithspace:/^([a-zA-z]+\\s[a-zA-z])$/,\n    voterID:/^([a-zA-Z]){3}([0-9]){7}?$/,\n    dl: /^([A-Z]){2}(\\d{2})(\\d{4})(\\d{7})$/,\n    passport:/^[A-Z][0-9]{8}$/,\n    timeString: /^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$/,\n\tdateString: /^(1[0-2]|0?[1-9])\\/(3[01]|[12][0-9]|0?[1-9])\\/(?:[0-9]{2})?[0-9]{2}$/,\n\thexadecimal: /^[0-9a-fA-F]+$/,\n\thexColor: /^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/,\n\tipv4: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\n\tipv6: /^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n\n\t// IPV4 + IPV6\n\tipV4V6: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n\n\t//ONLY IP V4\n\tip: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\n    vehiclenumber: /^[A-Za-z]{2}[0-9]{2}[A-Za-z]{0,2}[0-9]{4}$/,\n    pan: /[A-Za-z]{5}\\d{4}[A-Za-z]{1}$/\n};\n\nconst defaults = {\n    messages: {\n        required: 'This field is required.',\n        email: 'Please enter valid email.',\n        pan:'Please enter valid pan number',\n        url: 'Please enter valid url.',\n        alnum: 'Special chars and spaces are not allowed.',\n        alnumwithspace: 'Special chars are not allowed.',\n        vehiclenumber: 'Please enter valid Registration Number.',\n        alpha: 'Only alphabets without spaces are allowed.',\n        alphawithspace: 'Only alphabets with spaces are allowed.',\n        number: 'Please enter valid number.',\n        postcode: 'Please enter valid six digit postcode.',\n        mobile: 'Please enter valid mobile number.',\n        hexadecimal: 'Please enter valid hexadecimal string.',\n        ip: 'Please enter valid IP.',\n        equalTo: 'String must match.',\n        checked: 'Please select atleast one.',\n        minLength: 'String is too small',\n        maxLength: 'String is too large'\n    },\n};\n\nlet defaultEvent = \"\";\nlet validateUtility = {\n    \n    validate(selector, id , cb) {\n        defaultEvent = selector;        \n        let error = {\n            status: true,\n            message: \"\"\n        }\n\n        var validationType = selector.getAttribute(\"data-vu-type\");\n        if (validationType == null || typeof validationType == 'undefined') return;\n        let msg = selector.getAttribute(\"data-vu-err-msg\");\n        var type = validationType.split(',');\n        for (var element in type) {\n            if (!validateUtility[type[element]](selector.value)) {\n                    error = {\n                        status: false,\n                        message: msg ? msg : defaults.messages[type[element]]\n                    }\n                    break;\n                }\n            }\n\n        cb(error , id , selector)\n            \n    },\n    \n    stopDefault(event) {\n        // if(regex){\n        //     validateUtility[regexType]()\n        // }\n        var validationType = event.target.getAttribute(\"data-vu-type\");\n        if (validationType == null || typeof validationType == 'undefined') return;\n        var type = validationType.split(',');\n        if (type.length == 0) return;\n        var key = String.fromCharCode(event.which);\n        if(event.which == 8){\n            return;\n        }\n        if (type.indexOf('alpha') > -1) {\n            if (!regexps['alpha'].test(key))\n                event.preventDefault();\n            \n        } else if (type.indexOf('alphawithspace') > -1) {\n            if (!regexps['alphawithspace'].test(key))\n                event.preventDefault();\n        } else if (type.indexOf('number') > -1 || type.indexOf('mobile') > -1) {\n            if (!regexps['number'].test(key))\n                event.preventDefault();\n        } else if (type.indexOf('alnumwithspace') > -1) {\n            if (!regexps['alnumwithspace'].test(key))\n                event.preventDefault();\n        } else if (type.indexOf('singleWhiteSpace') > -1) {\n            if (regexps['singleWhiteSpace'].test(event.target.value))\n                event.preventDefault();\n        } \n    }, \n    \n    dynamicRegx() {\n        for (var regexp in regexps) {\n                this._regexpCheck(regexp, regexps);\n        }\n        return this;\n    },\n\n    _regexpCheck: function (regexp, regexps) {\n        validateUtility[regexp] = function (value) {\n            return regexps[regexp].test(value);\n        };\n    },\n    \n    required(value) {\n       return value.toString().trim().length !== 0;\n    },\n    \n    minLength(value, length) {\n        let len = length ? length : defaultEvent ? parseInt(defaultEvent.getAttribute('data-vu-min-length')) : 0;\n        return value.trim().length >= len;\n    },\n    \n    isEmpty(v) {\n        return v.toString().trim().length === 0;\n    },\n\n    minValue: function (v,minValue) {\n        let value = minValue ? minValue : defaultEvent ? parseInt(defaultEvent.getAttribute('data-vu-min-value')) : 0;\n        return  v >= value;\n    },\n\n    equalTo(el , el1) {        \n        return el === el1;\n    },\n\n    maxLength(v, length) {\n        let len = length ? length : defaultEvent ? parseInt(defaultEvent.getAttribute('maxlength')) : defaults.maxLength;\n        return v.trim().length <= len;\n    },    \n    isChecked(el) {\n        //console.log(\"in checked\")\n        return (el.checked ? true : false);\n    },\n}\nvalidateUtility = validateUtility.dynamicRegx();\n\nexport default validateUtility;",{"ruleId":"1440","replacedBy":"1441"},{"ruleId":"1442","replacedBy":"1443"},{"ruleId":"1444","severity":1,"message":"1445","line":10,"column":8,"nodeType":"1446","messageId":"1447","endLine":10,"endColumn":20},{"ruleId":"1448","severity":1,"message":"1449","line":23,"column":21,"nodeType":"1450","messageId":"1451","endLine":23,"endColumn":23},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1453","line":2,"column":28,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":36},{"ruleId":"1444","severity":1,"message":"1454","line":21,"column":10,"nodeType":"1446","messageId":"1447","endLine":21,"endColumn":13},{"ruleId":"1455","severity":1,"message":"1456","line":64,"column":6,"nodeType":"1457","endLine":64,"endColumn":64,"suggestions":"1458"},{"ruleId":"1459","severity":1,"message":"1460","line":83,"column":27,"nodeType":"1461","endLine":89,"endColumn":28},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1462","severity":1,"message":"1463","line":15,"column":1,"nodeType":"1464","endLine":37,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":5,"column":1,"nodeType":"1464","endLine":15,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":34,"column":1,"nodeType":"1464","endLine":143,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":5,"column":1,"nodeType":"1464","endLine":18,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":15,"column":1,"nodeType":"1464","endLine":37,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":13,"column":1,"nodeType":"1464","endLine":35,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":33,"column":1,"nodeType":"1464","endLine":81,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":24,"column":1,"nodeType":"1464","endLine":57,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":17,"column":3,"nodeType":"1464","endLine":55,"endColumn":4},{"ruleId":"1462","severity":1,"message":"1463","line":14,"column":1,"nodeType":"1464","endLine":42,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":9,"column":1,"nodeType":"1464","endLine":20,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":15,"column":1,"nodeType":"1464","endLine":48,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":20,"column":1,"nodeType":"1464","endLine":76,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":15,"column":1,"nodeType":"1464","endLine":48,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":34,"column":1,"nodeType":"1464","endLine":92,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":15,"column":1,"nodeType":"1464","endLine":48,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":31,"column":1,"nodeType":"1464","endLine":80,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":33,"column":1,"nodeType":"1464","endLine":89,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":32,"column":1,"nodeType":"1464","endLine":83,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":31,"column":1,"nodeType":"1464","endLine":76,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":40,"column":1,"nodeType":"1464","endLine":135,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":53,"column":1,"nodeType":"1464","endLine":167,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":30,"column":1,"nodeType":"1464","endLine":75,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":40,"column":1,"nodeType":"1464","endLine":135,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":43,"column":1,"nodeType":"1464","endLine":135,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":35,"column":1,"nodeType":"1464","endLine":98,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":30,"column":1,"nodeType":"1464","endLine":67,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":33,"column":1,"nodeType":"1464","endLine":88,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":33,"column":1,"nodeType":"1464","endLine":88,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":29,"column":1,"nodeType":"1464","endLine":66,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":42,"column":1,"nodeType":"1464","endLine":142,"endColumn":2},{"ruleId":"1465","severity":1,"message":"1466","line":109,"column":5,"nodeType":"1467","messageId":"1451","endLine":113,"endColumn":9},{"ruleId":"1462","severity":1,"message":"1463","line":31,"column":3,"nodeType":"1464","endLine":73,"endColumn":4},{"ruleId":"1444","severity":1,"message":"1468","line":5,"column":3,"nodeType":"1446","messageId":"1447","endLine":5,"endColumn":22},{"ruleId":"1462","severity":1,"message":"1463","line":29,"column":1,"nodeType":"1464","endLine":91,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":12,"column":3,"nodeType":"1464","endLine":35,"endColumn":4},{"ruleId":"1462","severity":1,"message":"1463","line":25,"column":1,"nodeType":"1464","endLine":106,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1463","line":17,"column":1,"nodeType":"1464","endLine":60,"endColumn":2},{"ruleId":"1462","severity":1,"message":"1469","line":4,"column":1,"nodeType":"1464","endLine":14,"endColumn":3},{"ruleId":"1470","severity":1,"message":"1471","line":23,"column":43,"nodeType":"1472","messageId":"1473","endLine":23,"endColumn":45},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1455","severity":1,"message":"1474","line":52,"column":6,"nodeType":"1457","endLine":52,"endColumn":8,"suggestions":"1475"},{"ruleId":"1444","severity":1,"message":"1476","line":7,"column":3,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1477","line":8,"column":3,"nodeType":"1446","messageId":"1447","endLine":8,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1478","line":37,"column":8,"nodeType":"1446","messageId":"1447","endLine":37,"endColumn":24},{"ruleId":"1479","severity":1,"message":"1480","line":100,"column":87,"nodeType":"1481","messageId":"1482","endLine":100,"endColumn":88,"suggestions":"1483"},{"ruleId":"1444","severity":1,"message":"1484","line":124,"column":9,"nodeType":"1446","messageId":"1447","endLine":124,"endColumn":18},{"ruleId":"1485","severity":1,"message":"1486","line":167,"column":25,"nodeType":"1461","endLine":171,"endColumn":26},{"ruleId":"1459","severity":1,"message":"1460","line":469,"column":23,"nodeType":"1461","endLine":473,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1487","line":12,"column":3,"nodeType":"1446","messageId":"1447","endLine":12,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1488","line":12,"column":8,"nodeType":"1446","messageId":"1447","endLine":12,"endColumn":21},{"ruleId":"1444","severity":1,"message":"1468","line":7,"column":3,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1489","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1490","line":6,"column":3,"nodeType":"1446","messageId":"1447","endLine":6,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1476","line":7,"column":3,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1477","line":8,"column":3,"nodeType":"1446","messageId":"1447","endLine":8,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1491","line":25,"column":3,"nodeType":"1446","messageId":"1447","endLine":25,"endColumn":23},{"ruleId":"1444","severity":1,"message":"1492","line":28,"column":3,"nodeType":"1446","messageId":"1447","endLine":28,"endColumn":19},{"ruleId":"1444","severity":1,"message":"1493","line":29,"column":3,"nodeType":"1446","messageId":"1447","endLine":29,"endColumn":16},{"ruleId":"1455","severity":1,"message":"1494","line":141,"column":6,"nodeType":"1457","endLine":141,"endColumn":8,"suggestions":"1495"},{"ruleId":"1455","severity":1,"message":"1496","line":156,"column":6,"nodeType":"1457","endLine":156,"endColumn":36,"suggestions":"1497"},{"ruleId":"1470","severity":1,"message":"1498","line":129,"column":26,"nodeType":"1472","messageId":"1499","endLine":129,"endColumn":28},{"ruleId":"1444","severity":1,"message":"1500","line":640,"column":13,"nodeType":"1446","messageId":"1447","endLine":640,"endColumn":16},{"ruleId":"1479","severity":1,"message":"1480","line":22,"column":18,"nodeType":"1481","messageId":"1482","endLine":22,"endColumn":19,"suggestions":"1501"},{"ruleId":"1444","severity":1,"message":"1502","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":26},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1503","line":13,"column":20,"nodeType":"1446","messageId":"1447","endLine":13,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1504","line":26,"column":10,"nodeType":"1446","messageId":"1447","endLine":26,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1505","line":26,"column":20,"nodeType":"1446","messageId":"1447","endLine":26,"endColumn":27},{"ruleId":"1506","severity":1,"message":"1507","line":53,"column":9,"nodeType":"1508","messageId":"1509","endLine":58,"endColumn":10,"fix":"1510"},{"ruleId":"1511","severity":1,"message":"1512","line":78,"column":7,"nodeType":"1467","messageId":"1513","endLine":78,"endColumn":31},{"ruleId":"1511","severity":1,"message":"1512","line":80,"column":7,"nodeType":"1467","messageId":"1513","endLine":80,"endColumn":30},{"ruleId":"1511","severity":1,"message":"1514","line":82,"column":7,"nodeType":"1467","messageId":"1515","endLine":83,"endColumn":19},{"ruleId":"1444","severity":1,"message":"1516","line":122,"column":9,"nodeType":"1446","messageId":"1447","endLine":122,"endColumn":19},{"ruleId":"1517","severity":1,"message":"1518","line":125,"column":5,"nodeType":"1519","messageId":"1520","endLine":129,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1521","line":199,"column":7,"nodeType":"1446","messageId":"1447","endLine":199,"endColumn":21},{"ruleId":"1444","severity":1,"message":"1522","line":15,"column":7,"nodeType":"1446","messageId":"1447","endLine":15,"endColumn":15},{"ruleId":"1455","severity":1,"message":"1523","line":114,"column":6,"nodeType":"1457","endLine":114,"endColumn":8,"suggestions":"1524"},{"ruleId":"1455","severity":1,"message":"1525","line":153,"column":6,"nodeType":"1457","endLine":153,"endColumn":61,"suggestions":"1526"},{"ruleId":"1506","severity":1,"message":"1507","line":175,"column":9,"nodeType":"1508","messageId":"1509","endLine":180,"endColumn":10,"fix":"1527"},{"ruleId":"1444","severity":1,"message":"1516","line":191,"column":7,"nodeType":"1446","messageId":"1447","endLine":191,"endColumn":17},{"ruleId":"1485","severity":1,"message":"1486","line":242,"column":29,"nodeType":"1461","endLine":242,"endColumn":41},{"ruleId":"1485","severity":1,"message":"1486","line":256,"column":36,"nodeType":"1461","endLine":256,"endColumn":96},{"ruleId":"1485","severity":1,"message":"1486","line":261,"column":59,"nodeType":"1461","endLine":261,"endColumn":111},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1528","line":3,"column":31,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1529","line":3,"column":37,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":46},{"ruleId":"1444","severity":1,"message":"1530","line":3,"column":55,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":61},{"ruleId":"1444","severity":1,"message":"1531","line":11,"column":8,"nodeType":"1446","messageId":"1447","endLine":11,"endColumn":14},{"ruleId":"1455","severity":1,"message":"1525","line":46,"column":6,"nodeType":"1457","endLine":46,"endColumn":78,"suggestions":"1532"},{"ruleId":"1448","severity":1,"message":"1449","line":64,"column":40,"nodeType":"1450","messageId":"1451","endLine":64,"endColumn":42},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1533","line":7,"column":63,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":71},{"ruleId":"1444","severity":1,"message":"1534","line":49,"column":5,"nodeType":"1446","messageId":"1447","endLine":49,"endColumn":11},{"ruleId":"1455","severity":1,"message":"1535","line":61,"column":6,"nodeType":"1457","endLine":61,"endColumn":8,"suggestions":"1536"},{"ruleId":"1455","severity":1,"message":"1537","line":155,"column":4,"nodeType":"1457","endLine":155,"endColumn":78,"suggestions":"1538"},{"ruleId":"1455","severity":1,"message":"1539","line":172,"column":3,"nodeType":"1457","endLine":172,"endColumn":14,"suggestions":"1540"},{"ruleId":"1444","severity":1,"message":"1541","line":58,"column":15,"nodeType":"1446","messageId":"1447","endLine":58,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1542","line":27,"column":8,"nodeType":"1446","messageId":"1447","endLine":27,"endColumn":19},{"ruleId":"1455","severity":1,"message":"1543","line":162,"column":6,"nodeType":"1457","endLine":162,"endColumn":8,"suggestions":"1544"},{"ruleId":"1455","severity":1,"message":"1545","line":208,"column":6,"nodeType":"1457","endLine":208,"endColumn":26,"suggestions":"1546"},{"ruleId":"1485","severity":1,"message":"1486","line":243,"column":15,"nodeType":"1461","endLine":243,"endColumn":85},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":38,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":45},{"ruleId":"1444","severity":1,"message":"1547","line":115,"column":5,"nodeType":"1446","messageId":"1447","endLine":115,"endColumn":14},{"ruleId":"1455","severity":1,"message":"1548","line":215,"column":6,"nodeType":"1457","endLine":215,"endColumn":12,"suggestions":"1549"},{"ruleId":"1455","severity":1,"message":"1550","line":233,"column":6,"nodeType":"1457","endLine":233,"endColumn":8,"suggestions":"1551"},{"ruleId":"1455","severity":1,"message":"1552","line":258,"column":6,"nodeType":"1457","endLine":258,"endColumn":38,"suggestions":"1553"},{"ruleId":"1455","severity":1,"message":"1554","line":311,"column":6,"nodeType":"1457","endLine":311,"endColumn":22,"suggestions":"1555"},{"ruleId":"1455","severity":1,"message":"1556","line":329,"column":6,"nodeType":"1457","endLine":329,"endColumn":29,"suggestions":"1557"},{"ruleId":"1470","severity":1,"message":"1498","line":335,"column":33,"nodeType":"1472","messageId":"1499","endLine":335,"endColumn":35},{"ruleId":"1470","severity":1,"message":"1498","line":339,"column":35,"nodeType":"1472","messageId":"1499","endLine":339,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1498","line":343,"column":33,"nodeType":"1472","messageId":"1499","endLine":343,"endColumn":35},{"ruleId":"1558","severity":1,"message":"1559","line":397,"column":25,"nodeType":"1461","endLine":403,"endColumn":26},{"ruleId":"1485","severity":1,"message":"1486","line":424,"column":37,"nodeType":"1461","endLine":434,"endColumn":38},{"ruleId":"1485","severity":1,"message":"1486","line":463,"column":37,"nodeType":"1461","endLine":473,"endColumn":38},{"ruleId":"1485","severity":1,"message":"1486","line":500,"column":37,"nodeType":"1461","endLine":510,"endColumn":38},{"ruleId":"1444","severity":1,"message":"1560","line":22,"column":3,"nodeType":"1446","messageId":"1447","endLine":22,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":35,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":42},{"ruleId":"1444","severity":1,"message":"1502","line":1,"column":44,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":53},{"ruleId":"1444","severity":1,"message":"1560","line":21,"column":3,"nodeType":"1446","messageId":"1447","endLine":21,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1504","line":31,"column":5,"nodeType":"1446","messageId":"1447","endLine":31,"endColumn":13},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1561","line":14,"column":8,"nodeType":"1446","messageId":"1447","endLine":14,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1562","line":18,"column":7,"nodeType":"1446","messageId":"1447","endLine":18,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1563","line":42,"column":17,"nodeType":"1446","messageId":"1447","endLine":42,"endColumn":20},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1455","severity":1,"message":"1564","line":22,"column":6,"nodeType":"1457","endLine":22,"endColumn":8,"suggestions":"1565"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1448","severity":1,"message":"1449","line":80,"column":23,"nodeType":"1450","messageId":"1451","endLine":80,"endColumn":25},{"ruleId":"1444","severity":1,"message":"1566","line":14,"column":5,"nodeType":"1446","messageId":"1447","endLine":14,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1455","severity":1,"message":"1567","line":45,"column":6,"nodeType":"1457","endLine":45,"endColumn":8,"suggestions":"1568"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1569","line":40,"column":28,"nodeType":"1446","messageId":"1447","endLine":40,"endColumn":49},{"ruleId":"1455","severity":1,"message":"1570","line":48,"column":3,"nodeType":"1457","endLine":48,"endColumn":23,"suggestions":"1571"},{"ruleId":"1444","severity":1,"message":"1572","line":54,"column":7,"nodeType":"1446","messageId":"1447","endLine":54,"endColumn":24},{"ruleId":"1455","severity":1,"message":"1564","line":72,"column":6,"nodeType":"1457","endLine":72,"endColumn":8,"suggestions":"1573"},{"ruleId":"1444","severity":1,"message":"1489","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":25},{"ruleId":"1455","severity":1,"message":"1537","line":123,"column":4,"nodeType":"1457","endLine":123,"endColumn":95,"suggestions":"1574"},{"ruleId":"1455","severity":1,"message":"1575","line":140,"column":4,"nodeType":"1457","endLine":140,"endColumn":38,"suggestions":"1576"},{"ruleId":"1444","severity":1,"message":"1489","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":25},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":37,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":44},{"ruleId":"1444","severity":1,"message":"1577","line":6,"column":8,"nodeType":"1446","messageId":"1447","endLine":6,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1569","line":45,"column":28,"nodeType":"1446","messageId":"1447","endLine":45,"endColumn":49},{"ruleId":"1455","severity":1,"message":"1570","line":53,"column":3,"nodeType":"1457","endLine":53,"endColumn":23,"suggestions":"1578"},{"ruleId":"1444","severity":1,"message":"1579","line":82,"column":7,"nodeType":"1446","messageId":"1447","endLine":82,"endColumn":32},{"ruleId":"1459","severity":1,"message":"1460","line":282,"column":37,"nodeType":"1461","endLine":282,"endColumn":102},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1489","line":1,"column":47,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":55},{"ruleId":"1444","severity":1,"message":"1580","line":8,"column":22,"nodeType":"1446","messageId":"1447","endLine":8,"endColumn":26},{"ruleId":"1444","severity":1,"message":"1581","line":51,"column":5,"nodeType":"1446","messageId":"1447","endLine":51,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1582","line":54,"column":7,"nodeType":"1446","messageId":"1447","endLine":54,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1583","line":134,"column":6,"nodeType":"1457","endLine":134,"endColumn":34,"suggestions":"1584"},{"ruleId":"1455","severity":1,"message":"1585","line":154,"column":6,"nodeType":"1457","endLine":154,"endColumn":33,"suggestions":"1586"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":48,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":55},{"ruleId":"1587","severity":1,"message":"1588","line":40,"column":5,"nodeType":"1589","messageId":"1451","endLine":40,"endColumn":13},{"ruleId":"1455","severity":1,"message":"1525","line":90,"column":6,"nodeType":"1457","endLine":90,"endColumn":83,"suggestions":"1590"},{"ruleId":"1444","severity":1,"message":"1530","line":6,"column":3,"nodeType":"1446","messageId":"1447","endLine":6,"endColumn":9},{"ruleId":"1448","severity":1,"message":"1449","line":31,"column":26,"nodeType":"1450","messageId":"1451","endLine":31,"endColumn":28},{"ruleId":"1455","severity":1,"message":"1591","line":42,"column":7,"nodeType":"1457","endLine":42,"endColumn":9,"suggestions":"1592"},{"ruleId":"1455","severity":1,"message":"1593","line":43,"column":3,"nodeType":"1446","endLine":43,"endColumn":12,"suggestions":"1594"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1448","severity":1,"message":"1449","line":132,"column":36,"nodeType":"1450","messageId":"1451","endLine":132,"endColumn":38},{"ruleId":"1485","severity":1,"message":"1486","line":154,"column":31,"nodeType":"1461","endLine":158,"endColumn":32},{"ruleId":"1485","severity":1,"message":"1486","line":162,"column":31,"nodeType":"1461","endLine":166,"endColumn":32},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1489","line":1,"column":47,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":55},{"ruleId":"1444","severity":1,"message":"1490","line":3,"column":37,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":42},{"ruleId":"1444","severity":1,"message":"1595","line":7,"column":13,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1596","line":9,"column":8,"nodeType":"1446","messageId":"1447","endLine":9,"endColumn":23},{"ruleId":"1455","severity":1,"message":"1525","line":102,"column":6,"nodeType":"1457","endLine":102,"endColumn":99,"suggestions":"1597"},{"ruleId":"1448","severity":1,"message":"1449","line":121,"column":30,"nodeType":"1450","messageId":"1451","endLine":121,"endColumn":32},{"ruleId":"1444","severity":1,"message":"1598","line":129,"column":63,"nodeType":"1446","messageId":"1447","endLine":129,"endColumn":67},{"ruleId":"1444","severity":1,"message":"1563","line":129,"column":69,"nodeType":"1446","messageId":"1447","endLine":129,"endColumn":72},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1455","severity":1,"message":"1599","line":41,"column":9,"nodeType":"1600","endLine":41,"endColumn":54},{"ruleId":"1455","severity":1,"message":"1525","line":62,"column":6,"nodeType":"1457","endLine":62,"endColumn":64,"suggestions":"1601"},{"ruleId":"1448","severity":1,"message":"1449","line":156,"column":42,"nodeType":"1450","messageId":"1451","endLine":156,"endColumn":44},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1602","line":1,"column":47,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":53},{"ruleId":"1444","severity":1,"message":"1603","line":75,"column":11,"nodeType":"1446","messageId":"1447","endLine":75,"endColumn":20},{"ruleId":"1517","severity":1,"message":"1518","line":85,"column":7,"nodeType":"1519","messageId":"1520","endLine":93,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1604","line":87,"column":11,"nodeType":"1446","messageId":"1447","endLine":87,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1605","line":90,"column":11,"nodeType":"1446","messageId":"1447","endLine":90,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1606","line":91,"column":11,"nodeType":"1446","messageId":"1447","endLine":91,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1607","line":150,"column":9,"nodeType":"1446","messageId":"1447","endLine":150,"endColumn":22},{"ruleId":"1455","severity":1,"message":"1608","line":282,"column":6,"nodeType":"1457","endLine":282,"endColumn":29,"suggestions":"1609"},{"ruleId":"1444","severity":1,"message":"1610","line":459,"column":7,"nodeType":"1446","messageId":"1447","endLine":459,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":27,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1476","line":3,"column":10,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":13},{"ruleId":"1444","severity":1,"message":"1477","line":3,"column":15,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1528","line":3,"column":20,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1490","line":3,"column":26,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":31},{"ruleId":"1444","severity":1,"message":"1580","line":4,"column":10,"nodeType":"1446","messageId":"1447","endLine":4,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1611","line":7,"column":8,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1612","line":9,"column":8,"nodeType":"1446","messageId":"1447","endLine":9,"endColumn":17},{"ruleId":"1444","severity":1,"message":"1613","line":10,"column":8,"nodeType":"1446","messageId":"1447","endLine":10,"endColumn":17},{"ruleId":"1444","severity":1,"message":"1614","line":34,"column":7,"nodeType":"1446","messageId":"1447","endLine":34,"endColumn":13},{"ruleId":"1444","severity":1,"message":"1615","line":35,"column":7,"nodeType":"1446","messageId":"1447","endLine":35,"endColumn":20},{"ruleId":"1455","severity":1,"message":"1616","line":51,"column":6,"nodeType":"1457","endLine":51,"endColumn":61,"suggestions":"1617"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1618","line":53,"column":5,"nodeType":"1446","messageId":"1447","endLine":53,"endColumn":12},{"ruleId":"1444","severity":1,"message":"1619","line":54,"column":5,"nodeType":"1446","messageId":"1447","endLine":54,"endColumn":13},{"ruleId":"1444","severity":1,"message":"1620","line":55,"column":5,"nodeType":"1446","messageId":"1447","endLine":55,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1603","line":70,"column":11,"nodeType":"1446","messageId":"1447","endLine":70,"endColumn":20},{"ruleId":"1517","severity":1,"message":"1518","line":79,"column":7,"nodeType":"1519","messageId":"1520","endLine":87,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1604","line":81,"column":11,"nodeType":"1446","messageId":"1447","endLine":81,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1605","line":84,"column":11,"nodeType":"1446","messageId":"1447","endLine":84,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1606","line":85,"column":11,"nodeType":"1446","messageId":"1447","endLine":85,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1607","line":144,"column":9,"nodeType":"1446","messageId":"1447","endLine":144,"endColumn":22},{"ruleId":"1455","severity":1,"message":"1621","line":264,"column":6,"nodeType":"1457","endLine":264,"endColumn":8,"suggestions":"1622"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1455","severity":1,"message":"1525","line":46,"column":6,"nodeType":"1457","endLine":46,"endColumn":73,"suggestions":"1623"},{"ruleId":"1470","severity":1,"message":"1498","line":63,"column":29,"nodeType":"1472","messageId":"1499","endLine":63,"endColumn":31},{"ruleId":"1455","severity":1,"message":"1624","line":74,"column":6,"nodeType":"1457","endLine":74,"endColumn":12,"suggestions":"1625"},{"ruleId":"1448","severity":1,"message":"1449","line":83,"column":34,"nodeType":"1450","messageId":"1451","endLine":83,"endColumn":36},{"ruleId":"1444","severity":1,"message":"1626","line":11,"column":8,"nodeType":"1446","messageId":"1447","endLine":11,"endColumn":14},{"ruleId":"1455","severity":1,"message":"1627","line":75,"column":6,"nodeType":"1457","endLine":75,"endColumn":13,"suggestions":"1628"},{"ruleId":"1455","severity":1,"message":"1629","line":91,"column":6,"nodeType":"1457","endLine":91,"endColumn":23,"suggestions":"1630"},{"ruleId":"1455","severity":1,"message":"1525","line":324,"column":6,"nodeType":"1457","endLine":324,"endColumn":78,"suggestions":"1631"},{"ruleId":"1470","severity":1,"message":"1498","line":333,"column":29,"nodeType":"1472","messageId":"1499","endLine":333,"endColumn":31},{"ruleId":"1455","severity":1,"message":"1632","line":347,"column":6,"nodeType":"1457","endLine":347,"endColumn":12,"suggestions":"1633"},{"ruleId":"1448","severity":1,"message":"1449","line":367,"column":33,"nodeType":"1450","messageId":"1451","endLine":367,"endColumn":35},{"ruleId":"1455","severity":1,"message":"1525","line":126,"column":6,"nodeType":"1457","endLine":126,"endColumn":70,"suggestions":"1634"},{"ruleId":"1470","severity":1,"message":"1498","line":135,"column":29,"nodeType":"1472","messageId":"1499","endLine":135,"endColumn":31},{"ruleId":"1455","severity":1,"message":"1635","line":149,"column":6,"nodeType":"1457","endLine":149,"endColumn":12,"suggestions":"1636"},{"ruleId":"1448","severity":1,"message":"1449","line":157,"column":31,"nodeType":"1450","messageId":"1451","endLine":157,"endColumn":33},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1637","line":90,"column":9,"nodeType":"1446","messageId":"1447","endLine":90,"endColumn":22},{"ruleId":"1455","severity":1,"message":"1638","line":169,"column":6,"nodeType":"1457","endLine":169,"endColumn":86,"suggestions":"1639"},{"ruleId":"1455","severity":1,"message":"1640","line":183,"column":6,"nodeType":"1457","endLine":183,"endColumn":40,"suggestions":"1641"},{"ruleId":"1448","severity":1,"message":"1642","line":350,"column":123,"nodeType":"1450","messageId":"1451","endLine":350,"endColumn":125},{"ruleId":"1448","severity":1,"message":"1449","line":350,"column":219,"nodeType":"1450","messageId":"1451","endLine":350,"endColumn":221},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1643","line":53,"column":10,"nodeType":"1446","messageId":"1447","endLine":53,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1644","line":53,"column":20,"nodeType":"1446","messageId":"1447","endLine":53,"endColumn":31},{"ruleId":"1455","severity":1,"message":"1645","line":175,"column":6,"nodeType":"1457","endLine":175,"endColumn":72,"suggestions":"1646"},{"ruleId":"1455","severity":1,"message":"1640","line":189,"column":6,"nodeType":"1457","endLine":189,"endColumn":40,"suggestions":"1647"},{"ruleId":"1448","severity":1,"message":"1642","line":366,"column":121,"nodeType":"1450","messageId":"1451","endLine":366,"endColumn":123},{"ruleId":"1448","severity":1,"message":"1449","line":366,"column":217,"nodeType":"1450","messageId":"1451","endLine":366,"endColumn":219},{"ruleId":"1444","severity":1,"message":"1626","line":11,"column":8,"nodeType":"1446","messageId":"1447","endLine":11,"endColumn":14},{"ruleId":"1455","severity":1,"message":"1525","line":244,"column":6,"nodeType":"1457","endLine":244,"endColumn":102,"suggestions":"1648"},{"ruleId":"1470","severity":1,"message":"1498","line":253,"column":29,"nodeType":"1472","messageId":"1499","endLine":253,"endColumn":31},{"ruleId":"1455","severity":1,"message":"1632","line":267,"column":6,"nodeType":"1457","endLine":267,"endColumn":12,"suggestions":"1649"},{"ruleId":"1448","severity":1,"message":"1449","line":275,"column":31,"nodeType":"1450","messageId":"1451","endLine":275,"endColumn":33},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1448","severity":1,"message":"1449","line":267,"column":54,"nodeType":"1450","messageId":"1451","endLine":267,"endColumn":56},{"ruleId":"1444","severity":1,"message":"1580","line":4,"column":22,"nodeType":"1446","messageId":"1447","endLine":4,"endColumn":26},{"ruleId":"1444","severity":1,"message":"1650","line":14,"column":3,"nodeType":"1446","messageId":"1447","endLine":14,"endColumn":12},{"ruleId":"1444","severity":1,"message":"1476","line":15,"column":3,"nodeType":"1446","messageId":"1447","endLine":15,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1477","line":16,"column":3,"nodeType":"1446","messageId":"1447","endLine":16,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1651","line":17,"column":3,"nodeType":"1446","messageId":"1447","endLine":17,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1560","line":20,"column":3,"nodeType":"1446","messageId":"1447","endLine":20,"endColumn":6},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1533","line":18,"column":92,"nodeType":"1446","messageId":"1447","endLine":18,"endColumn":100},{"ruleId":"1444","severity":1,"message":"1652","line":72,"column":5,"nodeType":"1446","messageId":"1447","endLine":72,"endColumn":10},{"ruleId":"1444","severity":1,"message":"1534","line":74,"column":5,"nodeType":"1446","messageId":"1447","endLine":74,"endColumn":11},{"ruleId":"1455","severity":1,"message":"1653","line":213,"column":6,"nodeType":"1457","endLine":213,"endColumn":27,"suggestions":"1654"},{"ruleId":"1448","severity":1,"message":"1449","line":387,"column":58,"nodeType":"1450","messageId":"1451","endLine":387,"endColumn":60},{"ruleId":"1440","replacedBy":"1655"},{"ruleId":"1442","replacedBy":"1656"},{"ruleId":"1444","severity":1,"message":"1580","line":4,"column":10,"nodeType":"1446","messageId":"1447","endLine":4,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1650","line":25,"column":10,"nodeType":"1446","messageId":"1447","endLine":25,"endColumn":19},{"ruleId":"1444","severity":1,"message":"1476","line":25,"column":21,"nodeType":"1446","messageId":"1447","endLine":25,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1477","line":25,"column":26,"nodeType":"1446","messageId":"1447","endLine":25,"endColumn":29},{"ruleId":"1444","severity":1,"message":"1651","line":25,"column":31,"nodeType":"1446","messageId":"1447","endLine":25,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1560","line":25,"column":50,"nodeType":"1446","messageId":"1447","endLine":25,"endColumn":53},{"ruleId":"1444","severity":1,"message":"1650","line":6,"column":10,"nodeType":"1446","messageId":"1447","endLine":6,"endColumn":19},{"ruleId":"1444","severity":1,"message":"1476","line":6,"column":28,"nodeType":"1446","messageId":"1447","endLine":6,"endColumn":31},{"ruleId":"1444","severity":1,"message":"1477","line":6,"column":33,"nodeType":"1446","messageId":"1447","endLine":6,"endColumn":36},{"ruleId":"1485","severity":1,"message":"1486","line":183,"column":23,"nodeType":"1461","endLine":190,"endColumn":24},{"ruleId":"1485","severity":1,"message":"1486","line":228,"column":15,"nodeType":"1461","endLine":232,"endColumn":16},{"ruleId":"1485","severity":1,"message":"1486","line":241,"column":15,"nodeType":"1461","endLine":248,"endColumn":16},{"ruleId":"1485","severity":1,"message":"1486","line":270,"column":17,"nodeType":"1461","endLine":274,"endColumn":18},{"ruleId":"1485","severity":1,"message":"1486","line":291,"column":17,"nodeType":"1461","endLine":295,"endColumn":18},{"ruleId":"1485","severity":1,"message":"1486","line":310,"column":17,"nodeType":"1461","endLine":314,"endColumn":18},{"ruleId":"1485","severity":1,"message":"1486","line":329,"column":17,"nodeType":"1461","endLine":333,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1657","line":2,"column":44,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":53},{"ruleId":"1444","severity":1,"message":"1658","line":13,"column":8,"nodeType":"1446","messageId":"1447","endLine":13,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1659","line":15,"column":38,"nodeType":"1446","messageId":"1447","endLine":15,"endColumn":45},{"ruleId":"1444","severity":1,"message":"1660","line":15,"column":57,"nodeType":"1446","messageId":"1447","endLine":15,"endColumn":65},{"ruleId":"1444","severity":1,"message":"1661","line":209,"column":9,"nodeType":"1446","messageId":"1447","endLine":209,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1662","line":216,"column":7,"nodeType":"1446","messageId":"1447","endLine":216,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1663","line":217,"column":9,"nodeType":"1446","messageId":"1447","endLine":217,"endColumn":17},{"ruleId":"1444","severity":1,"message":"1664","line":221,"column":10,"nodeType":"1446","messageId":"1447","endLine":221,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1665","line":221,"column":24,"nodeType":"1446","messageId":"1447","endLine":221,"endColumn":39},{"ruleId":"1444","severity":1,"message":"1666","line":222,"column":52,"nodeType":"1446","messageId":"1447","endLine":222,"endColumn":63},{"ruleId":"1455","severity":1,"message":"1525","line":243,"column":6,"nodeType":"1457","endLine":243,"endColumn":50,"suggestions":"1667"},{"ruleId":"1470","severity":1,"message":"1498","line":248,"column":32,"nodeType":"1472","messageId":"1499","endLine":248,"endColumn":34},{"ruleId":"1455","severity":1,"message":"1668","line":256,"column":6,"nodeType":"1457","endLine":256,"endColumn":21,"suggestions":"1669"},{"ruleId":"1444","severity":1,"message":"1615","line":372,"column":15,"nodeType":"1446","messageId":"1447","endLine":372,"endColumn":28},{"ruleId":"1444","severity":1,"message":"1670","line":446,"column":23,"nodeType":"1446","messageId":"1447","endLine":446,"endColumn":36},{"ruleId":"1448","severity":1,"message":"1449","line":141,"column":36,"nodeType":"1450","messageId":"1451","endLine":141,"endColumn":38},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1455","severity":1,"message":"1525","line":63,"column":6,"nodeType":"1457","endLine":63,"endColumn":63,"suggestions":"1671"},{"ruleId":"1448","severity":1,"message":"1449","line":147,"column":42,"nodeType":"1450","messageId":"1451","endLine":147,"endColumn":44},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1455","severity":1,"message":"1672","line":110,"column":6,"nodeType":"1457","endLine":110,"endColumn":57,"suggestions":"1673"},{"ruleId":"1587","severity":1,"message":"1674","line":193,"column":11,"nodeType":"1589","messageId":"1451","endLine":193,"endColumn":18},{"ruleId":"1455","severity":1,"message":"1675","line":220,"column":6,"nodeType":"1457","endLine":220,"endColumn":20,"suggestions":"1676"},{"ruleId":"1485","severity":1,"message":"1486","line":264,"column":54,"nodeType":"1461","endLine":264,"endColumn":173},{"ruleId":"1470","severity":1,"message":"1498","line":287,"column":20,"nodeType":"1472","messageId":"1499","endLine":287,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1651","line":3,"column":37,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":40},{"ruleId":"1444","severity":1,"message":"1560","line":3,"column":42,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":45},{"ruleId":"1444","severity":1,"message":"1677","line":4,"column":10,"nodeType":"1446","messageId":"1447","endLine":4,"endColumn":15},{"ruleId":"1455","severity":1,"message":"1525","line":69,"column":6,"nodeType":"1457","endLine":69,"endColumn":63,"suggestions":"1678"},{"ruleId":"1444","severity":1,"message":"1679","line":15,"column":5,"nodeType":"1446","messageId":"1447","endLine":15,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1680","line":16,"column":5,"nodeType":"1446","messageId":"1447","endLine":16,"endColumn":13},{"ruleId":"1444","severity":1,"message":"1681","line":17,"column":5,"nodeType":"1446","messageId":"1447","endLine":17,"endColumn":26},{"ruleId":"1444","severity":1,"message":"1682","line":18,"column":5,"nodeType":"1446","messageId":"1447","endLine":18,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1683","line":22,"column":5,"nodeType":"1446","messageId":"1447","endLine":22,"endColumn":12},{"ruleId":"1470","severity":1,"message":"1498","line":29,"column":22,"nodeType":"1472","messageId":"1499","endLine":29,"endColumn":24},{"ruleId":"1485","severity":1,"message":"1684","line":84,"column":60,"nodeType":"1461","endLine":84,"endColumn":143},{"ruleId":"1455","severity":1,"message":"1621","line":129,"column":6,"nodeType":"1457","endLine":129,"endColumn":8,"suggestions":"1685"},{"ruleId":"1448","severity":1,"message":"1449","line":216,"column":54,"nodeType":"1450","messageId":"1451","endLine":216,"endColumn":56},{"ruleId":"1455","severity":1,"message":"1686","line":41,"column":6,"nodeType":"1457","endLine":41,"endColumn":8,"suggestions":"1687"},{"ruleId":"1485","severity":1,"message":"1684","line":71,"column":29,"nodeType":"1461","endLine":71,"endColumn":54},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1455","severity":1,"message":"1525","line":47,"column":6,"nodeType":"1457","endLine":47,"endColumn":67,"suggestions":"1688"},{"ruleId":"1448","severity":1,"message":"1449","line":66,"column":32,"nodeType":"1450","messageId":"1451","endLine":66,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1529","line":3,"column":37,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":46},{"ruleId":"1444","severity":1,"message":"1689","line":16,"column":10,"nodeType":"1446","messageId":"1447","endLine":16,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1531","line":18,"column":8,"nodeType":"1446","messageId":"1447","endLine":18,"endColumn":14},{"ruleId":"1690","severity":1,"message":"1691","line":42,"column":5,"nodeType":"1446","messageId":"1692","endLine":42,"endColumn":8},{"ruleId":"1455","severity":1,"message":"1525","line":98,"column":6,"nodeType":"1457","endLine":98,"endColumn":68,"suggestions":"1693"},{"ruleId":"1485","severity":1,"message":"1486","line":210,"column":25,"nodeType":"1461","endLine":210,"endColumn":59},{"ruleId":"1444","severity":1,"message":"1598","line":289,"column":77,"nodeType":"1446","messageId":"1447","endLine":289,"endColumn":81},{"ruleId":"1444","severity":1,"message":"1598","line":432,"column":77,"nodeType":"1446","messageId":"1447","endLine":432,"endColumn":81},{"ruleId":"1444","severity":1,"message":"1694","line":686,"column":10,"nodeType":"1446","messageId":"1447","endLine":686,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1695","line":16,"column":24,"nodeType":"1446","messageId":"1447","endLine":16,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1696","line":44,"column":14,"nodeType":"1446","messageId":"1447","endLine":44,"endColumn":32},{"ruleId":"1485","severity":1,"message":"1486","line":90,"column":27,"nodeType":"1461","endLine":90,"endColumn":76},{"ruleId":"1444","severity":1,"message":"1615","line":14,"column":5,"nodeType":"1446","messageId":"1447","endLine":14,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1611","line":2,"column":8,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1697","line":3,"column":39,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":44},{"ruleId":"1444","severity":1,"message":"1580","line":4,"column":10,"nodeType":"1446","messageId":"1447","endLine":4,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1598","line":43,"column":18,"nodeType":"1446","messageId":"1447","endLine":43,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1580","line":2,"column":10,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1650","line":3,"column":17,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":26},{"ruleId":"1444","severity":1,"message":"1563","line":34,"column":5,"nodeType":"1446","messageId":"1447","endLine":34,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1698","line":35,"column":5,"nodeType":"1446","messageId":"1447","endLine":35,"endColumn":12},{"ruleId":"1444","severity":1,"message":"1699","line":42,"column":5,"nodeType":"1446","messageId":"1447","endLine":42,"endColumn":9},{"ruleId":"1444","severity":1,"message":"1700","line":52,"column":5,"nodeType":"1446","messageId":"1447","endLine":52,"endColumn":17},{"ruleId":"1485","severity":1,"message":"1486","line":114,"column":15,"nodeType":"1461","endLine":114,"endColumn":119},{"ruleId":"1448","severity":1,"message":"1449","line":117,"column":64,"nodeType":"1450","messageId":"1451","endLine":117,"endColumn":66},{"ruleId":"1444","severity":1,"message":"1626","line":2,"column":8,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1701","line":11,"column":80,"nodeType":"1446","messageId":"1447","endLine":11,"endColumn":92},{"ruleId":"1444","severity":1,"message":"1702","line":303,"column":13,"nodeType":"1446","messageId":"1447","endLine":303,"endColumn":19},{"ruleId":"1444","severity":1,"message":"1703","line":4,"column":3,"nodeType":"1446","messageId":"1447","endLine":4,"endColumn":19},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":48,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":55},{"ruleId":"1455","severity":1,"message":"1629","line":64,"column":6,"nodeType":"1457","endLine":64,"endColumn":18,"suggestions":"1704"},{"ruleId":"1470","severity":1,"message":"1498","line":107,"column":37,"nodeType":"1472","messageId":"1499","endLine":107,"endColumn":39},{"ruleId":"1455","severity":1,"message":"1705","line":120,"column":6,"nodeType":"1457","endLine":120,"endColumn":12,"suggestions":"1706"},{"ruleId":"1485","severity":1,"message":"1486","line":203,"column":27,"nodeType":"1461","endLine":203,"endColumn":76},{"ruleId":"1444","severity":1,"message":"1702","line":303,"column":13,"nodeType":"1446","messageId":"1447","endLine":303,"endColumn":19},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1476","line":3,"column":10,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":13},{"ruleId":"1444","severity":1,"message":"1580","line":5,"column":10,"nodeType":"1446","messageId":"1447","endLine":5,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1707","line":5,"column":28,"nodeType":"1446","messageId":"1447","endLine":5,"endColumn":39},{"ruleId":"1444","severity":1,"message":"1504","line":39,"column":10,"nodeType":"1446","messageId":"1447","endLine":39,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1505","line":39,"column":20,"nodeType":"1446","messageId":"1447","endLine":39,"endColumn":27},{"ruleId":"1448","severity":1,"message":"1449","line":165,"column":36,"nodeType":"1450","messageId":"1451","endLine":165,"endColumn":38},{"ruleId":"1444","severity":1,"message":"1708","line":31,"column":11,"nodeType":"1446","messageId":"1447","endLine":31,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1709","line":32,"column":11,"nodeType":"1446","messageId":"1447","endLine":32,"endColumn":16},{"ruleId":"1455","severity":1,"message":"1710","line":75,"column":7,"nodeType":"1711","endLine":75,"endColumn":30},{"ruleId":"1712","severity":1,"message":"1713","line":81,"column":8,"nodeType":"1461","endLine":81,"endColumn":79},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1714","line":60,"column":7,"nodeType":"1446","messageId":"1447","endLine":60,"endColumn":12},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1502","line":1,"column":36,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":45},{"ruleId":"1444","severity":1,"message":"1577","line":7,"column":8,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1530","line":6,"column":3,"nodeType":"1446","messageId":"1447","endLine":6,"endColumn":9},{"ruleId":"1444","severity":1,"message":"1715","line":17,"column":5,"nodeType":"1446","messageId":"1447","endLine":17,"endColumn":18},{"ruleId":"1485","severity":1,"message":"1486","line":89,"column":17,"nodeType":"1461","endLine":95,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1716","line":32,"column":10,"nodeType":"1446","messageId":"1447","endLine":32,"endColumn":16},{"ruleId":"1506","severity":1,"message":"1507","line":142,"column":9,"nodeType":"1508","messageId":"1509","endLine":147,"endColumn":10,"fix":"1717"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1476","line":3,"column":10,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":13},{"ruleId":"1444","severity":1,"message":"1580","line":5,"column":10,"nodeType":"1446","messageId":"1447","endLine":5,"endColumn":14},{"ruleId":"1444","severity":1,"message":"1707","line":5,"column":28,"nodeType":"1446","messageId":"1447","endLine":5,"endColumn":39},{"ruleId":"1448","severity":1,"message":"1449","line":194,"column":36,"nodeType":"1450","messageId":"1451","endLine":194,"endColumn":38},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1602","line":1,"column":47,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":53},{"ruleId":"1444","severity":1,"message":"1577","line":7,"column":8,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1718","line":11,"column":27,"nodeType":"1446","messageId":"1447","endLine":11,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1714","line":71,"column":7,"nodeType":"1446","messageId":"1447","endLine":71,"endColumn":12},{"ruleId":"1444","severity":1,"message":"1603","line":80,"column":11,"nodeType":"1446","messageId":"1447","endLine":80,"endColumn":20},{"ruleId":"1517","severity":1,"message":"1518","line":90,"column":7,"nodeType":"1519","messageId":"1520","endLine":98,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1604","line":92,"column":11,"nodeType":"1446","messageId":"1447","endLine":92,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1605","line":95,"column":11,"nodeType":"1446","messageId":"1447","endLine":95,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1606","line":96,"column":11,"nodeType":"1446","messageId":"1447","endLine":96,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1607","line":155,"column":9,"nodeType":"1446","messageId":"1447","endLine":155,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1719","line":257,"column":9,"nodeType":"1446","messageId":"1447","endLine":257,"endColumn":17},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1577","line":7,"column":8,"nodeType":"1446","messageId":"1447","endLine":7,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1618","line":58,"column":5,"nodeType":"1446","messageId":"1447","endLine":58,"endColumn":12},{"ruleId":"1444","severity":1,"message":"1603","line":73,"column":11,"nodeType":"1446","messageId":"1447","endLine":73,"endColumn":20},{"ruleId":"1517","severity":1,"message":"1518","line":82,"column":7,"nodeType":"1519","messageId":"1520","endLine":90,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1604","line":84,"column":11,"nodeType":"1446","messageId":"1447","endLine":84,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1605","line":87,"column":11,"nodeType":"1446","messageId":"1447","endLine":87,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1606","line":88,"column":11,"nodeType":"1446","messageId":"1447","endLine":88,"endColumn":16},{"ruleId":"1444","severity":1,"message":"1607","line":147,"column":9,"nodeType":"1446","messageId":"1447","endLine":147,"endColumn":22},{"ruleId":"1444","severity":1,"message":"1610","line":433,"column":7,"nodeType":"1446","messageId":"1447","endLine":433,"endColumn":15},{"ruleId":"1485","severity":1,"message":"1486","line":89,"column":17,"nodeType":"1461","endLine":98,"endColumn":18},{"ruleId":"1485","severity":1,"message":"1486","line":102,"column":7,"nodeType":"1461","endLine":102,"endColumn":81},{"ruleId":"1485","severity":1,"message":"1486","line":126,"column":13,"nodeType":"1461","endLine":126,"endColumn":85},{"ruleId":"1444","severity":1,"message":"1611","line":2,"column":8,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":15},{"ruleId":"1444","severity":1,"message":"1697","line":3,"column":39,"nodeType":"1446","messageId":"1447","endLine":3,"endColumn":44},{"ruleId":"1444","severity":1,"message":"1580","line":4,"column":10,"nodeType":"1446","messageId":"1447","endLine":4,"endColumn":14},{"ruleId":"1485","severity":1,"message":"1486","line":75,"column":17,"nodeType":"1461","endLine":83,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1695","line":16,"column":24,"nodeType":"1446","messageId":"1447","endLine":16,"endColumn":34},{"ruleId":"1444","severity":1,"message":"1696","line":45,"column":14,"nodeType":"1446","messageId":"1447","endLine":45,"endColumn":32},{"ruleId":"1455","severity":1,"message":"1525","line":106,"column":4,"nodeType":"1457","endLine":106,"endColumn":65,"suggestions":"1720"},{"ruleId":"1455","severity":1,"message":"1721","line":135,"column":3,"nodeType":"1457","endLine":135,"endColumn":33,"suggestions":"1722"},{"ruleId":"1444","severity":1,"message":"1503","line":8,"column":3,"nodeType":"1446","messageId":"1447","endLine":8,"endColumn":7},{"ruleId":"1444","severity":1,"message":"1723","line":35,"column":11,"nodeType":"1446","messageId":"1447","endLine":35,"endColumn":18},{"ruleId":"1444","severity":1,"message":"1724","line":39,"column":11,"nodeType":"1446","messageId":"1447","endLine":39,"endColumn":18},{"ruleId":"1455","severity":1,"message":"1725","line":167,"column":23,"nodeType":"1481","endLine":167,"endColumn":28},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":17,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":24},{"ruleId":"1444","severity":1,"message":"1582","line":52,"column":7,"nodeType":"1446","messageId":"1447","endLine":52,"endColumn":17},{"ruleId":"1455","severity":1,"message":"1726","line":102,"column":6,"nodeType":"1457","endLine":102,"endColumn":31,"suggestions":"1727"},{"ruleId":"1444","severity":1,"message":"1728","line":30,"column":22,"nodeType":"1446","messageId":"1447","endLine":30,"endColumn":35},{"ruleId":"1444","severity":1,"message":"1598","line":35,"column":9,"nodeType":"1446","messageId":"1447","endLine":35,"endColumn":13},{"ruleId":"1455","severity":1,"message":"1729","line":45,"column":6,"nodeType":"1457","endLine":45,"endColumn":59,"suggestions":"1730"},{"ruleId":"1455","severity":1,"message":"1638","line":68,"column":6,"nodeType":"1457","endLine":68,"endColumn":83,"suggestions":"1731"},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":28,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":35},{"ruleId":"1455","severity":1,"message":"1525","line":116,"column":6,"nodeType":"1457","endLine":116,"endColumn":69,"suggestions":"1732"},{"ruleId":"1459","severity":1,"message":"1460","line":9,"column":7,"nodeType":"1461","endLine":14,"endColumn":8},{"ruleId":"1444","severity":1,"message":"1452","line":1,"column":38,"nodeType":"1446","messageId":"1447","endLine":1,"endColumn":45},{"ruleId":"1506","severity":1,"message":"1507","line":67,"column":9,"nodeType":"1508","messageId":"1509","endLine":72,"endColumn":10,"fix":"1733"},{"ruleId":"1455","severity":1,"message":"1734","line":108,"column":6,"nodeType":"1457","endLine":108,"endColumn":48,"suggestions":"1735"},{"ruleId":"1485","severity":1,"message":"1486","line":137,"column":9,"nodeType":"1461","endLine":137,"endColumn":103},{"ruleId":"1448","severity":1,"message":"1449","line":27,"column":35,"nodeType":"1450","messageId":"1451","endLine":27,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1498","line":37,"column":41,"nodeType":"1472","messageId":"1499","endLine":37,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1498","line":49,"column":41,"nodeType":"1472","messageId":"1499","endLine":49,"endColumn":43},{"ruleId":"1462","severity":1,"message":"1463","line":26,"column":3,"nodeType":"1464","endLine":53,"endColumn":4},{"ruleId":"1444","severity":1,"message":"1503","line":2,"column":28,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":32},{"ruleId":"1444","severity":1,"message":"1530","line":2,"column":34,"nodeType":"1446","messageId":"1447","endLine":2,"endColumn":40},{"ruleId":"1448","severity":1,"message":"1449","line":66,"column":54,"nodeType":"1450","messageId":"1451","endLine":66,"endColumn":56},{"ruleId":"1448","severity":1,"message":"1449","line":77,"column":38,"nodeType":"1450","messageId":"1451","endLine":77,"endColumn":40},{"ruleId":"1448","severity":1,"message":"1449","line":94,"column":200,"nodeType":"1450","messageId":"1451","endLine":94,"endColumn":202},{"ruleId":"1736","severity":1,"message":"1737","line":1,"column":1,"nodeType":"1738","messageId":"1739","endLine":1,"endColumn":13,"fix":"1740"},{"ruleId":"1479","severity":1,"message":"1741","line":5,"column":21,"nodeType":"1481","messageId":"1482","endLine":5,"endColumn":22,"suggestions":"1742"},{"ruleId":"1479","severity":1,"message":"1480","line":15,"column":45,"nodeType":"1481","messageId":"1482","endLine":15,"endColumn":46,"suggestions":"1743"},{"ruleId":"1479","severity":1,"message":"1480","line":15,"column":62,"nodeType":"1481","messageId":"1482","endLine":15,"endColumn":63,"suggestions":"1744"},{"ruleId":"1479","severity":1,"message":"1480","line":16,"column":48,"nodeType":"1481","messageId":"1482","endLine":16,"endColumn":49,"suggestions":"1745"},{"ruleId":"1479","severity":1,"message":"1480","line":16,"column":65,"nodeType":"1481","messageId":"1482","endLine":16,"endColumn":66,"suggestions":"1746"},{"ruleId":"1479","severity":1,"message":"1480","line":26,"column":39,"nodeType":"1481","messageId":"1482","endLine":26,"endColumn":40,"suggestions":"1747"},{"ruleId":"1479","severity":1,"message":"1480","line":26,"column":87,"nodeType":"1481","messageId":"1482","endLine":26,"endColumn":88,"suggestions":"1748"},{"ruleId":"1479","severity":1,"message":"1480","line":29,"column":147,"nodeType":"1481","messageId":"1482","endLine":29,"endColumn":148,"suggestions":"1749"},{"ruleId":"1479","severity":1,"message":"1480","line":29,"column":195,"nodeType":"1481","messageId":"1482","endLine":29,"endColumn":196,"suggestions":"1750"},{"ruleId":"1448","severity":1,"message":"1449","line":95,"column":25,"nodeType":"1450","messageId":"1451","endLine":95,"endColumn":27},{"ruleId":"1448","severity":1,"message":"1449","line":97,"column":24,"nodeType":"1450","messageId":"1451","endLine":97,"endColumn":26},"no-native-reassign",["1751"],"no-negated-in-lhs",["1752"],"no-unused-vars","'PrivateRoute' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useMemo' is defined but never used.","'Redirect' is defined but never used.","'Img' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loginRedirect'. Either include it or remove the dependency array. If 'loginRedirect' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["1753"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-duplicate-case","Duplicate case label.","SwitchCase","'NOTIFICATION_VIEWED' is defined but never used.","Assign arrow function to a variable before exporting as module default","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'dispatch' and 'onlyOnce'. Either include them or remove the dependency array.",["1754"],"'Row' is defined but never used.","'Col' is defined but never used.","'BreadCrumbRouter' is defined but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["1755","1756"],"'toggleDiv' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'REMOVE_ALERT' is defined but never used.","'LT_Categories' is defined but never used.","'Suspense' is defined but never used.","'Image' is defined but never used.","'AiOutlinePauseCircle' is defined but never used.","'AiOutlineScissor' is defined but never used.","'AiOutlineUser' is defined but never used.","React Hook useEffect has missing dependencies: 'getNotifications' and 'listParams'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1757"],"React Hook useEffect has missing dependencies: 'count', 'data.length', and 'loading'. Either include them or remove the dependency array.",["1758"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'arr' is assigned a value but never used.",["1759","1760"],"'useEffect' is defined but never used.","'Form' is defined but never used.","'onlyOnce' is assigned a value but never used.","'setOnce' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"search\"] found.","Property","unnecessarilyComputedProperty",{"range":"1761","text":"1762"},"no-fallthrough","Expected a 'break' statement before 'case'.","case","Expected a 'break' statement before 'default'.","default","'fieldValue' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'categoryStyles' is assigned a value but never used.","'CityIcon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCityList', 'listParams', 'onlyOnce', and 'resetComponentStore'. Either include them or remove the dependency array. If 'getCityList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1763"],"React Hook useEffect has a missing dependency: 'onlyOnce'. Either include it or remove the dependency array.",["1764"],{"range":"1765","text":"1762"},"'Card' is defined but never used.","'ListGroup' is defined but never used.","'Button' is defined but never used.","'Moment' is defined but never used.",["1766"],"'FaWallet' is defined but never used.","'avatar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getProfile' and 'getSavedCards'. Either include them or remove the dependency array. If 'getProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1767"],"React Hook useEffect has missing dependencies: 'getLocalityList' and 'onlyOnce'. Either include them or remove the dependency array. If 'getLocalityList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1768"],"React Hook useEffect has missing dependencies: 'getChangeLabsList' and 'labsParams'. Either include them or remove the dependency array. If 'getChangeLabsList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1769"],"'res' is assigned a value but never used.","'Collapsible' is defined but never used.","React Hook useEffect has missing dependencies: 'getCartDetails', 'getGuestUserCart', and 'isAuthenticated'. Either include them or remove the dependency array. If 'getCartDetails' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1770"],"React Hook useEffect has missing dependencies: 'failHandler', 'history', and 'paymentHandler'. Either include them or remove the dependency array.",["1771"],"'nightTime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSampleCollectionDetails'. Either include it or remove the dependency array. If 'getSampleCollectionDetails' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1772"],"React Hook useEffect has a missing dependency: 'getTimeSlots'. Either include it or remove the dependency array. If 'getTimeSlots' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1773"],"React Hook useEffect has missing dependencies: 'labSlots' and 'scheduleCollection.collectionType'. Either include them or remove the dependency array.",["1774"],"React Hook useEffect has a missing dependency: 'Menu'. Either include it or remove the dependency array.",["1775"],"React Hook useEffect has a missing dependency: 'selected'. Either include it or remove the dependency array.",["1776"],"jsx-a11y/role-supports-aria-props","The attribute aria-expanded is not supported by the role tabpanel.","'Nav' is defined but never used.","'moment' is defined but never used.","'statusMsg' is assigned a value but never used.","'_id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getWalletBalance'. Either include it or remove the dependency array. If 'getWalletBalance' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1777"],"'paymentStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'drawStars'. Either include it or remove the dependency array.",["1778"],"'setPrescriptionParams' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPrescriptionList'. Either include it or remove the dependency array. If 'getPrescriptionList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1779"],"'handleImageRemove' is assigned a value but never used.",["1780"],["1781"],"React Hook useEffect has missing dependencies: 'getLabsList' and 'labsParams'. Either include them or remove the dependency array. If 'getLabsList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1782"],"'Spinner' is defined but never used.",["1783"],"'handleUploadedImageSelect' is assigned a value but never used.","'Link' is defined but never used.","'created_by' is assigned a value but never used.","'delayTimer' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'onlyOnce', and 'resetComponentStore'. Either include them or remove the dependency array. If 'resetComponentStore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1784"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1785"],"no-dupe-keys","Duplicate key 'category'.","ObjectExpression",["1786"],"React Hook useEffect has a missing dependency: 'resenOtpTimer'. Either include it or remove the dependency array. If 'setSeconds' needs the current value of 'resenOtpTimer', you can also switch to useReducer instead of useState and read 'resenOtpTimer' in the reducer.",["1787"],"React Hook useEffect contains a call to 'setShowSendOtp'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [seconds] as a second argument to the useEffect Hook.",["1788"],"'Constants' is defined but never used.","'DefaultLabImage' is defined but never used.",["1789"],"'type' is assigned a value but never used.","The 'executeScroll' function makes the dependencies of useEffect Hook (at line 93) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'executeScroll' in its own useCallback() Hook.","VariableDeclarator",["1790"],"'useRef' is defined but never used.","'city_name' is assigned a value but never used.","'state' is assigned a value but never used.","'country' is assigned a value but never used.","'short' is assigned a value but never used.","'execWithDelay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'resetComponentStore'. Either include it or remove the dependency array. If 'resetComponentStore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1791"],"'GEOCoder' is assigned a value but never used.","'slugify' is defined but never used.","'radiology' is defined but never used.","'pathology' is defined but never used.","'colNum' is assigned a value but never used.","'colorSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initialParams' and 'onlyOnce'. Either include them or remove the dependency array.",["1792"],"'address' is assigned a value but never used.","'locality' is assigned a value but never used.","'locality_name' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadPage' and 'resetComponentStore'. Either include them or remove the dependency array. If 'loadPage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1793"],["1794"],"React Hook useEffect has missing dependencies: 'habits' and 'page'. Either include them or remove the dependency array.",["1795"],"'Rating' is defined but never used.","React Hook useEffect has a missing dependency: 'getHabitDescription'. Either include it or remove the dependency array. If 'getHabitDescription' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1796"],"React Hook useEffect has a missing dependency: 'getGuestUserCart'. Either include it or remove the dependency array. If 'getGuestUserCart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1797"],["1798"],"React Hook useEffect has missing dependencies: 'cart', 'isAuthenticated', 'page', and 'tests'. Either include them or remove the dependency array.",["1799"],["1800"],"React Hook useEffect has missing dependencies: 'cart', 'isAuthenticated', 'packs', and 'page'. Either include them or remove the dependency array.",["1801"],"'handleSorting' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'listParams' and 'onlyOnce'. Either include them or remove the dependency array.",["1802"],"React Hook useEffect has missing dependencies: 'type' and 'value'. Either include them or remove the dependency array.",["1803"],"Expected '!==' and instead saw '!='.","'collapse' is assigned a value but never used.","'setCollapse' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getLocalityList', 'initialSortingParams', and 'onlyOnce'. Either include them or remove the dependency array. If 'getLocalityList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1804"],["1805"],["1806"],["1807"],"'Container' is defined but never used.","'Tab' is defined but never used.","'ccode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getProfile', 'loadPage', and 'onlyOnce'. Either include them or remove the dependency array. If 'getProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1808"],["1751"],["1752"],"'Accordion' is defined but never used.","'CropImg' is defined but never used.","'IoMdEye' is defined but never used.","'IoMdCart' is defined but never used.","'initialParams' is assigned a value but never used.","'imageURL' is assigned a value but never used.","'imageRef' is assigned a value but never used.","'toggleHabits' is assigned a value but never used.","'setToggleHabits' is assigned a value but never used.","'loginStatus' is assigned a value but never used.",["1809"],"React Hook useEffect has a missing dependency: 'cartOption'. Either include it or remove the dependency array.",["1810"],"'discountLabel' is assigned a value but never used.",["1811"],"React Hook useEffect has missing dependencies: 'history' and 'onlyOnce'. Either include them or remove the dependency array.",["1812"],"Duplicate key 'invoice'.","React Hook useEffect has a missing dependency: 'user?.user._id'. Either include it or remove the dependency array.",["1813"],"'Input' is defined but never used.",["1814"],"'tax' is assigned a value but never used.","'subTotal' is assigned a value but never used.","'homeCollectionCharges' is assigned a value but never used.","'totalDiscount' is assigned a value but never used.","'reports' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["1815"],"React Hook useEffect has missing dependencies: 'getCartDetails' and 'getCartOrder'. Either include them or remove the dependency array. If 'getCartDetails' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1816"],["1817"],"'FaEye' is defined but never used.","no-use-before-define","'_id' was used before it was defined.","usedBeforeDefined",["1818"],"'generateAvatar' is defined but never used.","'setCurrent' is assigned a value but never used.","'getBoundsZoomLevel' is defined but never used.","'Modal' is defined but never used.","'user_id' is assigned a value but never used.","'city' is assigned a value but never used.","'totalPayment' is assigned a value but never used.","'testsOffered' is assigned a value but never used.","'errors' is assigned a value but never used.","'GET_PACKAGE_LIST' is defined but never used.",["1819"],"React Hook useEffect has missing dependencies: 'cart', 'isLoggedIn', 'labsData', and 'loadMoreData'. Either include them or remove the dependency array.",["1820"],"'useLocation' is defined but never used.","'cropX' is assigned a value but never used.","'cropY' is assigned a value but never used.","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'query' is assigned a value but never used.","'filterKeyName' is assigned a value but never used.","'values' is assigned a value but never used.",{"range":"1821","text":"1762"},"'FaTimes' is defined but never used.","'onRemove' is assigned a value but never used.",["1822"],"React Hook useEffect has a missing dependency: 'labsParams'. Either include it or remove the dependency array.",["1823"],"'classes' is assigned a value but never used.","'Listing' is assigned a value but never used.","Assignments to the 'subscribe' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'getArticleCategoryList', 'history', 'onlyOnce', and 'resetComponentStore'. Either include them or remove the dependency array. If 'resetComponentStore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1824"],"'setListParams' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'getArticleCategoryList', 'listParams', and 'onlyOnce'. Either include them or remove the dependency array. If 'getArticleCategoryList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1825"],["1826"],["1827"],{"range":"1828","text":"1762"},"React Hook useEffect has missing dependencies: 'defaultCategories' and 'onlyOnce'. Either include them or remove the dependency array. If 'setCategories' needs the current value of 'defaultCategories', you can also switch to useReducer instead of useState and read 'defaultCategories' in the reducer.",["1829"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"1830","text":"1831"},"Unnecessary escape character: \\..",["1832","1833"],["1834","1835"],["1836","1837"],["1838","1839"],["1840","1841"],["1842","1843"],["1844","1845"],["1846","1847"],["1848","1849"],"no-global-assign","no-unsafe-negation",{"desc":"1850","fix":"1851"},{"desc":"1852","fix":"1853"},{"messageId":"1854","fix":"1855","desc":"1856"},{"messageId":"1857","fix":"1858","desc":"1859"},{"desc":"1860","fix":"1861"},{"desc":"1862","fix":"1863"},{"messageId":"1854","fix":"1864","desc":"1856"},{"messageId":"1857","fix":"1865","desc":"1859"},[1497,1507],"\"search\"",{"desc":"1866","fix":"1867"},{"desc":"1868","fix":"1869"},[4725,4735],{"desc":"1870","fix":"1871"},{"desc":"1872","fix":"1873"},{"desc":"1874","fix":"1875"},{"desc":"1876","fix":"1877"},{"desc":"1878","fix":"1879"},{"desc":"1880","fix":"1881"},{"desc":"1882","fix":"1883"},{"desc":"1884","fix":"1885"},{"desc":"1886","fix":"1887"},{"desc":"1888","fix":"1889"},{"desc":"1890","fix":"1891"},{"desc":"1892","fix":"1893"},{"desc":"1894","fix":"1895"},{"desc":"1896","fix":"1897"},{"desc":"1892","fix":"1898"},{"desc":"1899","fix":"1900"},{"desc":"1901","fix":"1902"},{"desc":"1896","fix":"1903"},{"desc":"1904","fix":"1905"},{"desc":"1906","fix":"1907"},{"desc":"1908","fix":"1909"},{"desc":"1910","fix":"1911"},{"desc":"1912","fix":"1913"},{"desc":"1914","fix":"1915"},{"desc":"1916","fix":"1917"},{"desc":"1918","fix":"1919"},{"desc":"1920","fix":"1921"},{"desc":"1922","fix":"1923"},{"desc":"1924","fix":"1925"},{"desc":"1926","fix":"1927"},{"desc":"1928","fix":"1929"},{"desc":"1930","fix":"1931"},{"desc":"1932","fix":"1933"},{"desc":"1934","fix":"1935"},{"desc":"1936","fix":"1937"},{"desc":"1938","fix":"1939"},{"desc":"1940","fix":"1941"},{"desc":"1942","fix":"1943"},{"desc":"1944","fix":"1945"},{"desc":"1942","fix":"1946"},{"desc":"1947","fix":"1948"},{"desc":"1934","fix":"1949"},{"desc":"1950","fix":"1951"},{"desc":"1952","fix":"1953"},{"desc":"1954","fix":"1955"},{"desc":"1956","fix":"1957"},{"desc":"1958","fix":"1959"},{"desc":"1960","fix":"1961"},{"desc":"1962","fix":"1963"},{"desc":"1922","fix":"1964"},{"desc":"1965","fix":"1966"},{"desc":"1967","fix":"1968"},{"desc":"1969","fix":"1970"},{"desc":"1971","fix":"1972"},{"desc":"1973","fix":"1974"},[3793,3803],{"desc":"1975","fix":"1976"},{"desc":"1977","fix":"1978"},{"desc":"1979","fix":"1980"},{"desc":"1981","fix":"1982"},{"desc":"1983","fix":"1984"},{"desc":"1985","fix":"1986"},[1887,1897],{"desc":"1987","fix":"1988"},[0,12],"",{"messageId":"1854","fix":"1989","desc":"1856"},{"messageId":"1857","fix":"1990","desc":"1859"},{"messageId":"1854","fix":"1991","desc":"1856"},{"messageId":"1857","fix":"1992","desc":"1859"},{"messageId":"1854","fix":"1993","desc":"1856"},{"messageId":"1857","fix":"1994","desc":"1859"},{"messageId":"1854","fix":"1995","desc":"1856"},{"messageId":"1857","fix":"1996","desc":"1859"},{"messageId":"1854","fix":"1997","desc":"1856"},{"messageId":"1857","fix":"1998","desc":"1859"},{"messageId":"1854","fix":"1999","desc":"1856"},{"messageId":"1857","fix":"2000","desc":"1859"},{"messageId":"1854","fix":"2001","desc":"1856"},{"messageId":"1857","fix":"2002","desc":"1859"},{"messageId":"1854","fix":"2003","desc":"1856"},{"messageId":"1857","fix":"2004","desc":"1859"},{"messageId":"1854","fix":"2005","desc":"1856"},{"messageId":"1857","fix":"2006","desc":"1859"},"Update the dependencies array to be: [verifyEmail, match.params.token, history, authentication, loginRedirect]",{"range":"2007","text":"2008"},"Update the dependencies array to be: [dispatch, onlyOnce]",{"range":"2009","text":"2010"},"removeEscape",{"range":"2011","text":"1831"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"2012","text":"2013"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [getNotifications, listParams]",{"range":"2014","text":"2015"},"Update the dependencies array to be: [listParams, getNotifications, count, data.length, loading]",{"range":"2016","text":"2017"},{"range":"2018","text":"1831"},{"range":"2019","text":"2013"},"Update the dependencies array to be: [getCityList, listParams, onlyOnce, resetComponentStore]",{"range":"2020","text":"2021"},"Update the dependencies array to be: [getCityList, listParams, onlyOnce, resetComponentStore, setOnce]",{"range":"2022","text":"2023"},"Update the dependencies array to be: [getReviewsList, listParams, lab_id, city, resetComponentStore, setOnce, onlyOnce]",{"range":"2024","text":"2025"},"Update the dependencies array to be: [getProfile, getSavedCards]",{"range":"2026","text":"2027"},"Update the dependencies array to be: [getChangeLabsList, currentCity, resetComponentStore, setOnce, labsParams, onlyOnce, getLocalityList]",{"range":"2028","text":"2029"},"Update the dependencies array to be: [Data.labs, getChangeLabsList, labsParams]",{"range":"2030","text":"2031"},"Update the dependencies array to be: [getCartDetails, getGuestUserCart, isAuthenticated]",{"range":"2032","text":"2033"},"Update the dependencies array to be: [failHandler, history, paymentHandler, placedOrderDetails]",{"range":"2034","text":"2035"},"Update the dependencies array to be: [cart, getSampleCollectionDetails]",{"range":"2036","text":"2037"},"Update the dependencies array to be: [getTimeSlots]",{"range":"2038","text":"2039"},"Update the dependencies array to be: [timeSlots, setTime, resetSlots, labSlots, scheduleCollection.collectionType]",{"range":"2040","text":"2041"},"Update the dependencies array to be: [Menu, days, selected]",{"range":"2042","text":"2043"},"Update the dependencies array to be: [defaultCollectionType, selected]",{"range":"2044","text":"2045"},"Update the dependencies array to be: [getWalletBalance]",{"range":"2046","text":"2047"},"Update the dependencies array to be: [drawStars]",{"range":"2048","text":"2049"},"Update the dependencies array to be: [getPrescriptionList, prescriptionParams]",{"range":"2050","text":"2051"},{"range":"2052","text":"2047"},"Update the dependencies array to be: [getLabsList, prescription_id_value, currentCity, resetComponentStore, setOnce, labsParams, onlyOnce, getLocalityList]",{"range":"2053","text":"2054"},"Update the dependencies array to be: [prescription_id_value, Data.labs, getLabsList, labsParams]",{"range":"2055","text":"2056"},{"range":"2057","text":"2051"},"Update the dependencies array to be: [getHealthRecordByID, history, onlyOnce, resetComponentStore, value]",{"range":"2058","text":"2059"},"Update the dependencies array to be: [getOrdersList, listParams, value]",{"range":"2060","text":"2061"},"Update the dependencies array to be: [getCMSBySlug, match.params.cms_slug, notFound, history, resetComponentStore, onlyOnce]",{"range":"2062","text":"2063"},"Update the dependencies array to be: [resenOtpTimer]",{"range":"2064","text":"2065"},"Add dependencies array: [seconds]",{"range":"2066","text":"2067"},"Update the dependencies array to be: [getAllPackages, disabled, city, listParams, resetComponentStore, lab_id, test_type, setOnce, onlyOnce]",{"range":"2068","text":"2069"},"Update the dependencies array to be: [getAddressList, listParams, onlyOnce, resetComponentStore, setOnce]",{"range":"2070","text":"2071"},"Update the dependencies array to be: [getAddressByID, resetComponentStore, value]",{"range":"2072","text":"2073"},"Update the dependencies array to be: [resetComponentStore, city, getCategoriesList, setOnce, onlyOnce, initialParams]",{"range":"2074","text":"2075"},"Update the dependencies array to be: [loadPage, resetComponentStore]",{"range":"2076","text":"2077"},"Update the dependencies array to be: [getCategoriesList, listParams, city, resetComponentStore, setOnce, onlyOnce]",{"range":"2078","text":"2079"},"Update the dependencies array to be: [data, habits, page]",{"range":"2080","text":"2081"},"Update the dependencies array to be: [getHabitDescription, value]",{"range":"2082","text":"2083"},"Update the dependencies array to be: [getGuestUserCart, isAuthenticated]",{"range":"2084","text":"2085"},"Update the dependencies array to be: [getTestsByHabit, listParams, value, city, resetComponentStore, setOnce, onlyOnce]",{"range":"2086","text":"2087"},"Update the dependencies array to be: [cart, data, isAuthenticated, page, tests]",{"range":"2088","text":"2089"},"Update the dependencies array to be: [getAllPackages, city, listParams, resetComponentStore, setOnce, onlyOnce]",{"range":"2090","text":"2091"},"Update the dependencies array to be: [cart, data, isAuthenticated, packs, page]",{"range":"2092","text":"2093"},"Update the dependencies array to be: [getTestByID, currentCity, value, resetComponentStore, setOnce, getLocalityList, onlyOnce, listParams]",{"range":"2094","text":"2095"},"Update the dependencies array to be: [getTestBasedLabsList, listParams, type, value]",{"range":"2096","text":"2097"},"Update the dependencies array to be: [getPackageByID, value, currentCity, resetComponentStore, setOnce, onlyOnce, initialSortingParams, getLocalityList]",{"range":"2098","text":"2099"},{"range":"2100","text":"2097"},"Update the dependencies array to be: [getTestsByCategory, listParams, city, match.params.category_slug, resetComponentStore, setOnce, onlyOnce]",{"range":"2101","text":"2102"},{"range":"2103","text":"2089"},"Update the dependencies array to be: [getProfile, loadPage, onlyOnce, resetComponentStore]",{"range":"2104","text":"2105"},"Update the dependencies array to be: [getLabTestsPage, city, resetComponentStore, onlyOnce]",{"range":"2106","text":"2107"},"Update the dependencies array to be: [cartOption, data.packages]",{"range":"2108","text":"2109"},"Update the dependencies array to be: [getFamilyList, listParams, onlyOnce, resetComponentStore, setOnce]",{"range":"2110","text":"2111"},"Update the dependencies array to be: [getOrderByID, value, resetComponentStore, setOnce, onlyOnce, history]",{"range":"2112","text":"2113"},"Update the dependencies array to be: [currentOrder, user?.user._id]",{"range":"2114","text":"2115"},"Update the dependencies array to be: [getOrdersList, listParams, onlyOnce, resetComponentStore, setOnce]",{"range":"2116","text":"2117"},{"range":"2118","text":"2077"},"Update the dependencies array to be: [getCartDetails, getCartOrder]",{"range":"2119","text":"2120"},"Update the dependencies array to be: [getLabsList, listParams, city, resetComponentStore, setOnce, onlyOnce]",{"range":"2121","text":"2122"},"Update the dependencies array to be: [getLabByID, value, currentCity, resetComponentStore, setOnce, onlyOnce]",{"range":"2123","text":"2124"},"Update the dependencies array to be: [getGuestUserCart, isLoggedIn]",{"range":"2125","text":"2126"},"Update the dependencies array to be: [cart, isLoggedIn, labs, labsData, loadMoreData]",{"range":"2127","text":"2128"},"Update the dependencies array to be: [getChangeLabsList, resetComponentStore, setOnce, labsParams, onlyOnce]",{"range":"2129","text":"2130"},"Update the dependencies array to be: [getChangeLabsList, Data.labs, labsParams]",{"range":"2131","text":"2132"},"Update the dependencies array to be: [getArticleBySlug, getArticleCategoryList, history, onlyOnce, resetComponentStore, value]",{"range":"2133","text":"2134"},"Update the dependencies array to be: [onlyOnce, getArticleList, value, listParams, resetComponentStore, getArticleCategoryList]",{"range":"2135","text":"2136"},"Update the dependencies array to be: [getArticleList, value, resetComponentStore, setOnce, getArticleCategoryList, onlyOnce, listParams]",{"range":"2137","text":"2138"},"Update the dependencies array to be: [getHealthRecordList, listParams, onlyOnce, resetComponentStore, setOnce]",{"range":"2139","text":"2140"},"Update the dependencies array to be: [defaultCategories, getArticleCategoryList, listParams, onlyOnce, show]",{"range":"2141","text":"2142"},{"range":"2143","text":"1831"},{"range":"2144","text":"2013"},{"range":"2145","text":"1831"},{"range":"2146","text":"2013"},{"range":"2147","text":"1831"},{"range":"2148","text":"2013"},{"range":"2149","text":"1831"},{"range":"2150","text":"2013"},{"range":"2151","text":"1831"},{"range":"2152","text":"2013"},{"range":"2153","text":"1831"},{"range":"2154","text":"2013"},{"range":"2155","text":"1831"},{"range":"2156","text":"2013"},{"range":"2157","text":"1831"},{"range":"2158","text":"2013"},{"range":"2159","text":"1831"},{"range":"2160","text":"2013"},[1697,1755],"[verifyEmail, match.params.token, history, authentication, loginRedirect]",[1200,1202],"[dispatch, onlyOnce]",[2563,2564],[2563,2563],"\\",[3267,3269],"[getNotifications, listParams]",[3590,3620],"[listParams, getNotifications, count, data.length, loading]",[570,571],[570,570],[3139,3141],"[getCityList, listParams, onlyOnce, resetComponentStore]",[4178,4233],"[getCityList, listParams, onlyOnce, resetComponentStore, setOnce]",[1378,1450],"[getReviewsList, listParams, lab_id, city, resetComponentStore, setOnce, onlyOnce]",[1576,1578],"[getProfile, getSavedCards]",[4448,4522],"[getChangeLabsList, currentCity, resetComponentStore, setOnce, labsParams, onlyOnce, getLocalityList]",[4830,4841],"[Data.labs, getChangeLabsList, labsParams]",[4392,4394],"[getCartDetails, getGuestUserCart, isAuthenticated]",[5775,5795],"[failHandler, history, paymentHandler, placedOrderDetails]",[6571,6577],"[cart, getSampleCollectionDetails]",[6872,6874],"[getTimeSlots]",[7619,7651],"[timeSlots, setTime, resetSlots, labSlots, scheduleCollection.collectionType]",[8999,9015],"[Menu, days, selected]",[9385,9408],"[defaultCollectionType, selected]",[526,528],"[getWalletBalance]",[1286,1288],"[drawStars]",[1234,1254],"[getPrescriptionList, prescriptionParams]",[1772,1774],[3559,3650],"[getLabsList, prescription_id_value, currentCity, resetComponentStore, setOnce, labsParams, onlyOnce, getLocalityList]",[3967,4001],"[prescription_id_value, Data.labs, getLabsList, labsParams]",[1375,1395],[3423,3451],"[getHealthRecordByID, history, onlyOnce, resetComponentStore, value]",[3859,3886],"[getOrdersList, listParams, value]",[2087,2164],"[getCMSBySlug, match.params.cms_slug, notFound, history, resetComponentStore, onlyOnce]",[904,906],"[resenOtpTimer]",[1087,1087],", [seconds]",[3060,3153],"[getAllPackages, disabled, city, listParams, resetComponentStore, lab_id, test_type, setOnce, onlyOnce]",[1865,1923],"[getAddressList, listParams, onlyOnce, resetComponentStore, setOnce]",[6944,6967],"[getAddressByID, resetComponentStore, value]",[1450,1505],"[resetComponentStore, city, getCategoriesList, setOnce, onlyOnce, initialParams]",[6369,6371],"[loadPage, resetComponentStore]",[1202,1269],"[getCategoriesList, listParams, city, resetComponentStore, setOnce, onlyOnce]",[2007,2013],"[data, habits, page]",[2138,2145],"[getHabitDescription, value]",[2449,2466],"[getGuestUserCart, isAuthenticated]",[10902,10974],"[getTestsByHabit, listParams, value, city, resetComponentStore, setOnce, onlyOnce]",[11765,11771],"[cart, data, isAuthenticated, page, tests]",[3861,3925],"[getAllPackages, city, listParams, resetComponentStore, setOnce, onlyOnce]",[4719,4725],"[cart, data, isAuthenticated, packs, page]",[4463,4543],"[getTestByID, currentCity, value, resetComponentStore, setOnce, getLocalityList, onlyOnce, listParams]",[4950,4984],"[getTestBasedLabsList, listParams, type, value]",[4662,4728],"[getPackageByID, value, currentCity, resetComponentStore, setOnce, onlyOnce, initialSortingParams, getLocalityList]",[5107,5141],[8527,8623],"[getTestsByCategory, listParams, city, match.params.category_slug, resetComponentStore, setOnce, onlyOnce]",[9414,9420],[6256,6277],"[getProfile, loadPage, onlyOnce, resetComponentStore]",[5980,6024],"[getLabTestsPage, city, resetComponentStore, onlyOnce]",[6513,6528],"[cartOption, data.packages]",[1699,1756],"[getFamilyList, listParams, onlyOnce, resetComponentStore, setOnce]",[2405,2456],"[getOrderByID, value, resetComponentStore, setOnce, onlyOnce, history]",[5561,5575],"[currentOrder, user?.user._id]",[1759,1816],"[getOrdersList, listParams, onlyOnce, resetComponentStore, setOnce]",[3267,3269],[958,960],"[getCartDetails, getCartOrder]",[1284,1345],"[getLabsList, listParams, city, resetComponentStore, setOnce, onlyOnce]",[2432,2494],"[getLabByID, value, currentCity, resetComponentStore, setOnce, onlyOnce]",[1562,1574],"[getGuestUserCart, isLoggedIn]",[3569,3575],"[cart, isLoggedIn, labs, labsData, loadMoreData]",[2710,2771],"[getChangeLabsList, resetComponentStore, setOnce, labsParams, onlyOnce]",[3291,3321],"[getChangeLabsList, Data.labs, labsParams]",[2621,2646],"[getArticleBySlug, getArticleCategoryList, history, onlyOnce, resetComponentStore, value]",[1356,1409],"[onlyOnce, getArticleList, value, listParams, resetComponentStore, getArticleCategoryList]",[1892,1969],"[getArticleList, value, resetComponentStore, setOnce, getArticleCategoryList, onlyOnce, listParams]",[3238,3301],"[getHealthRecordList, listParams, onlyOnce, resetComponentStore, setOnce]",[2830,2872],"[defaultCategories, getArticleCategoryList, listParams, onlyOnce, show]",[518,519],[518,518],[1103,1104],[1103,1103],[1120,1121],[1120,1120],[1197,1198],[1197,1197],[1214,1215],[1214,1214],[1783,1784],[1783,1783],[1831,1832],[1831,1831],[3094,3095],[3094,3094],[3142,3143],[3142,3142]]